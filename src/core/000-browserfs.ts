// Generated by CoffeeScript 1.6.2
(function() {
  var BrowserFS,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BrowserFS = (function() {
    function BrowserFS() {}

    BrowserFS.node = {};

    BrowserFS.install = function(obj) {
      var oldRequire;

      obj.Buffer = BrowserFS.node.Buffer;
      obj.process = BrowserFS.node.process;
      oldRequire = obj.require != null ? obj.require : null;
      return obj.require = function(arg, herp) {
        if ((herp != null) && (arg == null)) {
          arg = herp;
        }
        switch (arg) {
          case 'fs':
            return BrowserFS.node.fs;
          case 'path':
            return BrowserFS.node.path;
          case 'process':
            return BrowserFS.node.process;
          case 'buffer':
            return BrowserFS.node;
          default:
            if (oldRequire != null) {
              return oldRequire.apply(this, arguments);
            } else {
              throw new Error("Module not found: " + arg);
            }
        }
      };
    };

    BrowserFS.initialize = function(rootfs) {
      return BrowserFS.node.fs._initialize(rootfs);
    };

    BrowserFS.util = {
      roughSizeOfObject: function(object) {
        var bytes, key, objectList, prop, stack, value;

        objectList = [];
        stack = [object];
        bytes = 0;
        while (stack.length !== 0) {
          value = stack.pop();
          if (typeof value === 'boolean') {
            bytes += 4;
          } else if (typeof value === 'string') {
            bytes += value.length * 2;
          } else if (typeof value === 'number') {
            bytes += 8;
          } else if (typeof value === 'object' && __indexOf.call(objectList, value) < 0) {
            objectList.push(value);
            bytes += 4;
            for (key in value) {
              prop = value[key];
              bytes += key.length * 2;
              stack.push(prop);
            }
          }
        }
        return bytes;
      }
    };

    BrowserFS.isIE = /(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase());

    return BrowserFS;

  })();

}).call(this);
