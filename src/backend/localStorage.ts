// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BrowserFS.FileSystem.LocalStorage = (function(_super) {
    var e, supportsBinaryString;

    __extends(LocalStorage, _super);

    function LocalStorage() {
      var data, i, inode, len, path, _i, _ref, _ref1;

      this._index = new BrowserFS.FileIndex;
      for (i = _i = 0, _ref = window.localStorage.length; _i < _ref; i = _i += 1) {
        path = window.localStorage.key(i);
        if (path[0] !== '/') {
          continue;
        }
        data = (_ref1 = window.localStorage.getItem(path)) != null ? _ref1 : '';
        len = this._getFileLength(data);
        inode = new BrowserFS.FileInode(BrowserFS.node.fs.Stats.FILE, len);
        this._index.addPath(path, inode);
      }
    }

    LocalStorage.prototype._getFile = function(path, flags, inode) {
      var data;

      data = window.localStorage.getItem(path);
      if (data === null) {
        return null;
      }
      return this._convertFromBinaryString(path, data, flags, inode);
    };

    LocalStorage.prototype._syncSync = function(path, data, inode) {
      var e;

      data = this._convertToBinaryString(data, inode);
      try {
        window.localStorage.setItem(path, data);
        this._index.addPath(path, inode);
      } catch (_error) {
        e = _error;
        throw new BrowserFS.ApiError(BrowserFS.ApiError.DRIVE_FULL, "Unable to sync " + path);
      }
    };

    try {
      window.localStorage.setItem("__test__", String.fromCharCode(0xD800));
      supportsBinaryString = window.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
    } catch (_error) {
      e = _error;
      supportsBinaryString = false;
    }

    if (supportsBinaryString) {
      LocalStorage.prototype._convertToBinaryString = function(data, inode) {
        var headerBuff, headerDat;

        data = data.toString('binary_string');
        headerBuff = new BrowserFS.node.Buffer(18);
        headerBuff.writeUInt16BE(inode.mode, 0);
        headerBuff.writeDoubleBE(inode.mtime.getTime(), 2);
        headerBuff.writeDoubleBE(inode.atime.getTime(), 10);
        headerDat = headerBuff.toString('binary_string');
        data = headerDat + data;
        return data;
      };
      LocalStorage.prototype._convertFromBinaryString = function(path, data, flags, inode) {
        var buffer, file, headerBuff;

        headerBuff = new BrowserFS.node.Buffer(data.substr(0, 10), 'binary_string');
        data = data.substr(10);
        buffer = new BrowserFS.node.Buffer(data, 'binary_string');
        file = new BrowserFS.File.PreloadFile.LocalStorageFile(this, path, flags, inode, buffer);
        file._stat.mode = headerBuff.readUInt16BE(0);
        file._stat.mtime = new Date(headerBuff.readDoubleBE(2));
        file._stat.atime = new Date(headerBuff.readDoubleBE(10));
        return file;
      };
      LocalStorage.prototype._getFileLength = function(data) {
        if (data.length > 10) {
          return BrowserFS.StringUtil.FindUtil('binary_string').byteLength(data.substr(10));
        } else {
          return 0;
        }
      };
    } else {
      LocalStorage.prototype._convertToBinaryString = function(data, inode) {
        var headerBuff, headerDat;

        data = data.toString('binary_string_ie');
        headerBuff = new BrowserFS.node.Buffer(18);
        headerBuff.writeUInt16BE(inode.mode, 0);
        headerBuff.writeDoubleBE(inode.mtime.getTime(), 2);
        headerBuff.writeDoubleBE(inode.atime.getTime(), 10);
        headerDat = headerBuff.toString('binary_string_ie');
        data = headerDat + data;
        return data;
      };
      LocalStorage.prototype._convertFromBinaryString = function(path, data, flags, inode) {
        var buffer, file, headerBuff;

        headerBuff = new BrowserFS.node.Buffer(data.substr(0, 18), 'binary_string_ie');
        data = data.substr(18);
        buffer = new BrowserFS.node.Buffer(data, 'binary_string_ie');
        file = new BrowserFS.File.PreloadFile.LocalStorageFile(this, path, flags, inode, buffer);
        file._stat.mode = headerBuff.readUInt16BE(0);
        file._stat.mtime = new Date(headerBuff.readDoubleBE(2));
        file._stat.atime = new Date(headerBuff.readDoubleBE(10));
        return file;
      };
      LocalStorage.prototype._getFileLength = function(data) {
        if (data.length > 0) {
          return data.length - 18;
        } else {
          return 0;
        }
      };
    }

    LocalStorage.prototype.empty = function() {
      window.localStorage.clear();
      return this._index = new BrowserFS.FileIndex;
    };

    LocalStorage.prototype.getName = function() {
      return 'localStorage';
    };

    LocalStorage.isAvailable = function() {
      return (typeof window !== "undefined" && window !== null ? window.localStorage : void 0) != null;
    };

    LocalStorage.prototype.diskSpace = function(path, cb) {
      var data, i, key, remaining, storageLimit, usedSpace, _i;

      storageLimit = 5242880;
      usedSpace = 0;
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        key = window.localStorage.key(i);
        usedSpace += key.length * 2;
        data = window.localStorage.getItem(key);
        usedSpace += data.length * 2;
      }
      if (window.localStorage.remainingSpace != null) {
        remaining = window.localStorage.remainingSpace();
        storageLimit = usedSpace + remaining;
      }
      return cb(storageLimit, usedSpace);
    };

    LocalStorage.prototype.isReadOnly = function() {
      return false;
    };

    LocalStorage.prototype.supportsLinks = function() {
      return false;
    };

    LocalStorage.prototype.supportsProps = function() {
      return true;
    };

    LocalStorage.prototype.unlinkSync = function(path) {
      LocalStorage.__super__.unlinkSync.call(this, path);
      return window.localStorage.removeItem(path);
    };

    LocalStorage.prototype._truncate = function(path, flags, inode) {
      inode.size = 0;
      return new BrowserFS.File.PreloadFile.LocalStorageFile(this, path, flags, inode);
    };

    LocalStorage.prototype._fetch = function(path, flags, inode) {
      return this._getFile(path, flags, inode);
    };

    LocalStorage.prototype._create = function(path, flags, inode) {
      return new BrowserFS.File.PreloadFile.LocalStorageFile(this, path, flags, inode);
    };

    LocalStorage.prototype._rmdirSync = function(path, inode) {
      var file, files, sep, _i, _len;

      files = inode.getListing();
      sep = BrowserFS.node.path.sep;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        window.localStorage.removeItem("" + path + sep + file);
      }
    };

    return LocalStorage;

  })(BrowserFS.IndexedFileSystem);

  BrowserFS.File.PreloadFile.LocalStorageFile = (function(_super) {
    __extends(LocalStorageFile, _super);

    function LocalStorageFile() {
      _ref = LocalStorageFile.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LocalStorageFile.prototype.syncSync = function() {
      this._fs._syncSync(this._path, this._buffer, this._stat);
    };

    LocalStorageFile.prototype.closeSync = function() {
      return this.syncSync();
    };

    return LocalStorageFile;

  })(BrowserFS.File.PreloadFile);

}).call(this);
