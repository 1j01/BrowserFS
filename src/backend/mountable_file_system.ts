// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  BrowserFS.FileSystem.MountableFileSystem = (function(_super) {
    var cmds, defineFcn, fnName, fsCmdMap, i, j, _i, _j, _ref, _ref1;

    __extends(MountableFileSystem, _super);

    function MountableFileSystem() {
      this.mntMap = {};
      this.rootFs = new BrowserFS.FileSystem.InMemory();
    }

    MountableFileSystem.prototype.mount = function(mnt_pt, fs) {
      if (this.mntMap[mnt_pt]) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "Mount point " + mnt_pt + " is already taken.");
      }
      this.rootFs.mkdirSync(mnt_pt);
      return this.mntMap[mnt_pt] = fs;
    };

    MountableFileSystem.prototype.umount = function(mnt_pt) {
      if (!this.mntMap[mnt_pt]) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "Mount point " + mnt_pt + " is already unmounted.");
      }
      delete this.mntMap[mnt_pt];
      return this.rootFs.rmdirSync(mnt_pt);
    };

    MountableFileSystem.prototype._get_fs = function(path) {
      var fs, mnt_pt, _ref;

      _ref = this.mntMap;
      for (mnt_pt in _ref) {
        fs = _ref[mnt_pt];
        if (path.indexOf(mnt_pt) === 0) {
          path = path.substr(mnt_pt.length > 1 ? mnt_pt.length : 0);
          if (path === '') {
            path = '/';
          }
          return [fs, path];
        }
      }
      return [this.rootFs, path];
    };

    MountableFileSystem.prototype.getName = function() {
      return 'MountableFileSystem';
    };

    MountableFileSystem.isAvailable = function() {
      return true;
    };

    MountableFileSystem.prototype.diskSpace = function(path, cb) {
      return cb(0, 0);
    };

    MountableFileSystem.prototype.isReadOnly = function() {
      return false;
    };

    MountableFileSystem.prototype.supportsLinks = function() {
      return false;
    };

    MountableFileSystem.prototype.supportsProps = function() {
      return false;
    };

    MountableFileSystem.prototype.supportsSynch = function() {
      return true;
    };

    defineFcn = function(name, isSync, numArgs) {
      return function() {
        var args, rv;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        rv = this._get_fs(args[0]);
        args[0] = rv[1];
        return rv[0][name].apply(rv[0], args);
      };
    };

    fsCmdMap = [['readdir', 'exists', 'unlink', 'rmdir', 'readlink'], ['stat', 'mkdir', 'realpath', 'truncate'], ['open', 'readFile', 'chmod', 'utimes'], ['chown'], ['writeFile', 'appendFile']];

    for (i = _i = 0, _ref = fsCmdMap.length; _i < _ref; i = _i += 1) {
      cmds = fsCmdMap[i];
      for (j = _j = 0, _ref1 = cmds.length; _j < _ref1; j = _j += 1) {
        fnName = cmds[j];
        MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
        MountableFileSystem.prototype[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);
      }
    }

    MountableFileSystem.prototype.rename = function(oldPath, newPath, cb) {
      var fs1_rv, fs2_rv;

      fs1_rv = this._get_fs(oldPath);
      fs2_rv = this._get_fs(newPath);
      if (fs1_rv instanceof BrowserFS.ApiError) {
        return cb(fs1_rv);
      }
      if (fs2_rv instanceof BrowserFS.ApiError) {
        return cb(fs2_rv);
      }
      if (fs1_rv[0] === fs2_rv[0]) {
        return fs1_rv[0].rename(fs1_rv[1], fs2_rv[1], cb);
      }
      return BrowserFS.node.fs.readFile(oldPath, function(err, data) {
        if (err) {
          return cb(err);
        }
        return BrowserFS.node.fs.writeFile(newPath, data, function(err) {
          if (err) {
            return cb(err);
          }
          return BrowserFS.node.fs.unlink(oldPath, cb);
        });
      });
    };

    MountableFileSystem.prototype.renameSync = function(oldPath, newPath) {
      var data, fs1_rv, fs2_rv;

      fs1_rv = this._get_fs(oldPath);
      fs2_rv = this._get_fs(newPath);
      if (fs1_rv instanceof BrowserFS.ApiError) {
        throw fs1_rv;
      }
      if (fs2_rv instanceof BrowserFS.ApiError) {
        throw fs2_rv;
      }
      if (fs1_rv[0] === fs2_rv[0]) {
        return fs1_rv[0].renameSync(fs1_rv[1], fs2_rv[1]);
      }
      data = BrowserFS.node.fs.readFileSync(oldPath);
      BrowserFS.node.fs.writeFileSync(newPath, data);
      return BrowserFS.node.fs.unlinkSync(oldPath);
    };

    return MountableFileSystem;

  })(BrowserFS.FileSystem);

}).call(this);
