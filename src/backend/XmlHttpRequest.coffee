# A simple filesystem backed by XmlHttpRequests.
class BrowserFS.FileSystem.XmlHttpRequest extends BrowserFS.FileSystem
  # Constructs the file system.
  # @param [String] path The path to the JSON file index generated by
  #   XHRIndexer.coffee. This can be relative to the current webpage, or
  #   absolutely specified.
  constructor: (path='index.json') ->

  # Retrieve the indicated file from the server using XmlHttpRequest.
  # @param [String] path
  # @param [BrowserFS.FileMode] flags
  # @param [BrowserFS.FileInode] inode
  # @return [BrowserFS.File.PreloadFile] Returns a preload file with the file's
  #   contents, or null if it does not exist.
  _getFile: (path, flags, inode) ->
    data = null
    # Doesn't exist.
    return null if data is null
    #return new BrowserFS.File.PreloadFile.XHRFile @, path, flags, inode.getStats(), new BrowserFS.node.Buffer(data, 'binary_string')

  # Returns the name of the file system.
  # @return [String]
  getName: -> 'XmlHttpRequest'
  # Does the browser support XmlHttpRequest?
  # @return [Boolean]
  isAvailable: ->
    # Note: Older browsers use a different name for XHR, iirc.
    false
  # Passes the size and taken space in bytes to the callback. Size will always
  # be equal to taken space, since this is a read-only file system.
  # @param [String] path Unused in the implementation.
  # @param [Function(Number, Number)] cb
  diskSpace: (path, cb) ->
    cb 0, 0
  # Returns true; this filesystem is read-only.
  # @return [Boolean]
  isReadOnly: -> true
  # Returns false; this filesystem does not support symlinks.
  # @return [Boolean]
  supportsLinks: -> false
  # Returns false; this filesystem does not support properties.
  # @return [Boolean]
  supportsProps: -> false

  # File or directory operations

  stat: (path, isLstat, cb) ->
    inode = @_index.getInode path
    if inode is null
      return cb new BrowserFS.ApiError BrowserFS.ApiError.NOT_FOUND, "#{path} not found."
    cb null, inode.getStats()

  # File operations

  open: (path, flags, mode, cb) ->
    # Check if the path exists, and is a file.
    inode = @_index.getInode path
    if inode isnt null
      unless inode.isFile()
        return cb new BrowserFS.ApiError BrowserFS.ApiError.NOT_FOUND, "#{path} is a directory."
      else
        switch flags.pathExistsAction()
          when BrowserFS.FileMode.THROW_EXCEPTION
            return cb new BrowserFS.ApiError BrowserFS.ApiError.INVALID_PARAM, "#{path} already exists."
          when BrowserFS.FileMode.TRUNCATE_FILE
            # Truncate to 0.
            inode.size = 0
            file = new BrowserFS.File.PreloadFile.XHRFile @, path, flags, inode.getStats()
          when BrowserFS.FileMode.NOP
            # Use existing file contents.
            file = @_getFile path, flags, inode
            break
          else
            return cb new BrowserFS.ApiError BrowserFS.ApiError.INVALID_PARAM, 'Invalid FileMode object.'
    else
      switch flags.pathNotExistsAction()
        when BrowserFS.FileMode.CREATE_FILE
          file = new BrowserFS.File.PreloadFile.XHRFile @, path, flags, new BrowserFS.node.fs.Stats(BrowserFS.node.fs.Stats.FILE, 0, mode)
        when BrowserFS.FileMode.THROW_EXCEPTION
          return cb new BrowserFS.ApiError BrowserFS.ApiError.INVALID_PARAM, "#{path} doesn't exist."
        else
          return cb new BrowserFS.ApiError BrowserFS.ApiError.INVALID_PARAM, 'Invalid FileMode object.'

    # 'file' should be set by now.
    cb null, file

  # Directory operations

  readdir: (path, cb) ->
    # Check if it exists.
    inode = @_index.getInode path
    if inode is null
      return cb new BrowserFS.ApiError BrowserFS.ApiError.NOT_FOUND, "#{path} not found."
    else if inode.isFile()
      return cb new BrowserFS.ApiError BrowserFS.ApiError.NOT_FOUND, "#{path} is a file, not a directory."
    cb null, inode.getListing()


# File class for the XHR-based file system.
class BrowserFS.File.PreloadFile.XHRFile extends BrowserFS.File.PreloadFile
  # Asynchronous close. It's a NOP.
  # @param [Function(BrowserFS.ApiError)] cb
  close: (cb)->