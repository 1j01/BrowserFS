// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BrowserFS.FileSystem.InMemory = (function(_super) {
    __extends(InMemory, _super);

    function InMemory() {
      this.empty();
    }

    InMemory.prototype.empty = function() {
      return this._index = new BrowserFS.FileIndex;
    };

    InMemory.prototype.getName = function() {
      return 'In-memory';
    };

    InMemory.isAvailable = function() {
      return true;
    };

    InMemory.prototype.diskSpace = function(path, cb) {
      return cb(Infinity, BrowserFS.util.roughSizeOfObject(this._index));
    };

    InMemory.prototype.isReadOnly = function() {
      return false;
    };

    InMemory.prototype.supportsLinks = function() {
      return false;
    };

    InMemory.prototype.supportsProps = function() {
      return false;
    };

    InMemory.prototype._truncate = function(path, flags, inode) {
      var file;

      inode.size = 0;
      inode.mtime = new Date();
      file = inode.file_data;
      file._mode = flags;
      file._buffer = new BrowserFS.node.Buffer(0);
      return file;
    };

    InMemory.prototype._fetch = function(path, flags, inode) {
      var file;

      file = inode.file_data;
      file._mode = flags;
      return file;
    };

    InMemory.prototype._create = function(path, flags, inode) {
      var file;

      file = new BrowserFS.File.NoSyncFile(this, path, flags, inode);
      inode.file_data = file;
      this._index.addPath(path, inode);
      return file;
    };

    InMemory.prototype._rmdirSync = function(path, inode) {};

    return InMemory;

  })(BrowserFS.IndexedFileSystem);

}).call(this);
