// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BrowserFS.IndexedFileSystem = (function(_super) {
    __extends(IndexedFileSystem, _super);

    function IndexedFileSystem(_index) {
      this._index = _index;
    }

    IndexedFileSystem.prototype.renameSync = function(oldPath, newPath) {
      var oldInode;

      oldInode = this._index.removePath(oldPath);
      if (oldInode === null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + oldPath + " not found.");
      }
      this._index.removePath(newPath);
      this._index.addPath(newPath, oldInode);
    };

    IndexedFileSystem.prototype.statSync = function(path, isLstat) {
      var inode, stats, _ref;

      inode = this._index.getInode(path);
      if (inode === null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " not found.");
      }
      stats = (_ref = typeof inode.getStats === "function" ? inode.getStats() : void 0) != null ? _ref : inode;
      return stats;
    };

    IndexedFileSystem.prototype.openSync = function(path, flags, mode) {
      var inode, parentInode, parentPath;

      inode = this._index.getInode(path);
      if (inode !== null) {
        if (!inode.isFile()) {
          throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " is a directory.");
        } else {
          switch (flags.pathExistsAction()) {
            case BrowserFS.FileMode.THROW_EXCEPTION:
              throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "" + path + " already exists.");
              break;
            case BrowserFS.FileMode.TRUNCATE_FILE:
              return this._truncate(path, flags, inode);
            case BrowserFS.FileMode.NOP:
              return this._fetch(path, flags, inode);
            default:
              throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, 'Invalid FileMode object.');
          }
        }
      } else {
        switch (flags.pathNotExistsAction()) {
          case BrowserFS.FileMode.CREATE_FILE:
            parentPath = BrowserFS.node.path.dirname(path);
            parentInode = this._index.getInode(parentPath);
            if (parentInode === null || parentInode.isFile()) {
              throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "" + parentPath + " doesn't exist.");
            }
            inode = new BrowserFS.node.fs.Stats(BrowserFS.node.fs.Stats.FILE, 0, mode);
            return this._create(path, flags, inode);
          case BrowserFS.FileMode.THROW_EXCEPTION:
            throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "" + path + " doesn't exist.");
            break;
          default:
            throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, 'Invalid FileMode object.');
        }
      }
    };

    IndexedFileSystem.prototype.unlinkSync = function(path) {
      var inode;

      inode = this._index.getInode(path);
      if (inode === null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " not found.");
      } else if (!inode.isFile()) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " is a directory, not a file.");
      }
      this._index.removePath(path);
    };

    IndexedFileSystem.prototype.rmdirSync = function(path) {
      var inode;

      inode = this._index.getInode(path);
      if (inode === null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " not found.");
      } else if (inode.isFile()) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " is a file, not a directory.");
      }
      this._index.removePath(path);
      return this._rmdirSync(path, inode);
    };

    IndexedFileSystem.prototype.mkdirSync = function(path, mode) {
      var inode, parent, success;

      inode = this._index.getInode(path);
      if (inode !== null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "" + path + " already exists.");
      }
      parent = BrowserFS.node.path.dirname(path);
      if (parent !== '/' && this._index.getInode(parent) === null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "Can't create " + path + " because " + parent + " doesn't exist.");
      }
      success = this._index.addPath(path, new BrowserFS.DirInode());
      if (success) {
        return;
      }
      throw new BrowserFS.ApiError(BrowserFS.ApiError.INVALID_PARAM, "Could not add " + path + " for some reason.");
    };

    IndexedFileSystem.prototype.readdirSync = function(path) {
      var inode;

      inode = this._index.getInode(path);
      if (inode === null) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " not found.");
      } else if (inode.isFile()) {
        throw new BrowserFS.ApiError(BrowserFS.ApiError.NOT_FOUND, "" + path + " is a file, not a directory.");
      }
      return inode.getListing();
    };

    IndexedFileSystem.prototype.chmodSync = function(path, isLchmod, mode) {
      var fd;

      fd = this.openSync(path, BrowserFS.FileMode.getFileMode('r+'), 0x1a4);
      fd._stat.mode = mode;
      fd.closeSync();
    };

    IndexedFileSystem.prototype.chownSync = function(path, isLchown, uid, gid) {
      var fd;

      fd = this.openSync(path, BrowserFS.FileMode.getFileMode('r+'), 0x1a4);
      fd._stat.uid = uid;
      fd._stat.gid = gid;
      fd.closeSync();
    };

    IndexedFileSystem.prototype.utimesSync = function(path, atime, mtime) {
      var fd;

      fd = this.openSync(path, BrowserFS.FileMode.getFileMode('r+'), 0x1a4);
      fd._stat.atime = atime;
      fd._stat.mtime = mtime;
      fd.closeSync();
    };

    return IndexedFileSystem;

  })(BrowserFS.SynchronousFileSystem);

}).call(this);
