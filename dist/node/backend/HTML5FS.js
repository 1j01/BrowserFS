var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var preload_file = require('../generic/preload_file');
var file_system = require('../core/file_system');
var api_error_1 = require('../core/api_error');
var file_flag_1 = require('../core/file_flag');
var node_fs_stats_1 = require('../core/node_fs_stats');
var path = require('path');
var global = require('../core/global');
var async = require('async');
var util_1 = require('../core/util');
function isDirectoryEntry(entry) {
    return entry.isDirectory;
}
var _getFS = global.webkitRequestFileSystem || global.requestFileSystem || null;
function _requestQuota(type, size, success, errorCallback) {
    if (typeof navigator['webkitPersistentStorage'] !== 'undefined') {
        switch (type) {
            case global.PERSISTENT:
                navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
                break;
            case global.TEMPORARY:
                navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
                break;
            default:
                errorCallback(new TypeError("Invalid storage type: " + type));
                break;
        }
    }
    else {
        global.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
    }
}
function _toArray(list) {
    return Array.prototype.slice.call(list || [], 0);
}
var HTML5FSFile = (function (_super) {
    __extends(HTML5FSFile, _super);
    function HTML5FSFile(_fs, _path, _flag, _stat, contents) {
        _super.call(this, _fs, _path, _flag, _stat, contents);
    }
    HTML5FSFile.prototype.sync = function (cb) {
        var _this = this;
        if (this.isDirty()) {
            var opts = {
                create: false
            };
            var _fs = this._fs;
            var success = function (entry) {
                entry.createWriter(function (writer) {
                    var buffer = _this.getBuffer();
                    var blob = new Blob([util_1.buffer2ArrayBuffer(buffer)]);
                    var length = blob.size;
                    writer.onwriteend = function () {
                        writer.onwriteend = null;
                        writer.truncate(length);
                        _this.resetDirty();
                        cb();
                    };
                    writer.onerror = function (err) {
                        cb(_fs.convert(err, _this.getPath(), false));
                    };
                    writer.write(blob);
                });
            };
            var error = function (err) {
                cb(_fs.convert(err, _this.getPath(), false));
            };
            _fs.fs.root.getFile(this.getPath(), opts, success, error);
        }
        else {
            cb();
        }
    };
    HTML5FSFile.prototype.close = function (cb) {
        this.sync(cb);
    };
    return HTML5FSFile;
})(preload_file.PreloadFile);
exports.HTML5FSFile = HTML5FSFile;
var HTML5FS = (function (_super) {
    __extends(HTML5FS, _super);
    function HTML5FS(size, type) {
        if (size === void 0) { size = 5; }
        if (type === void 0) { type = global.PERSISTENT; }
        _super.call(this);
        this.size = 1024 * 1024 * size;
        this.type = type;
    }
    HTML5FS.prototype.getName = function () {
        return 'HTML5 FileSystem';
    };
    HTML5FS.isAvailable = function () {
        return _getFS != null;
    };
    HTML5FS.prototype.isReadOnly = function () {
        return false;
    };
    HTML5FS.prototype.supportsSymlinks = function () {
        return false;
    };
    HTML5FS.prototype.supportsProps = function () {
        return false;
    };
    HTML5FS.prototype.supportsSynch = function () {
        return false;
    };
    HTML5FS.prototype.convert = function (err, p, expectedDir) {
        switch (err.name) {
            case "PathExistsError":
                return api_error_1.ApiError.EEXIST(p);
            case 'QuotaExceededError':
                return api_error_1.ApiError.FileError(api_error_1.ErrorCode.ENOSPC, p);
            case 'NotFoundError':
                return api_error_1.ApiError.ENOENT(p);
            case 'SecurityError':
                return api_error_1.ApiError.FileError(api_error_1.ErrorCode.EACCES, p);
            case 'InvalidModificationError':
                return api_error_1.ApiError.FileError(api_error_1.ErrorCode.EPERM, p);
            case 'TypeMismatchError':
                return api_error_1.ApiError.FileError(expectedDir ? api_error_1.ErrorCode.ENOTDIR : api_error_1.ErrorCode.EISDIR, p);
            case "EncodingError":
            case "InvalidStateError":
            case "NoModificationAllowedError":
            default:
                return api_error_1.ApiError.FileError(api_error_1.ErrorCode.EINVAL, p);
        }
    };
    HTML5FS.prototype.allocate = function (cb) {
        var _this = this;
        if (cb === void 0) { cb = function () { }; }
        var success = function (fs) {
            _this.fs = fs;
            cb();
        };
        var error = function (err) {
            cb(_this.convert(err, "/", true));
        };
        if (this.type === global.PERSISTENT) {
            _requestQuota(this.type, this.size, function (granted) {
                _getFS(_this.type, granted, success, error);
            }, error);
        }
        else {
            _getFS(this.type, this.size, success, error);
        }
    };
    HTML5FS.prototype.empty = function (mainCb) {
        var _this = this;
        this._readdir('/', function (err, entries) {
            if (err) {
                console.error('Failed to empty FS');
                mainCb(err);
            }
            else {
                var finished = function (er) {
                    if (err) {
                        console.error("Failed to empty FS");
                        mainCb(err);
                    }
                    else {
                        mainCb();
                    }
                };
                var deleteEntry = function (entry, cb) {
                    var succ = function () {
                        cb();
                    };
                    var error = function (err) {
                        cb(_this.convert(err, entry.fullPath, !entry.isDirectory));
                    };
                    if (isDirectoryEntry(entry)) {
                        entry.removeRecursively(succ, error);
                    }
                    else {
                        entry.remove(succ, error);
                    }
                };
                async.each(entries, deleteEntry, finished);
            }
        });
    };
    HTML5FS.prototype.rename = function (oldPath, newPath, cb) {
        var _this = this;
        var semaphore = 2, successCount = 0, root = this.fs.root, currentPath = oldPath, error = function (err) {
            if (--semaphore <= 0) {
                cb(_this.convert(err, currentPath, false));
            }
        }, success = function (file) {
            if (++successCount === 2) {
                return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
            }
            if (oldPath === newPath) {
                return cb();
            }
            currentPath = path.dirname(newPath);
            root.getDirectory(currentPath, {}, function (parentDir) {
                currentPath = path.basename(newPath);
                file.moveTo(parentDir, currentPath, function (entry) { cb(); }, function (err) {
                    if (file.isDirectory) {
                        currentPath = newPath;
                        _this.unlink(newPath, function (e) {
                            if (e) {
                                error(err);
                            }
                            else {
                                _this.rename(oldPath, newPath, cb);
                            }
                        });
                    }
                    else {
                        error(err);
                    }
                });
            }, error);
        };
        root.getFile(oldPath, {}, success, error);
        root.getDirectory(oldPath, {}, success, error);
    };
    HTML5FS.prototype.stat = function (path, isLstat, cb) {
        var _this = this;
        var opts = {
            create: false
        };
        var loadAsFile = function (entry) {
            var fileFromEntry = function (file) {
                var stat = new node_fs_stats_1.default(node_fs_stats_1.FileType.FILE, file.size);
                cb(null, stat);
            };
            entry.file(fileFromEntry, failedToLoad);
        };
        var loadAsDir = function (dir) {
            var size = 4096;
            var stat = new node_fs_stats_1.default(node_fs_stats_1.FileType.DIRECTORY, size);
            cb(null, stat);
        };
        var failedToLoad = function (err) {
            cb(_this.convert(err, path, false));
        };
        var failedToLoadAsFile = function () {
            _this.fs.root.getDirectory(path, opts, loadAsDir, failedToLoad);
        };
        this.fs.root.getFile(path, opts, loadAsFile, failedToLoadAsFile);
    };
    HTML5FS.prototype.open = function (p, flags, mode, cb) {
        var _this = this;
        var error = function (err) {
            if (err.name === 'InvalidModificationError' && flags.isExclusive()) {
                cb(api_error_1.ApiError.EEXIST(p));
            }
            else {
                cb(_this.convert(err, p, false));
            }
        };
        this.fs.root.getFile(p, {
            create: flags.pathNotExistsAction() === file_flag_1.ActionType.CREATE_FILE,
            exclusive: flags.isExclusive()
        }, function (entry) {
            entry.file(function (file) {
                var reader = new FileReader();
                reader.onloadend = function (event) {
                    var bfs_file = _this._makeFile(p, flags, file, reader.result);
                    cb(null, bfs_file);
                };
                reader.onerror = function (ev) {
                    error(reader.error);
                };
                reader.readAsArrayBuffer(file);
            }, error);
        }, error);
    };
    HTML5FS.prototype._statType = function (stat) {
        return stat.isFile ? node_fs_stats_1.FileType.FILE : node_fs_stats_1.FileType.DIRECTORY;
    };
    HTML5FS.prototype._makeFile = function (path, flag, stat, data) {
        if (data === void 0) { data = new ArrayBuffer(0); }
        var stats = new node_fs_stats_1.default(node_fs_stats_1.FileType.FILE, stat.size);
        var buffer = util_1.arrayBuffer2Buffer(data);
        return new HTML5FSFile(this, path, flag, stats, buffer);
    };
    HTML5FS.prototype._remove = function (path, cb, isFile) {
        var _this = this;
        var success = function (entry) {
            var succ = function () {
                cb();
            };
            var err = function (err) {
                cb(_this.convert(err, path, !isFile));
            };
            entry.remove(succ, err);
        };
        var error = function (err) {
            cb(_this.convert(err, path, !isFile));
        };
        var opts = {
            create: false
        };
        if (isFile) {
            this.fs.root.getFile(path, opts, success, error);
        }
        else {
            this.fs.root.getDirectory(path, opts, success, error);
        }
    };
    HTML5FS.prototype.unlink = function (path, cb) {
        this._remove(path, cb, true);
    };
    HTML5FS.prototype.rmdir = function (path, cb) {
        this._remove(path, cb, false);
    };
    HTML5FS.prototype.mkdir = function (path, mode, cb) {
        var _this = this;
        var opts = {
            create: true,
            exclusive: true
        };
        var success = function (dir) {
            cb();
        };
        var error = function (err) {
            cb(_this.convert(err, path, true));
        };
        this.fs.root.getDirectory(path, opts, success, error);
    };
    HTML5FS.prototype._readdir = function (path, cb) {
        var _this = this;
        var error = function (err) {
            cb(_this.convert(err, path, true));
        };
        this.fs.root.getDirectory(path, { create: false }, function (dirEntry) {
            var reader = dirEntry.createReader();
            var entries = [];
            var readEntries = function () {
                reader.readEntries((function (results) {
                    if (results.length) {
                        entries = entries.concat(_toArray(results));
                        readEntries();
                    }
                    else {
                        cb(null, entries);
                    }
                }), error);
            };
            readEntries();
        }, error);
    };
    HTML5FS.prototype.readdir = function (path, cb) {
        this._readdir(path, function (e, entries) {
            if (e) {
                return cb(e);
            }
            var rv = [];
            for (var i = 0; i < entries.length; i++) {
                rv.push(entries[i].name);
            }
            cb(null, rv);
        });
    };
    return HTML5FS;
})(file_system.BaseFileSystem);
exports.__esModule = true;
exports["default"] = HTML5FS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRNTDVGUy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYWNrZW5kL0hUTUw1RlMudHMiXSwibmFtZXMiOlsiaXNEaXJlY3RvcnlFbnRyeSIsIl9yZXF1ZXN0UXVvdGEiLCJfdG9BcnJheSIsIkhUTUw1RlNGaWxlIiwiSFRNTDVGU0ZpbGUuY29uc3RydWN0b3IiLCJIVE1MNUZTRmlsZS5zeW5jIiwiSFRNTDVGU0ZpbGUuY2xvc2UiLCJIVE1MNUZTIiwiSFRNTDVGUy5jb25zdHJ1Y3RvciIsIkhUTUw1RlMuZ2V0TmFtZSIsIkhUTUw1RlMuaXNBdmFpbGFibGUiLCJIVE1MNUZTLmlzUmVhZE9ubHkiLCJIVE1MNUZTLnN1cHBvcnRzU3ltbGlua3MiLCJIVE1MNUZTLnN1cHBvcnRzUHJvcHMiLCJIVE1MNUZTLnN1cHBvcnRzU3luY2giLCJIVE1MNUZTLmNvbnZlcnQiLCJIVE1MNUZTLmFsbG9jYXRlIiwiSFRNTDVGUy5lbXB0eSIsIkhUTUw1RlMucmVuYW1lIiwiSFRNTDVGUy5zdGF0IiwiSFRNTDVGUy5vcGVuIiwiSFRNTDVGUy5fc3RhdFR5cGUiLCJIVE1MNUZTLl9tYWtlRmlsZSIsIkhUTUw1RlMuX3JlbW92ZSIsIkhUTUw1RlMudW5saW5rIiwiSFRNTDVGUy5ybWRpciIsIkhUTUw1RlMubWtkaXIiLCJIVE1MNUZTLl9yZWFkZGlyIiwiSFRNTDVGUy5yZWFkZGlyIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU8sWUFBWSxXQUFXLHlCQUF5QixDQUFDLENBQUM7QUFDekQsSUFBTyxXQUFXLFdBQVcscUJBQXFCLENBQUMsQ0FBQztBQUNwRCwwQkFBa0MsbUJBQW1CLENBQUMsQ0FBQTtBQUN0RCwwQkFBbUMsbUJBQW1CLENBQUMsQ0FBQTtBQUN2RCw4QkFBeUMsdUJBQXVCLENBQUMsQ0FBQTtBQUVqRSxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQztBQUM5QixJQUFPLE1BQU0sV0FBVyxnQkFBZ0IsQ0FBQyxDQUFDO0FB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ID0gcmVxdWlyZSgnLi4vZ2VuZXJpYy9wcmVsb2FkX2ZpbGUnKTtcbmltcG9ydCBmaWxlX3N5c3RlbSA9IHJlcXVpcmUoJy4uL2NvcmUvZmlsZV9zeXN0ZW0nKTtcbmltcG9ydCB7QXBpRXJyb3IsIEVycm9yQ29kZX0gZnJvbSAnLi4vY29yZS9hcGlfZXJyb3InO1xuaW1wb3J0IHtGaWxlRmxhZywgQWN0aW9uVHlwZX0gZnJvbSAnLi4vY29yZS9maWxlX2ZsYWcnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFN0YXRzLCBGaWxlVHlwZX0gZnJvbSAnLi4vY29yZS9ub2RlX2ZzX3N0YXRzJztcbmltcG9ydCBmaWxlID0gcmVxdWlyZSgnLi4vY29yZS9maWxlJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBnbG9iYWwgPSByZXF1aXJlKCcuLi9jb3JlL2dsb2JhbCcpO1xuaW1wb3J0IGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcbmltcG9ydCB7YnVmZmVyMkFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlcjJCdWZmZXJ9IGZyb20gJy4uL2NvcmUvdXRpbCc7XG5cbmZ1bmN0aW9uIGlzRGlyZWN0b3J5RW50cnkoZW50cnk6IEVudHJ5KTogZW50cnkgaXMgRGlyZWN0b3J5RW50cnkge1xuICByZXR1cm4gZW50cnkuaXNEaXJlY3Rvcnk7XG59XG5cbnZhciBfZ2V0RlM6ICh0eXBlOm51bWJlciwgc2l6ZTpudW1iZXIsIHN1Y2Nlc3NDYWxsYmFjazogRmlsZVN5c3RlbUNhbGxiYWNrLCBlcnJvckNhbGxiYWNrPzogRXJyb3JDYWxsYmFjaykgPT4gdm9pZCA9IGdsb2JhbC53ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbSB8fCBnbG9iYWwucmVxdWVzdEZpbGVTeXN0ZW0gfHwgbnVsbDtcblxuZnVuY3Rpb24gX3JlcXVlc3RRdW90YSh0eXBlOiBudW1iZXIsIHNpemU6IG51bWJlciwgc3VjY2VzczogKHNpemU6IG51bWJlcikgPT4gdm9pZCwgZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjaykge1xuICAvLyBXZSBjYXN0IG5hdmlnYXRvciBhbmQgd2luZG93IHRvICc8YW55PicgYmVjYXVzZSBldmVyeXRoaW5nIGhlcmUgaXNcbiAgLy8gbm9uc3RhbmRhcmQgZnVuY3Rpb25hbGl0eSwgZGVzcGl0ZSB0aGUgZmFjdCB0aGF0IENocm9tZSBoYXMgdGhlIG9ubHlcbiAgLy8gaW1wbGVtZW50YXRpb24gb2YgdGhlIEhUTUw1RlMgYW5kIGlzIGxpa2VseSBkcml2aW5nIHRoZSBzdGFuZGFyZGl6YXRpb25cbiAgLy8gcHJvY2Vzcy4gVGh1cywgdGhlc2Ugb2JqZWN0cyBkZWZpbmVkIG9mZiBvZiBuYXZpZ2F0b3IgYW5kIHdpbmRvdyBhcmUgbm90XG4gIC8vIHByZXNlbnQgaW4gdGhlIERlZmluaXRlbHlUeXBlZCBUeXBlU2NyaXB0IHR5cGluZ3MgZm9yIEZpbGVTeXN0ZW0uXG4gIGlmICh0eXBlb2YgKDxhbnk+IG5hdmlnYXRvcilbJ3dlYmtpdFBlcnNpc3RlbnRTdG9yYWdlJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgIGNhc2UgZ2xvYmFsLlBFUlNJU1RFTlQ6XG4gICAgICAgICg8YW55PiBuYXZpZ2F0b3IpLndlYmtpdFBlcnNpc3RlbnRTdG9yYWdlLnJlcXVlc3RRdW90YShzaXplLCBzdWNjZXNzLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsb2JhbC5URU1QT1JBUlk6XG4gICAgICAgICg8YW55PiBuYXZpZ2F0b3IpLndlYmtpdFRlbXBvcmFyeVN0b3JhZ2UucmVxdWVzdFF1b3RhKHNpemUsIHN1Y2Nlc3MsIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZXJyb3JDYWxsYmFjayhuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHN0b3JhZ2UgdHlwZTogJHt0eXBlfWApKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgICg8YW55PiBnbG9iYWwpLndlYmtpdFN0b3JhZ2VJbmZvLnJlcXVlc3RRdW90YSh0eXBlLCBzaXplLCBzdWNjZXNzLCBlcnJvckNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdG9BcnJheShsaXN0PzogYW55W10pOiBhbnlbXSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaXN0IHx8IFtdLCAwKTtcbn1cblxuLy8gQSBub3RlIGFib3V0IGdldEZpbGUgYW5kIGdldERpcmVjdG9yeSBvcHRpb25zOlxuLy8gVGhlc2UgbWV0aG9kcyBhcmUgY2FsbGVkIGF0IG51bWVyb3VzIHBsYWNlcyBpbiB0aGlzIGZpbGUsIGFuZCBhcmUgcGFzc2VkXG4vLyBzb21lIGNvbWJpbmF0aW9uIG9mIHRoZXNlIHR3byBvcHRpb25zOlxuLy8gICAtIGNyZWF0ZTogSWYgdHJ1ZSwgdGhlIGVudHJ5IHdpbGwgYmUgY3JlYXRlZCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuLy8gICAgICAgICAgICAgSWYgZmFsc2UsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4vLyAgIC0gZXhjbHVzaXZlOiBJZiB0cnVlLCBvbmx5IGNyZWF0ZSB0aGUgZW50cnkgaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0LFxuLy8gICAgICAgICAgICAgICAgYW5kIHRocm93IGFuIGVycm9yIGlmIGl0IGRvZXMuXG5cbmV4cG9ydCBjbGFzcyBIVE1MNUZTRmlsZSBleHRlbmRzIHByZWxvYWRfZmlsZS5QcmVsb2FkRmlsZTxIVE1MNUZTPiBpbXBsZW1lbnRzIGZpbGUuRmlsZSB7XG4gIGNvbnN0cnVjdG9yKF9mczogSFRNTDVGUywgX3BhdGg6IHN0cmluZywgX2ZsYWc6IEZpbGVGbGFnLCBfc3RhdDogU3RhdHMsIGNvbnRlbnRzPzogTm9kZUJ1ZmZlcikge1xuICAgIHN1cGVyKF9mcywgX3BhdGgsIF9mbGFnLCBfc3RhdCwgY29udGVudHMpO1xuICB9XG5cbiAgcHVibGljIHN5bmMoY2I6IChlPzogQXBpRXJyb3IpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0RpcnR5KCkpIHtcbiAgICAgIC8vIERvbid0IGNyZWF0ZSB0aGUgZmlsZSAoaXQgc2hvdWxkIGFscmVhZHkgaGF2ZSBiZWVuIGNyZWF0ZWQgYnkgYG9wZW5gKVxuICAgICAgdmFyIG9wdHMgPSB7XG4gICAgICAgIGNyZWF0ZTogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIgX2ZzID0gdGhpcy5fZnM7XG4gICAgICB2YXIgc3VjY2VzczogRmlsZUVudHJ5Q2FsbGJhY2sgPSAoZW50cnkpID0+IHtcbiAgICAgICAgZW50cnkuY3JlYXRlV3JpdGVyKCh3cml0ZXIpID0+IHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXIyQXJyYXlCdWZmZXIoYnVmZmVyKV0pO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBibG9iLnNpemU7XG4gICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICB3cml0ZXIub253cml0ZWVuZCA9IG51bGw7XG4gICAgICAgICAgICB3cml0ZXIudHJ1bmNhdGUobGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMucmVzZXREaXJ0eSgpO1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHdyaXRlci5vbmVycm9yID0gKGVycjogRE9NRXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNiKF9mcy5jb252ZXJ0KGVyciwgdGhpcy5nZXRQYXRoKCksIGZhbHNlKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3cml0ZXIud3JpdGUoYmxvYik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHZhciBlcnJvciA9IChlcnI6IERPTUVycm9yKSA9PiB7XG4gICAgICAgIGNiKF9mcy5jb252ZXJ0KGVyciwgdGhpcy5nZXRQYXRoKCksIGZhbHNlKSk7XG4gICAgICB9O1xuICAgICAgX2ZzLmZzLnJvb3QuZ2V0RmlsZSh0aGlzLmdldFBhdGgoKSwgb3B0cywgc3VjY2VzcywgZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjbG9zZShjYjogKGU/OiBBcGlFcnJvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuc3luYyhjYik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSFRNTDVGUyBleHRlbmRzIGZpbGVfc3lzdGVtLkJhc2VGaWxlU3lzdGVtIGltcGxlbWVudHMgZmlsZV9zeXN0ZW0uRmlsZVN5c3RlbSB7XG4gIHByaXZhdGUgc2l6ZTogbnVtYmVyO1xuICBwcml2YXRlIHR5cGU6IG51bWJlcjtcbiAgLy8gSFRNTDVGaWxlIHJlYWNoZXMgaW50byBIVE1MNUZTLiA6L1xuICBwdWJsaWMgZnM6IEZpbGVTeXN0ZW07XG4gIC8qKlxuICAgKiBBcmd1bWVudHM6XG4gICAqICAgLSB0eXBlOiBQRVJTSVNURU5UIG9yIFRFTVBPUkFSWVxuICAgKiAgIC0gc2l6ZTogc3RvcmFnZSBxdW90YSB0byByZXF1ZXN0LCBpbiBtZWdhYnl0ZXMuIEFsbG9jYXRlZCB2YWx1ZSBtYXkgYmUgbGVzcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHNpemU6IG51bWJlciA9IDUsIHR5cGU6IG51bWJlciA9IGdsb2JhbC5QRVJTSVNURU5UKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBDb252ZXJ0IE1CIHRvIGJ5dGVzLlxuICAgIHRoaXMuc2l6ZSA9IDEwMjQgKiAxMDI0ICogc2l6ZTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICB9XG5cbiAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ0hUTUw1IEZpbGVTeXN0ZW0nO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gX2dldEZTICE9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgaXNSZWFkT25seSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3VwcG9ydHNTeW1saW5rcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3VwcG9ydHNQcm9wcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3VwcG9ydHNTeW5jaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGdpdmVuIERPTUVycm9yIGludG8gYW4gYXBwcm9wcmlhdGUgQXBpRXJyb3IuXG4gICAqIEZ1bGwgbGlzdCBvZiB2YWx1ZXMgaGVyZTpcbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUVycm9yXG4gICAqL1xuICBwdWJsaWMgY29udmVydChlcnI6IERPTUVycm9yLCBwOiBzdHJpbmcsIGV4cGVjdGVkRGlyOiBib29sZWFuKTogQXBpRXJyb3Ige1xuICAgIHN3aXRjaCAoZXJyLm5hbWUpIHtcbiAgICAgIC8qIFRoZSB1c2VyIGFnZW50IGZhaWxlZCB0byBjcmVhdGUgYSBmaWxlIG9yIGRpcmVjdG9yeSBkdWUgdG8gdGhlIGV4aXN0ZW5jZSBvZiBhIGZpbGUgb3JcbiAgICAgICAgIGRpcmVjdG9yeSB3aXRoIHRoZSBzYW1lIHBhdGguICAqL1xuICAgICAgY2FzZSBcIlBhdGhFeGlzdHNFcnJvclwiOlxuICAgICAgICByZXR1cm4gQXBpRXJyb3IuRUVYSVNUKHApO1xuICAgICAgLyogVGhlIG9wZXJhdGlvbiBmYWlsZWQgYmVjYXVzZSBpdCB3b3VsZCBjYXVzZSB0aGUgYXBwbGljYXRpb24gdG8gZXhjZWVkIGl0cyBzdG9yYWdlIHF1b3RhLiAgKi9cbiAgICAgIGNhc2UgJ1F1b3RhRXhjZWVkZWRFcnJvcic6XG4gICAgICAgIHJldHVybiBBcGlFcnJvci5GaWxlRXJyb3IoRXJyb3JDb2RlLkVOT1NQQywgcCk7XG4gICAgICAvKiAgQSByZXF1aXJlZCBmaWxlIG9yIGRpcmVjdG9yeSBjb3VsZCBub3QgYmUgZm91bmQgYXQgdGhlIHRpbWUgYW4gb3BlcmF0aW9uIHdhcyBwcm9jZXNzZWQuICAgKi9cbiAgICAgIGNhc2UgJ05vdEZvdW5kRXJyb3InOlxuICAgICAgICByZXR1cm4gQXBpRXJyb3IuRU5PRU5UKHApO1xuICAgICAgLyogVGhpcyBpcyBhIHNlY3VyaXR5IGVycm9yIGNvZGUgdG8gYmUgdXNlZCBpbiBzaXR1YXRpb25zIG5vdCBjb3ZlcmVkIGJ5IGFueSBvdGhlciBlcnJvciBjb2Rlcy5cbiAgICAgICAgIC0gQSByZXF1aXJlZCBmaWxlIHdhcyB1bnNhZmUgZm9yIGFjY2VzcyB3aXRoaW4gYSBXZWIgYXBwbGljYXRpb25cbiAgICAgICAgIC0gVG9vIG1hbnkgY2FsbHMgYXJlIGJlaW5nIG1hZGUgb24gZmlsZXN5c3RlbSByZXNvdXJjZXMgKi9cbiAgICAgIGNhc2UgJ1NlY3VyaXR5RXJyb3InOlxuICAgICAgICByZXR1cm4gQXBpRXJyb3IuRmlsZUVycm9yKEVycm9yQ29kZS5FQUNDRVMsIHApO1xuICAgICAgLyogVGhlIG1vZGlmaWNhdGlvbiByZXF1ZXN0ZWQgd2FzIGlsbGVnYWwuIEV4YW1wbGVzIG9mIGludmFsaWQgbW9kaWZpY2F0aW9ucyBpbmNsdWRlIG1vdmluZyBhXG4gICAgICAgICBkaXJlY3RvcnkgaW50byBpdHMgb3duIGNoaWxkLCBtb3ZpbmcgYSBmaWxlIGludG8gaXRzIHBhcmVudCBkaXJlY3Rvcnkgd2l0aG91dCBjaGFuZ2luZyBpdHMgbmFtZSxcbiAgICAgICAgIG9yIGNvcHlpbmcgYSBkaXJlY3RvcnkgdG8gYSBwYXRoIG9jY3VwaWVkIGJ5IGEgZmlsZS4gICovXG4gICAgICBjYXNlICdJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3InOlxuICAgICAgICByZXR1cm4gQXBpRXJyb3IuRmlsZUVycm9yKEVycm9yQ29kZS5FUEVSTSwgcCk7XG4gICAgICAvKiBUaGUgdXNlciBoYXMgYXR0ZW1wdGVkIHRvIGxvb2sgdXAgYSBmaWxlIG9yIGRpcmVjdG9yeSwgYnV0IHRoZSBFbnRyeSBmb3VuZCBpcyBvZiB0aGUgd3JvbmcgdHlwZVxuICAgICAgICAgW2UuZy4gaXMgYSBEaXJlY3RvcnlFbnRyeSB3aGVuIHRoZSB1c2VyIHJlcXVlc3RlZCBhIEZpbGVFbnRyeV0uICAqL1xuICAgICAgY2FzZSAnVHlwZU1pc21hdGNoRXJyb3InOlxuICAgICAgICByZXR1cm4gQXBpRXJyb3IuRmlsZUVycm9yKGV4cGVjdGVkRGlyID8gRXJyb3JDb2RlLkVOT1RESVIgOiBFcnJvckNvZGUuRUlTRElSLCBwKTtcbiAgICAgIC8qIEEgcGF0aCBvciBVUkwgc3VwcGxpZWQgdG8gdGhlIEFQSSB3YXMgbWFsZm9ybWVkLiAgKi9cbiAgICAgIGNhc2UgXCJFbmNvZGluZ0Vycm9yXCI6XG4gICAgICAvKiBBbiBvcGVyYXRpb24gZGVwZW5kZWQgb24gc3RhdGUgY2FjaGVkIGluIGFuIGludGVyZmFjZSBvYmplY3QsIGJ1dCB0aGF0IHN0YXRlIHRoYXQgaGFzIGNoYW5nZWRcbiAgICAgICAgIHNpbmNlIGl0IHdhcyByZWFkIGZyb20gZGlzay4gICovXG4gICAgICBjYXNlIFwiSW52YWxpZFN0YXRlRXJyb3JcIjpcbiAgICAgIC8qIFRoZSB1c2VyIGF0dGVtcHRlZCB0byB3cml0ZSB0byBhIGZpbGUgb3IgZGlyZWN0b3J5IHdoaWNoIGNvdWxkIG5vdCBiZSBtb2RpZmllZCBkdWUgdG8gdGhlIHN0YXRlXG4gICAgICAgICBvZiB0aGUgdW5kZXJseWluZyBmaWxlc3lzdGVtLiAgKi9cbiAgICAgIGNhc2UgXCJOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvclwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIEFwaUVycm9yLkZpbGVFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTm9uc3RhbmRhcmRcbiAgICogUmVxdWVzdHMgYSBzdG9yYWdlIHF1b3RhIGZyb20gdGhlIGJyb3dzZXIgdG8gYmFjayB0aGlzIEZTLlxuICAgKi9cbiAgcHVibGljIGFsbG9jYXRlKGNiOiAoZT86IEFwaUVycm9yKSA9PiB2b2lkID0gZnVuY3Rpb24oKXt9KTogdm9pZCB7XG4gICAgdmFyIHN1Y2Nlc3MgPSAoZnM6IEZpbGVTeXN0ZW0pOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuZnMgPSBmcztcbiAgICAgIGNiKClcbiAgICB9O1xuICAgIHZhciBlcnJvciA9IChlcnI6IERPTUV4Y2VwdGlvbik6IHZvaWQgPT4ge1xuICAgICAgY2IodGhpcy5jb252ZXJ0KGVyciwgXCIvXCIsIHRydWUpKTtcbiAgICB9O1xuICAgIGlmICh0aGlzLnR5cGUgPT09IGdsb2JhbC5QRVJTSVNURU5UKSB7XG4gICAgICBfcmVxdWVzdFF1b3RhKHRoaXMudHlwZSwgdGhpcy5zaXplLCAoZ3JhbnRlZDogbnVtYmVyKSA9PiB7XG4gICAgICAgIF9nZXRGUyh0aGlzLnR5cGUsIGdyYW50ZWQsIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgIH0sIGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2dldEZTKHRoaXMudHlwZSwgdGhpcy5zaXplLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE5vbnN0YW5kYXJkXG4gICAqIERlbGV0ZXMgZXZlcnl0aGluZyBpbiB0aGUgRlMuIFVzZWQgZm9yIHRlc3RpbmcuXG4gICAqIEthcm1hIGNsZWFycyB0aGUgc3RvcmFnZSBhZnRlciB5b3UgcXVpdCBpdCBidXQgbm90IGJldHdlZW4gcnVucyBvZiB0aGUgdGVzdFxuICAgKiBzdWl0ZSwgYW5kIHRoZSB0ZXN0cyBleHBlY3QgYW4gZW1wdHkgRlMgZXZlcnkgdGltZS5cbiAgICovXG4gIHB1YmxpYyBlbXB0eShtYWluQ2I6IChlPzogQXBpRXJyb3IpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAvLyBHZXQgYSBsaXN0IG9mIGFsbCBlbnRyaWVzIGluIHRoZSByb290IGRpcmVjdG9yeSB0byBkZWxldGUgdGhlbVxuICAgIHRoaXMuX3JlYWRkaXIoJy8nLCAoZXJyOiBBcGlFcnJvciwgZW50cmllcz86IEVudHJ5W10pOiB2b2lkID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGVtcHR5IEZTJyk7XG4gICAgICAgIG1haW5DYihlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2FsbGVkIHdoZW4gZXZlcnkgZW50cnkgaGFzIGJlZW4gb3BlcmF0ZWQgb25cbiAgICAgICAgdmFyIGZpbmlzaGVkID0gKGVyOiBhbnkpOiB2b2lkID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGVtcHR5IEZTXCIpO1xuICAgICAgICAgICAgbWFpbkNiKGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1haW5DYigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmVtb3ZlcyBmaWxlcyBhbmQgcmVjdXJzaXZlbHkgcmVtb3ZlcyBkaXJlY3Rvcmllc1xuICAgICAgICB2YXIgZGVsZXRlRW50cnkgPSAoZW50cnk6IEVudHJ5LCBjYjogKGU/OiBhbnkpID0+IHZvaWQpOiB2b2lkID0+IHtcbiAgICAgICAgICB2YXIgc3VjYyA9ICgpID0+IHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgZXJyb3IgPSAoZXJyOiBET01FeGNlcHRpb24pID0+IHtcbiAgICAgICAgICAgIGNiKHRoaXMuY29udmVydChlcnIsIGVudHJ5LmZ1bGxQYXRoLCAhZW50cnkuaXNEaXJlY3RvcnkpKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpc0RpcmVjdG9yeUVudHJ5KGVudHJ5KSkge1xuICAgICAgICAgICAgZW50cnkucmVtb3ZlUmVjdXJzaXZlbHkoc3VjYywgZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnRyeS5yZW1vdmUoc3VjYywgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBlbnRyaWVzIGFuZCByZW1vdmUgdGhlbSwgdGhlbiBjYWxsIHRoZSBjYWxsYmFja1xuICAgICAgICAvLyB3aGVuIHRoZXkncmUgYWxsIGZpbmlzaGVkLlxuICAgICAgICBhc3luYy5lYWNoKGVudHJpZXMsIGRlbGV0ZUVudHJ5LCBmaW5pc2hlZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVuYW1lKG9sZFBhdGg6IHN0cmluZywgbmV3UGF0aDogc3RyaW5nLCBjYjogKGU/OiBBcGlFcnJvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHZhciBzZW1hcGhvcmU6IG51bWJlciA9IDIsXG4gICAgICBzdWNjZXNzQ291bnQ6IG51bWJlciA9IDAsXG4gICAgICByb290OiBEaXJlY3RvcnlFbnRyeSA9IHRoaXMuZnMucm9vdCxcbiAgICAgIGN1cnJlbnRQYXRoOiBzdHJpbmcgPSBvbGRQYXRoLFxuICAgICAgZXJyb3IgPSAoZXJyOiBET01FeGNlcHRpb24pOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKC0tc2VtYXBob3JlIDw9IDApIHtcbiAgICAgICAgICAgIGNiKHRoaXMuY29udmVydChlcnIsIGN1cnJlbnRQYXRoLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3VjY2VzcyA9IChmaWxlOiBFbnRyeSk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoKytzdWNjZXNzQ291bnQgPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gY2IobmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiU29tZXRoaW5nIHdhcyBpZGVudGlmaWVkIGFzIGJvdGggYSBmaWxlIGFuZCBhIGRpcmVjdG9yeS4gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLlwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTUEVDSUFMIENBU0U6IElmIG5ld1BhdGggPT09IG9sZFBhdGgsIGFuZCB0aGUgcGF0aCBleGlzdHMsIHRoZW5cbiAgICAgICAgLy8gdGhpcyBvcGVyYXRpb24gdHJpdmlhbGx5IHN1Y2NlZWRzLlxuICAgICAgICBpZiAob2xkUGF0aCA9PT0gbmV3UGF0aCkge1xuICAgICAgICAgIHJldHVybiBjYigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBuZXcgcGFyZW50IGRpcmVjdG9yeS5cbiAgICAgICAgY3VycmVudFBhdGggPSBwYXRoLmRpcm5hbWUobmV3UGF0aCk7XG4gICAgICAgIHJvb3QuZ2V0RGlyZWN0b3J5KGN1cnJlbnRQYXRoLCB7fSwgKHBhcmVudERpcjogRGlyZWN0b3J5RW50cnkpOiB2b2lkID0+IHtcbiAgICAgICAgICBjdXJyZW50UGF0aCA9IHBhdGguYmFzZW5hbWUobmV3UGF0aCk7XG4gICAgICAgICAgZmlsZS5tb3ZlVG8ocGFyZW50RGlyLCBjdXJyZW50UGF0aCwgKGVudHJ5OiBFbnRyeSk6IHZvaWQgPT4geyBjYigpOyB9LCAoZXJyOiBET01FeGNlcHRpb24pOiB2b2lkID0+IHtcbiAgICAgICAgICAgIC8vIFNQRUNJQUwgQ0FTRTogSWYgb2xkUGF0aCBpcyBhIGRpcmVjdG9yeSwgYW5kIG5ld1BhdGggaXMgYVxuICAgICAgICAgICAgLy8gZmlsZSwgcmVuYW1lIHNob3VsZCBkZWxldGUgdGhlIGZpbGUgYW5kIHBlcmZvcm0gdGhlIG1vdmUuXG4gICAgICAgICAgICBpZiAoZmlsZS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICBjdXJyZW50UGF0aCA9IG5ld1BhdGg7XG4gICAgICAgICAgICAgIC8vIFVubGluayBvbmx5IHdvcmtzIG9uIGZpbGVzLiBUcnkgdG8gZGVsZXRlIG5ld1BhdGguXG4gICAgICAgICAgICAgIHRoaXMudW5saW5rKG5ld1BhdGgsIChlPyk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBuZXdQYXRoIGlzIHByb2JhYmx5IGEgZGlyZWN0b3J5LlxuICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gUmVjdXIsIG5vdyB0aGF0IG5ld1BhdGggZG9lc24ndCBleGlzdC5cbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuYW1lKG9sZFBhdGgsIG5ld1BhdGgsIGNiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZXJyb3IpO1xuICAgICAgfTtcblxuICAgIC8vIFdlIGRvbid0IGtub3cgaWYgb2xkUGF0aCBpcyBhICpmaWxlKiBvciBhICpkaXJlY3RvcnkqLCBhbmQgdGhlcmUncyBub1xuICAgIC8vIHdheSB0byBzdGF0IGl0ZW1zLiBTbyBsYXVuY2ggYm90aCByZXF1ZXN0cywgc2VlIHdoaWNoIG9uZSBzdWNjZWVkcy5cbiAgICByb290LmdldEZpbGUob2xkUGF0aCwge30sIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICByb290LmdldERpcmVjdG9yeShvbGRQYXRoLCB7fSwgc3VjY2VzcywgZXJyb3IpO1xuICB9XG5cbiAgcHVibGljIHN0YXQocGF0aDogc3RyaW5nLCBpc0xzdGF0OiBib29sZWFuLCBjYjogKGVycjogQXBpRXJyb3IsIHN0YXQ/OiBTdGF0cykgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHRoZSBlbnRyeSBkb2Vzbid0IGV4aXN0LCBiZWNhdXNlIHRoZW4gdGhlcmUncyBub3RoaW5nXG4gICAgLy8gdG8gc3RhdC5cbiAgICB2YXIgb3B0cyA9IHtcbiAgICAgIGNyZWF0ZTogZmFsc2VcbiAgICB9O1xuICAgIC8vIENhbGxlZCB3aGVuIHRoZSBwYXRoIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBsb2FkZWQgYXMgYSBmaWxlLlxuICAgIHZhciBsb2FkQXNGaWxlID0gKGVudHJ5OiBGaWxlRW50cnkpOiB2b2lkID0+IHtcbiAgICAgIHZhciBmaWxlRnJvbUVudHJ5ID0gKGZpbGU6IEZpbGUpOiB2b2lkID0+IHtcbiAgICAgICAgdmFyIHN0YXQgPSBuZXcgU3RhdHMoRmlsZVR5cGUuRklMRSwgZmlsZS5zaXplKTtcbiAgICAgICAgY2IobnVsbCwgc3RhdCk7XG4gICAgICB9O1xuICAgICAgZW50cnkuZmlsZShmaWxlRnJvbUVudHJ5LCBmYWlsZWRUb0xvYWQpO1xuICAgIH07XG4gICAgLy8gQ2FsbGVkIHdoZW4gdGhlIHBhdGggaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGxvYWRlZCBhcyBhIGRpcmVjdG9yeS5cbiAgICB2YXIgbG9hZEFzRGlyID0gKGRpcjogRGlyZWN0b3J5RW50cnkpOiB2b2lkID0+IHtcbiAgICAgIC8vIERpcmVjdG9yeSBlbnRyeSBzaXplIGNhbid0IGJlIGRldGVybWluZWQgZnJvbSB0aGUgSFRNTDUgRlMgQVBJLCBhbmQgaXNcbiAgICAgIC8vIGltcGxlbWVudGF0aW9uLWRlcGVuZGFudCBhbnl3YXksIHNvIGEgZHVtbXkgdmFsdWUgaXMgdXNlZC5cbiAgICAgIHZhciBzaXplID0gNDA5NjtcbiAgICAgIHZhciBzdGF0ID0gbmV3IFN0YXRzKEZpbGVUeXBlLkRJUkVDVE9SWSwgc2l6ZSk7XG4gICAgICBjYihudWxsLCBzdGF0KTtcbiAgICB9O1xuICAgIC8vIENhbGxlZCB3aGVuIHRoZSBwYXRoIGNvdWxkbid0IGJlIG9wZW5lZCBhcyBhIGRpcmVjdG9yeSBvciBhIGZpbGUuXG4gICAgdmFyIGZhaWxlZFRvTG9hZCA9IChlcnI6IERPTUV4Y2VwdGlvbik6IHZvaWQgPT4ge1xuICAgICAgY2IodGhpcy5jb252ZXJ0KGVyciwgcGF0aCwgZmFsc2UgLyogVW5rbm93biAvIGlycmVsZXZhbnQgKi8pKTtcbiAgICB9O1xuICAgIC8vIENhbGxlZCB3aGVuIHRoZSBwYXRoIGNvdWxkbid0IGJlIG9wZW5lZCBhcyBhIGZpbGUsIGJ1dCBtaWdodCBzdGlsbCBiZSBhXG4gICAgLy8gZGlyZWN0b3J5LlxuICAgIHZhciBmYWlsZWRUb0xvYWRBc0ZpbGUgPSAoKTogdm9pZCA9PiB7XG4gICAgICB0aGlzLmZzLnJvb3QuZ2V0RGlyZWN0b3J5KHBhdGgsIG9wdHMsIGxvYWRBc0RpciwgZmFpbGVkVG9Mb2FkKTtcbiAgICB9O1xuICAgIC8vIE5vIG1ldGhvZCBjdXJyZW50bHkgZXhpc3RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcGF0aCByZWZlcnMgdG8gYVxuICAgIC8vIGRpcmVjdG9yeSBvciBhIGZpbGUsIHNvIHRoaXMgaW1wbGVtZW50YXRpb24gdHJpZXMgYm90aCBhbmQgdXNlcyB0aGUgZmlyc3RcbiAgICAvLyBvbmUgdGhhdCBzdWNjZWVkcy5cbiAgICB0aGlzLmZzLnJvb3QuZ2V0RmlsZShwYXRoLCBvcHRzLCBsb2FkQXNGaWxlLCBmYWlsZWRUb0xvYWRBc0ZpbGUpO1xuICB9XG5cbiAgcHVibGljIG9wZW4ocDogc3RyaW5nLCBmbGFnczogRmlsZUZsYWcsIG1vZGU6IG51bWJlciwgY2I6IChlcnI6IEFwaUVycm9yLCBmZD86IGZpbGUuRmlsZSkgPT4gYW55KTogdm9pZCB7XG4gICAgdmFyIGVycm9yID0gKGVycjogRE9NRXJyb3IpOiB2b2lkID0+IHtcbiAgICAgIGlmIChlcnIubmFtZSA9PT0gJ0ludmFsaWRNb2RpZmljYXRpb25FcnJvcicgJiYgZmxhZ3MuaXNFeGNsdXNpdmUoKSkge1xuICAgICAgICBjYihBcGlFcnJvci5FRVhJU1QocCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IodGhpcy5jb252ZXJ0KGVyciwgcCwgZmFsc2UpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5mcy5yb290LmdldEZpbGUocCwge1xuICAgICAgY3JlYXRlOiBmbGFncy5wYXRoTm90RXhpc3RzQWN0aW9uKCkgPT09IEFjdGlvblR5cGUuQ1JFQVRFX0ZJTEUsXG4gICAgICBleGNsdXNpdmU6IGZsYWdzLmlzRXhjbHVzaXZlKClcbiAgICB9LCAoZW50cnk6IEZpbGVFbnRyeSk6IHZvaWQgPT4ge1xuICAgICAgLy8gVHJ5IHRvIGZldGNoIGNvcnJlc3BvbmRpbmcgZmlsZS5cbiAgICAgIGVudHJ5LmZpbGUoKGZpbGU6IEZpbGUpOiB2b2lkID0+IHtcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoZXZlbnQ6IEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgICAgdmFyIGJmc19maWxlID0gdGhpcy5fbWFrZUZpbGUocCwgZmxhZ3MsIGZpbGUsIDxBcnJheUJ1ZmZlcj4gcmVhZGVyLnJlc3VsdCk7XG4gICAgICAgICAgY2IobnVsbCwgYmZzX2ZpbGUpO1xuICAgICAgICB9O1xuICAgICAgICByZWFkZXIub25lcnJvciA9IChldjogRXZlbnQpID0+IHtcbiAgICAgICAgICBlcnJvcihyZWFkZXIuZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgICB9LCBlcnJvcik7XG4gICAgfSwgZXJyb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBCcm93c2VyRlMgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdHlwZSBvZiBhIERyb3Bib3guanMgc3RhdCBvYmplY3RcbiAgICovXG4gIHByaXZhdGUgX3N0YXRUeXBlKHN0YXQ6IEVudHJ5KTogRmlsZVR5cGUge1xuICAgIHJldHVybiBzdGF0LmlzRmlsZSA/IEZpbGVUeXBlLkZJTEUgOiBGaWxlVHlwZS5ESVJFQ1RPUlk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEJyb3dzZXJGUyBvYmplY3QgcmVwcmVzZW50aW5nIGEgRmlsZSwgY3JlYXRlZCBmcm9tIHRoZSBkYXRhXG4gICAqIHJldHVybmVkIGJ5IGNhbGxzIHRvIHRoZSBEcm9wYm94IEFQSS5cbiAgICovXG4gIHByaXZhdGUgX21ha2VGaWxlKHBhdGg6IHN0cmluZywgZmxhZzogRmlsZUZsYWcsIHN0YXQ6IEZpbGUsIGRhdGE6IEFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDApKTogSFRNTDVGU0ZpbGUge1xuICAgIHZhciBzdGF0cyA9IG5ldyBTdGF0cyhGaWxlVHlwZS5GSUxFLCBzdGF0LnNpemUpO1xuICAgIHZhciBidWZmZXIgPSBhcnJheUJ1ZmZlcjJCdWZmZXIoZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBIVE1MNUZTRmlsZSh0aGlzLCBwYXRoLCBmbGFnLCBzdGF0cywgYnVmZmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSBmaWxlIG9yIGRpcmVjdG9yeSBmcm9tIHRoZSBmaWxlIHN5c3RlbVxuICAgKiBpc0ZpbGUgc2hvdWxkIHJlZmxlY3Qgd2hpY2ggY2FsbCB3YXMgbWFkZSB0byByZW1vdmUgdGhlIGl0IChgdW5saW5rYCBvclxuICAgKiBgcm1kaXJgKS4gSWYgdGhpcyBkb2Vzbid0IG1hdGNoIHdoYXQncyBhY3R1YWxseSBhdCBgcGF0aGAsIGFuIGVycm9yIHdpbGwgYmVcbiAgICogcmV0dXJuZWRcbiAgICovXG4gIHByaXZhdGUgX3JlbW92ZShwYXRoOiBzdHJpbmcsIGNiOiAoZT86IEFwaUVycm9yKSA9PiB2b2lkLCBpc0ZpbGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB2YXIgc3VjY2VzcyA9IChlbnRyeTogRW50cnkpOiB2b2lkID0+IHtcbiAgICAgIHZhciBzdWNjID0gKCkgPT4ge1xuICAgICAgICBjYigpO1xuICAgICAgfTtcbiAgICAgIHZhciBlcnIgPSAoZXJyOiBET01FeGNlcHRpb24pID0+IHtcbiAgICAgICAgY2IodGhpcy5jb252ZXJ0KGVyciwgcGF0aCwgIWlzRmlsZSkpO1xuICAgICAgfTtcbiAgICAgIGVudHJ5LnJlbW92ZShzdWNjLCBlcnIpO1xuICAgIH07XG4gICAgdmFyIGVycm9yID0gKGVycjogRE9NRXhjZXB0aW9uKTogdm9pZCA9PiB7XG4gICAgICBjYih0aGlzLmNvbnZlcnQoZXJyLCBwYXRoLCAhaXNGaWxlKSk7XG4gICAgfTtcbiAgICAvLyBEZWxldGluZyB0aGUgZW50cnksIHNvIGRvbid0IGNyZWF0ZSBpdFxuICAgIHZhciBvcHRzID0ge1xuICAgICAgY3JlYXRlOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAoaXNGaWxlKSB7XG4gICAgICB0aGlzLmZzLnJvb3QuZ2V0RmlsZShwYXRoLCBvcHRzLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZnMucm9vdC5nZXREaXJlY3RvcnkocGF0aCwgb3B0cywgc3VjY2VzcywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1bmxpbmsocGF0aDogc3RyaW5nLCBjYjogKGU/OiBBcGlFcnJvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX3JlbW92ZShwYXRoLCBjYiwgdHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgcm1kaXIocGF0aDogc3RyaW5nLCBjYjogKGU/OiBBcGlFcnJvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX3JlbW92ZShwYXRoLCBjYiwgZmFsc2UpO1xuICB9XG5cbiAgcHVibGljIG1rZGlyKHBhdGg6IHN0cmluZywgbW9kZTogbnVtYmVyLCBjYjogKGU/OiBBcGlFcnJvcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vIENyZWF0ZSB0aGUgZGlyZWN0b3J5LCBidXQgdGhyb3cgYW4gZXJyb3IgaWYgaXQgYWxyZWFkeSBleGlzdHMsIGFzIHBlclxuICAgIC8vIG1rZGlyKDEpXG4gICAgdmFyIG9wdHMgPSB7XG4gICAgICBjcmVhdGU6IHRydWUsXG4gICAgICBleGNsdXNpdmU6IHRydWVcbiAgICB9O1xuICAgIHZhciBzdWNjZXNzID0gKGRpcjogRGlyZWN0b3J5RW50cnkpOiB2b2lkID0+IHtcbiAgICAgIGNiKCk7XG4gICAgfTtcbiAgICB2YXIgZXJyb3IgPSAoZXJyOiBET01FeGNlcHRpb24pOiB2b2lkID0+IHtcbiAgICAgIGNiKHRoaXMuY29udmVydChlcnIsIHBhdGgsIHRydWUpKTtcbiAgICB9O1xuICAgIHRoaXMuZnMucm9vdC5nZXREaXJlY3RvcnkocGF0aCwgb3B0cywgc3VjY2VzcywgZXJyb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgYEZpbGVFbnRyeWBzLiBVc2VkIGludGVybmFsbHkgYnkgZW1wdHkgYW5kIHJlYWRkaXIuXG4gICAqL1xuICBwcml2YXRlIF9yZWFkZGlyKHBhdGg6IHN0cmluZywgY2I6IChlOiBBcGlFcnJvciwgZW50cmllcz86IEVudHJ5W10pID0+IHZvaWQpOiB2b2lkIHtcbiAgICB2YXIgZXJyb3IgPSAoZXJyOiBET01FeGNlcHRpb24pOiB2b2lkID0+IHtcbiAgICAgIGNiKHRoaXMuY29udmVydChlcnIsIHBhdGgsIHRydWUpKTtcbiAgICB9O1xuICAgIC8vIEdyYWIgdGhlIHJlcXVlc3RlZCBkaXJlY3RvcnkuXG4gICAgdGhpcy5mcy5yb290LmdldERpcmVjdG9yeShwYXRoLCB7IGNyZWF0ZTogZmFsc2UgfSwgKGRpckVudHJ5OiBEaXJlY3RvcnlFbnRyeSkgPT4ge1xuICAgICAgdmFyIHJlYWRlciA9IGRpckVudHJ5LmNyZWF0ZVJlYWRlcigpO1xuICAgICAgdmFyIGVudHJpZXM6IEVudHJ5W10gPSBbXTtcblxuICAgICAgLy8gQ2FsbCB0aGUgcmVhZGVyLnJlYWRFbnRyaWVzKCkgdW50aWwgbm8gbW9yZSByZXN1bHRzIGFyZSByZXR1cm5lZC5cbiAgICAgIHZhciByZWFkRW50cmllcyA9ICgpID0+IHtcbiAgICAgICAgcmVhZGVyLnJlYWRFbnRyaWVzKCgocmVzdWx0cykgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZW50cmllcyA9IGVudHJpZXMuY29uY2F0KF90b0FycmF5KHJlc3VsdHMpKTtcbiAgICAgICAgICAgIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNiKG51bGwsIGVudHJpZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIGVycm9yKTtcbiAgICAgIH07XG4gICAgICByZWFkRW50cmllcygpO1xuICAgIH0sIGVycm9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXAgX3JlYWRkaXIncyBsaXN0IG9mIGBGaWxlRW50cnlgcyB0byB0aGVpciBuYW1lcyBhbmQgcmV0dXJuIHRoYXQuXG4gICAqL1xuICBwdWJsaWMgcmVhZGRpcihwYXRoOiBzdHJpbmcsIGNiOiAoZXJyOiBBcGlFcnJvciwgZmlsZXM/OiBzdHJpbmdbXSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX3JlYWRkaXIocGF0aCwgKGU6IEFwaUVycm9yLCBlbnRyaWVzPzogRW50cnlbXSk6IHZvaWQgPT4ge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgcmV0dXJuIGNiKGUpO1xuICAgICAgfVxuICAgICAgdmFyIHJ2OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJ2LnB1c2goZW50cmllc1tpXS5uYW1lKTtcbiAgICAgIH1cbiAgICAgIGNiKG51bGwsIHJ2KTtcbiAgICB9KTtcbiAgfVxufVxuIl19