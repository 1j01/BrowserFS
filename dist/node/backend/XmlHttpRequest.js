var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var file_system = require('../core/file_system');
var api_error_1 = require('../core/api_error');
var file_flag_1 = require('../core/file_flag');
var util_1 = require('../core/util');
var preload_file = require('../generic/preload_file');
var xhr = require('../generic/xhr');
var file_index_1 = require('../generic/file_index');
var XmlHttpRequest = (function (_super) {
    __extends(XmlHttpRequest, _super);
    function XmlHttpRequest(listingUrl, prefixUrl) {
        if (prefixUrl === void 0) { prefixUrl = ''; }
        _super.call(this);
        if (listingUrl == null) {
            listingUrl = 'index.json';
        }
        if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {
            prefixUrl = prefixUrl + '/';
        }
        this.prefixUrl = prefixUrl;
        var listing = this._requestFileSync(listingUrl, 'json');
        if (listing == null) {
            throw new Error("Unable to find listing at URL: " + listingUrl);
        }
        this._index = file_index_1.FileIndex.fromListing(listing);
    }
    XmlHttpRequest.prototype.empty = function () {
        this._index.fileIterator(function (file) {
            file.file_data = null;
        });
    };
    XmlHttpRequest.prototype.getXhrPath = function (filePath) {
        if (filePath.charAt(0) === '/') {
            filePath = filePath.slice(1);
        }
        return this.prefixUrl + filePath;
    };
    XmlHttpRequest.prototype._requestFileSizeAsync = function (path, cb) {
        xhr.getFileSizeAsync(this.getXhrPath(path), cb);
    };
    XmlHttpRequest.prototype._requestFileSizeSync = function (path) {
        return xhr.getFileSizeSync(this.getXhrPath(path));
    };
    XmlHttpRequest.prototype._requestFileAsync = function (p, type, cb) {
        xhr.asyncDownloadFile(this.getXhrPath(p), type, cb);
    };
    XmlHttpRequest.prototype._requestFileSync = function (p, type) {
        return xhr.syncDownloadFile(this.getXhrPath(p), type);
    };
    XmlHttpRequest.prototype.getName = function () {
        return 'XmlHttpRequest';
    };
    XmlHttpRequest.isAvailable = function () {
        return typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null;
    };
    XmlHttpRequest.prototype.diskSpace = function (path, cb) {
        cb(0, 0);
    };
    XmlHttpRequest.prototype.isReadOnly = function () {
        return true;
    };
    XmlHttpRequest.prototype.supportsLinks = function () {
        return false;
    };
    XmlHttpRequest.prototype.supportsProps = function () {
        return false;
    };
    XmlHttpRequest.prototype.supportsSynch = function () {
        return true;
    };
    XmlHttpRequest.prototype.preloadFile = function (path, buffer) {
        var inode = this._index.getInode(path);
        if (file_index_1.isFileInode(inode)) {
            if (inode === null) {
                throw api_error_1.ApiError.ENOENT(path);
            }
            var stats = inode.getData();
            stats.size = buffer.length;
            stats.file_data = buffer;
        }
        else {
            throw api_error_1.ApiError.EISDIR(path);
        }
    };
    XmlHttpRequest.prototype.stat = function (path, isLstat, cb) {
        var inode = this._index.getInode(path);
        if (inode === null) {
            return cb(api_error_1.ApiError.ENOENT(path));
        }
        var stats;
        if (file_index_1.isFileInode(inode)) {
            stats = inode.getData();
            if (stats.size < 0) {
                this._requestFileSizeAsync(path, function (e, size) {
                    if (e) {
                        return cb(e);
                    }
                    stats.size = size;
                    cb(null, stats.clone());
                });
            }
            else {
                cb(null, stats.clone());
            }
        }
        else if (file_index_1.isDirInode(inode)) {
            stats = inode.getStats();
            cb(null, stats);
        }
        else {
            cb(api_error_1.ApiError.FileError(api_error_1.ErrorCode.EINVAL, path));
        }
    };
    XmlHttpRequest.prototype.statSync = function (path, isLstat) {
        var inode = this._index.getInode(path);
        if (inode === null) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        var stats;
        if (file_index_1.isFileInode(inode)) {
            stats = inode.getData();
            if (stats.size < 0) {
                stats.size = this._requestFileSizeSync(path);
            }
        }
        else if (file_index_1.isDirInode(inode)) {
            stats = inode.getStats();
        }
        else {
            throw api_error_1.ApiError.FileError(api_error_1.ErrorCode.EINVAL, path);
        }
        return stats;
    };
    XmlHttpRequest.prototype.open = function (path, flags, mode, cb) {
        if (flags.isWriteable()) {
            return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, path));
        }
        var _this = this;
        var inode = this._index.getInode(path);
        if (inode === null) {
            return cb(api_error_1.ApiError.ENOENT(path));
        }
        if (file_index_1.isFileInode(inode)) {
            var stats = inode.getData();
            switch (flags.pathExistsAction()) {
                case file_flag_1.ActionType.THROW_EXCEPTION:
                case file_flag_1.ActionType.TRUNCATE_FILE:
                    return cb(api_error_1.ApiError.EEXIST(path));
                case file_flag_1.ActionType.NOP:
                    if (stats.file_data != null) {
                        return cb(null, new preload_file.NoSyncFile(_this, path, flags, stats.clone(), stats.file_data));
                    }
                    this._requestFileAsync(path, 'buffer', function (err, buffer) {
                        if (err) {
                            return cb(err);
                        }
                        stats.size = buffer.length;
                        stats.file_data = buffer;
                        return cb(null, new preload_file.NoSyncFile(_this, path, flags, stats.clone(), buffer));
                    });
                    break;
                default:
                    return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileMode object.'));
            }
        }
        else {
            return cb(api_error_1.ApiError.EISDIR(path));
        }
    };
    XmlHttpRequest.prototype.openSync = function (path, flags, mode) {
        if (flags.isWriteable()) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, path);
        }
        var inode = this._index.getInode(path);
        if (inode === null) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        if (file_index_1.isFileInode(inode)) {
            var stats = inode.getData();
            switch (flags.pathExistsAction()) {
                case file_flag_1.ActionType.THROW_EXCEPTION:
                case file_flag_1.ActionType.TRUNCATE_FILE:
                    throw api_error_1.ApiError.EEXIST(path);
                case file_flag_1.ActionType.NOP:
                    if (stats.file_data != null) {
                        return new preload_file.NoSyncFile(this, path, flags, stats.clone(), stats.file_data);
                    }
                    var buffer = this._requestFileSync(path, 'buffer');
                    stats.size = buffer.length;
                    stats.file_data = buffer;
                    return new preload_file.NoSyncFile(this, path, flags, stats.clone(), buffer);
                default:
                    throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileMode object.');
            }
        }
        else {
            throw api_error_1.ApiError.EISDIR(path);
        }
    };
    XmlHttpRequest.prototype.readdir = function (path, cb) {
        try {
            cb(null, this.readdirSync(path));
        }
        catch (e) {
            cb(e);
        }
    };
    XmlHttpRequest.prototype.readdirSync = function (path) {
        var inode = this._index.getInode(path);
        if (inode === null) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        else if (file_index_1.isDirInode(inode)) {
            return inode.getListing();
        }
        else {
            throw api_error_1.ApiError.ENOTDIR(path);
        }
    };
    XmlHttpRequest.prototype.readFile = function (fname, encoding, flag, cb) {
        var oldCb = cb;
        this.open(fname, flag, 0x1a4, function (err, fd) {
            if (err) {
                return cb(err);
            }
            cb = function (err, arg) {
                fd.close(function (err2) {
                    if (err == null) {
                        err = err2;
                    }
                    return oldCb(err, arg);
                });
            };
            var fdCast = fd;
            var fdBuff = fdCast.getBuffer();
            if (encoding === null) {
                return cb(err, util_1.copyingSlice(fdBuff));
            }
            try {
                cb(null, fdBuff.toString(encoding));
            }
            catch (e) {
                cb(e);
            }
        });
    };
    XmlHttpRequest.prototype.readFileSync = function (fname, encoding, flag) {
        var fd = this.openSync(fname, flag, 0x1a4);
        try {
            var fdCast = fd;
            var fdBuff = fdCast.getBuffer();
            if (encoding === null) {
                return util_1.copyingSlice(fdBuff);
            }
            return fdBuff.toString(encoding);
        }
        finally {
            fd.closeSync();
        }
    };
    return XmlHttpRequest;
})(file_system.BaseFileSystem);
exports.__esModule = true;
exports["default"] = XmlHttpRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWG1sSHR0cFJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFja2VuZC9YbWxIdHRwUmVxdWVzdC50cyJdLCJuYW1lcyI6WyJYbWxIdHRwUmVxdWVzdCIsIlhtbEh0dHBSZXF1ZXN0LmNvbnN0cnVjdG9yIiwiWG1sSHR0cFJlcXVlc3QuZW1wdHkiLCJYbWxIdHRwUmVxdWVzdC5nZXRYaHJQYXRoIiwiWG1sSHR0cFJlcXVlc3QuX3JlcXVlc3RGaWxlU2l6ZUFzeW5jIiwiWG1sSHR0cFJlcXVlc3QuX3JlcXVlc3RGaWxlU2l6ZVN5bmMiLCJYbWxIdHRwUmVxdWVzdC5fcmVxdWVzdEZpbGVBc3luYyIsIlhtbEh0dHBSZXF1ZXN0Ll9yZXF1ZXN0RmlsZVN5bmMiLCJYbWxIdHRwUmVxdWVzdC5nZXROYW1lIiwiWG1sSHR0cFJlcXVlc3QuaXNBdmFpbGFibGUiLCJYbWxIdHRwUmVxdWVzdC5kaXNrU3BhY2UiLCJYbWxIdHRwUmVxdWVzdC5pc1JlYWRPbmx5IiwiWG1sSHR0cFJlcXVlc3Quc3VwcG9ydHNMaW5rcyIsIlhtbEh0dHBSZXF1ZXN0LnN1cHBvcnRzUHJvcHMiLCJYbWxIdHRwUmVxdWVzdC5zdXBwb3J0c1N5bmNoIiwiWG1sSHR0cFJlcXVlc3QucHJlbG9hZEZpbGUiLCJYbWxIdHRwUmVxdWVzdC5zdGF0IiwiWG1sSHR0cFJlcXVlc3Quc3RhdFN5bmMiLCJYbWxIdHRwUmVxdWVzdC5vcGVuIiwiWG1sSHR0cFJlcXVlc3Qub3BlblN5bmMiLCJYbWxIdHRwUmVxdWVzdC5yZWFkZGlyIiwiWG1sSHR0cFJlcXVlc3QucmVhZGRpclN5bmMiLCJYbWxIdHRwUmVxdWVzdC5yZWFkRmlsZSIsIlhtbEh0dHBSZXF1ZXN0LnJlYWRGaWxlU3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFPLFdBQVcsV0FBVyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3BELDBCQUFrQyxtQkFBbUIsQ0FBQyxDQUFBO0FBQ3RELDBCQUFtQyxtQkFB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akJBLENBQUNBO0lBQ0hBLENBQUNBO0lBQ0h2QixxQkFBQ0E7QUFBREEsQ0FBQ0EsQUEzVEQsRUFBNEMsV0FBVyxDQUFDLGNBQWMsRUEyVHJFO0FBM1REO21DQTJUQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpbGVfc3lzdGVtID0gcmVxdWlyZSgnLi4vY29yZS9maWxlX3N5c3RlbScpO1xuaW1wb3J0IHtBcGlFcnJvciwgRXJyb3JDb2RlfSBmcm9tICcuLi9jb3JlL2FwaV9lcnJvcic7XG5pbXBvcnQge0ZpbGVGbGFnLCBBY3Rpb25UeXBlfSBmcm9tICcuLi9jb3JlL2ZpbGVfZmxhZyc7XG5pbXBvcnQge2NvcHlpbmdTbGljZX0gZnJvbSAnLi4vY29yZS91dGlsJztcbmltcG9ydCBmaWxlID0gcmVxdWlyZSgnLi4vY29yZS9maWxlJyk7XG5pbXBvcnQgU3RhdHMgZnJvbSAnLi4vY29yZS9ub2RlX2ZzX3N0YXRzJztcbmltcG9ydCBwcmVsb2FkX2ZpbGUgPSByZXF1aXJlKCcuLi9nZW5lcmljL3ByZWxvYWRfZmlsZScpO1xuaW1wb3J0IHhociA9IHJlcXVpcmUoJy4uL2dlbmVyaWMveGhyJyk7XG5pbXBvcnQge0ZpbGVJbmRleCwgRGlySW5vZGUsIEZpbGVJbm9kZSwgSW5vZGUsIGlzRmlsZUlub2RlLCBpc0Rpcklub2RlfSBmcm9tICcuLi9nZW5lcmljL2ZpbGVfaW5kZXgnO1xuXG4vKipcbiAqIEEgc2ltcGxlIGZpbGVzeXN0ZW0gYmFja2VkIGJ5IFhtbEh0dHBSZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWG1sSHR0cFJlcXVlc3QgZXh0ZW5kcyBmaWxlX3N5c3RlbS5CYXNlRmlsZVN5c3RlbSBpbXBsZW1lbnRzIGZpbGVfc3lzdGVtLkZpbGVTeXN0ZW0ge1xuICBwcml2YXRlIF9pbmRleDogRmlsZUluZGV4PHt9PjtcbiAgcHVibGljIHByZWZpeFVybDogc3RyaW5nO1xuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgZmlsZSBzeXN0ZW0uXG4gICAqIEBwYXJhbSBsaXN0aW5nVXJsIFRoZSBwYXRoIHRvIHRoZSBKU09OIGZpbGUgaW5kZXggZ2VuZXJhdGVkIGJ5XG4gICAqICAgdG9vbHMvWEhSSW5kZXhlci5jb2ZmZWUuIFRoaXMgY2FuIGJlIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHdlYnBhZ2UgVVJMXG4gICAqICAgb3IgYWJzb2x1dGVseSBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSBwcmVmaXhVcmwgVGhlIHVybCBwcmVmaXggdG8gdXNlIGZvciBhbGwgd2ViLXNlcnZlciByZXF1ZXN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGxpc3RpbmdVcmw6IHN0cmluZywgcHJlZml4VXJsOiBzdHJpbmcgPSAnJykge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKGxpc3RpbmdVcmwgPT0gbnVsbCkge1xuICAgICAgbGlzdGluZ1VybCA9ICdpbmRleC5qc29uJztcbiAgICB9XG4gICAgLy8gcHJlZml4X3VybCBtdXN0IGVuZCBpbiBhIGRpcmVjdG9yeSBzZXBhcmF0b3IuXG4gICAgaWYgKHByZWZpeFVybC5sZW5ndGggPiAwICYmIHByZWZpeFVybC5jaGFyQXQocHJlZml4VXJsLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIHByZWZpeFVybCA9IHByZWZpeFVybCArICcvJztcbiAgICB9XG4gICAgdGhpcy5wcmVmaXhVcmwgPSBwcmVmaXhVcmw7XG4gICAgdmFyIGxpc3RpbmcgPSB0aGlzLl9yZXF1ZXN0RmlsZVN5bmMobGlzdGluZ1VybCwgJ2pzb24nKTtcbiAgICBpZiAobGlzdGluZyA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBsaXN0aW5nIGF0IFVSTDogXCIgKyBsaXN0aW5nVXJsKTtcbiAgICB9XG4gICAgdGhpcy5faW5kZXggPSBGaWxlSW5kZXguZnJvbUxpc3RpbmcobGlzdGluZyk7XG4gIH1cblxuICBwdWJsaWMgZW1wdHkoKTogdm9pZCB7XG4gICAgdGhpcy5faW5kZXguZmlsZUl0ZXJhdG9yKGZ1bmN0aW9uKGZpbGU6IFN0YXRzKSB7XG4gICAgICBmaWxlLmZpbGVfZGF0YSA9IG51bGw7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFhoclBhdGgoZmlsZVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGZpbGVQYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICBmaWxlUGF0aCA9IGZpbGVQYXRoLnNsaWNlKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcmVmaXhVcmwgKyBmaWxlUGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbmx5IHJlcXVlc3RzIHRoZSBIRUFEIGNvbnRlbnQsIGZvciB0aGUgZmlsZSBzaXplLlxuICAgKi9cbiAgcHVibGljIF9yZXF1ZXN0RmlsZVNpemVBc3luYyhwYXRoOiBzdHJpbmcsIGNiOiAoZXJyOiBBcGlFcnJvciwgc2l6ZT86IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHhoci5nZXRGaWxlU2l6ZUFzeW5jKHRoaXMuZ2V0WGhyUGF0aChwYXRoKSwgY2IpO1xuICB9XG4gIHB1YmxpYyBfcmVxdWVzdEZpbGVTaXplU3luYyhwYXRoOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiB4aHIuZ2V0RmlsZVNpemVTeW5jKHRoaXMuZ2V0WGhyUGF0aChwYXRoKSk7XG4gIH1cblxuICAvKipcbiAgICogQXN5bmNocm9ub3VzbHkgZG93bmxvYWQgdGhlIGdpdmVuIGZpbGUuXG4gICAqL1xuICBwcml2YXRlIF9yZXF1ZXN0RmlsZUFzeW5jKHA6IHN0cmluZywgdHlwZTogJ2J1ZmZlcicsIGNiOiAoZXJyOiBBcGlFcnJvciwgZGF0YT86IE5vZGVCdWZmZXIpID0+IHZvaWQpOiB2b2lkO1xuICBwcml2YXRlIF9yZXF1ZXN0RmlsZUFzeW5jKHA6IHN0cmluZywgdHlwZTogJ2pzb24nLCBjYjogKGVycjogQXBpRXJyb3IsIGRhdGE/OiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICBwcml2YXRlIF9yZXF1ZXN0RmlsZUFzeW5jKHA6IHN0cmluZywgdHlwZTogc3RyaW5nLCBjYjogKGVycjogQXBpRXJyb3IsIGRhdGE/OiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICBwcml2YXRlIF9yZXF1ZXN0RmlsZUFzeW5jKHA6IHN0cmluZywgdHlwZTogc3RyaW5nLCBjYjogKGVycjogQXBpRXJyb3IsIGRhdGE/OiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB4aHIuYXN5bmNEb3dubG9hZEZpbGUodGhpcy5nZXRYaHJQYXRoKHApLCB0eXBlLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogU3luY2hyb25vdXNseSBkb3dubG9hZCB0aGUgZ2l2ZW4gZmlsZS5cbiAgICovXG4gIHByaXZhdGUgX3JlcXVlc3RGaWxlU3luYyhwOiBzdHJpbmcsIHR5cGU6ICdidWZmZXInKTogTm9kZUJ1ZmZlcjtcbiAgcHJpdmF0ZSBfcmVxdWVzdEZpbGVTeW5jKHA6IHN0cmluZywgdHlwZTogJ2pzb24nKTogYW55O1xuICBwcml2YXRlIF9yZXF1ZXN0RmlsZVN5bmMocDogc3RyaW5nLCB0eXBlOiBzdHJpbmcpOiBhbnk7XG4gIHByaXZhdGUgX3JlcXVlc3RGaWxlU3luYyhwOiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHhoci5zeW5jRG93bmxvYWRGaWxlKHRoaXMuZ2V0WGhyUGF0aChwKSwgdHlwZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnWG1sSHR0cFJlcXVlc3QnO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICAvLyBAdG9kbyBPbGRlciBicm93c2VycyB1c2UgYSBkaWZmZXJlbnQgbmFtZSBmb3IgWEhSLCBpaXJjLlxuICAgIHJldHVybiB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgWE1MSHR0cFJlcXVlc3QgIT09IG51bGw7XG4gIH1cblxuICBwdWJsaWMgZGlza1NwYWNlKHBhdGg6IHN0cmluZywgY2I6ICh0b3RhbDogbnVtYmVyLCBmcmVlOiBudW1iZXIpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAvLyBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0uIFdlIGNvdWxkIGNhbGN1bGF0ZSB0aGUgdG90YWwgc3BhY2UsIGJ1dCB0aGF0J3Mgbm90XG4gICAgLy8gaW1wb3J0YW50IHJpZ2h0IG5vdy5cbiAgICBjYigwLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBpc1JlYWRPbmx5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHVibGljIHN1cHBvcnRzTGlua3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIHN1cHBvcnRzUHJvcHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIHN1cHBvcnRzU3luY2goKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lhbCBYSFIgZnVuY3Rpb246IFByZWxvYWQgdGhlIGdpdmVuIGZpbGUgaW50byB0aGUgaW5kZXguXG4gICAqIEBwYXJhbSBbU3RyaW5nXSBwYXRoXG4gICAqIEBwYXJhbSBbQnJvd3NlckZTLkJ1ZmZlcl0gYnVmZmVyXG4gICAqL1xuICBwdWJsaWMgcHJlbG9hZEZpbGUocGF0aDogc3RyaW5nLCBidWZmZXI6IE5vZGVCdWZmZXIpOiB2b2lkIHtcbiAgICB2YXIgaW5vZGUgPSB0aGlzLl9pbmRleC5nZXRJbm9kZShwYXRoKTtcbiAgICBpZiAoaXNGaWxlSW5vZGU8U3RhdHM+KGlub2RlKSkge1xuICAgICAgaWYgKGlub2RlID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IEFwaUVycm9yLkVOT0VOVChwYXRoKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGF0cyA9IGlub2RlLmdldERhdGEoKTtcbiAgICAgIHN0YXRzLnNpemUgPSBidWZmZXIubGVuZ3RoO1xuICAgICAgc3RhdHMuZmlsZV9kYXRhID0gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBBcGlFcnJvci5FSVNESVIocGF0aCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXQocGF0aDogc3RyaW5nLCBpc0xzdGF0OiBib29sZWFuLCBjYjogKGU6IEFwaUVycm9yLCBzdGF0PzogU3RhdHMpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB2YXIgaW5vZGUgPSB0aGlzLl9pbmRleC5nZXRJbm9kZShwYXRoKTtcbiAgICBpZiAoaW5vZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjYihBcGlFcnJvci5FTk9FTlQocGF0aCkpO1xuICAgIH1cbiAgICB2YXIgc3RhdHM6IFN0YXRzO1xuICAgIGlmIChpc0ZpbGVJbm9kZTxTdGF0cz4oaW5vZGUpKSB7XG4gICAgICBzdGF0cyA9IGlub2RlLmdldERhdGEoKTtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIGEgbm9uLW9wZW5lZCBmaWxlIHdpbGwgc3RpbGwgaGF2ZSBkZWZhdWx0IHN0YXRzIGZyb20gdGhlIGxpc3RpbmcuXG4gICAgICBpZiAoc3RhdHMuc2l6ZSA8IDApIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdEZpbGVTaXplQXN5bmMocGF0aCwgZnVuY3Rpb24oZTogQXBpRXJyb3IsIHNpemU/OiBudW1iZXIpIHtcbiAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNiKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0cy5zaXplID0gc2l6ZTtcbiAgICAgICAgICBjYihudWxsLCBzdGF0cy5jbG9uZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYihudWxsLCBzdGF0cy5jbG9uZSgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGlySW5vZGUoaW5vZGUpKSB7XG4gICAgICBzdGF0cyA9IGlub2RlLmdldFN0YXRzKCk7XG4gICAgICBjYihudWxsLCBzdGF0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKEFwaUVycm9yLkZpbGVFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBwYXRoKSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRTeW5jKHBhdGg6IHN0cmluZywgaXNMc3RhdDogYm9vbGVhbik6IFN0YXRzIHtcbiAgICB2YXIgaW5vZGUgPSB0aGlzLl9pbmRleC5nZXRJbm9kZShwYXRoKTtcbiAgICBpZiAoaW5vZGUgPT09IG51bGwpIHtcbiAgICAgIHRocm93IEFwaUVycm9yLkVOT0VOVChwYXRoKTtcbiAgICB9XG4gICAgdmFyIHN0YXRzOiBTdGF0cztcbiAgICBpZiAoaXNGaWxlSW5vZGU8U3RhdHM+KGlub2RlKSkge1xuICAgICAgc3RhdHMgPSBpbm9kZS5nZXREYXRhKCk7XG4gICAgICAvLyBBdCB0aGlzIHBvaW50LCBhIG5vbi1vcGVuZWQgZmlsZSB3aWxsIHN0aWxsIGhhdmUgZGVmYXVsdCBzdGF0cyBmcm9tIHRoZSBsaXN0aW5nLlxuICAgICAgaWYgKHN0YXRzLnNpemUgPCAwKSB7XG4gICAgICAgIHN0YXRzLnNpemUgPSB0aGlzLl9yZXF1ZXN0RmlsZVNpemVTeW5jKHBhdGgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEaXJJbm9kZShpbm9kZSkpIHtcbiAgICAgIHN0YXRzID0gaW5vZGUuZ2V0U3RhdHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQXBpRXJyb3IuRmlsZUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIHBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHM7XG4gIH1cblxuICBwdWJsaWMgb3BlbihwYXRoOiBzdHJpbmcsIGZsYWdzOiBGaWxlRmxhZywgbW9kZTogbnVtYmVyLCBjYjogKGU6IEFwaUVycm9yLCBmaWxlPzogZmlsZS5GaWxlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgLy8gSU5WQVJJQU5UOiBZb3UgY2FuJ3Qgd3JpdGUgdG8gZmlsZXMgb24gdGhpcyBmaWxlIHN5c3RlbS5cbiAgICBpZiAoZmxhZ3MuaXNXcml0ZWFibGUoKSkge1xuICAgICAgcmV0dXJuIGNiKG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRVBFUk0sIHBhdGgpKTtcbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvLyBDaGVjayBpZiB0aGUgcGF0aCBleGlzdHMsIGFuZCBpcyBhIGZpbGUuXG4gICAgdmFyIGlub2RlID0gdGhpcy5faW5kZXguZ2V0SW5vZGUocGF0aCk7XG4gICAgaWYgKGlub2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2IoQXBpRXJyb3IuRU5PRU5UKHBhdGgpKTtcbiAgICB9XG4gICAgaWYgKGlzRmlsZUlub2RlPFN0YXRzPihpbm9kZSkpIHtcbiAgICAgIHZhciBzdGF0cyA9IGlub2RlLmdldERhdGEoKTtcbiAgICAgIHN3aXRjaCAoZmxhZ3MucGF0aEV4aXN0c0FjdGlvbigpKSB7XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5USFJPV19FWENFUFRJT046XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5UUlVOQ0FURV9GSUxFOlxuICAgICAgICAgIHJldHVybiBjYihBcGlFcnJvci5FRVhJU1QocGF0aCkpO1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuTk9QOlxuICAgICAgICAgIC8vIFVzZSBleGlzdGluZyBmaWxlIGNvbnRlbnRzLlxuICAgICAgICAgIC8vIFhYWDogVWgsIHRoaXMgbWFpbnRhaW5zIHRoZSBwcmV2aW91c2x5LXVzZWQgZmxhZy5cbiAgICAgICAgICBpZiAoc3RhdHMuZmlsZV9kYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBuZXcgcHJlbG9hZF9maWxlLk5vU3luY0ZpbGUoX3RoaXMsIHBhdGgsIGZsYWdzLCBzdGF0cy5jbG9uZSgpLCBzdGF0cy5maWxlX2RhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQHRvZG8gYmUgbGF6aWVyIGFib3V0IGFjdHVhbGx5IHJlcXVlc3RpbmcgdGhlIGZpbGVcbiAgICAgICAgICB0aGlzLl9yZXF1ZXN0RmlsZUFzeW5jKHBhdGgsICdidWZmZXInLCBmdW5jdGlvbihlcnI6IEFwaUVycm9yLCBidWZmZXI/OiBOb2RlQnVmZmVyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaW5pdGlhbGx5IGhhdmUgZmlsZSBzaXplc1xuICAgICAgICAgICAgc3RhdHMuc2l6ZSA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICBzdGF0cy5maWxlX2RhdGEgPSBidWZmZXI7XG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgbmV3IHByZWxvYWRfZmlsZS5Ob1N5bmNGaWxlKF90aGlzLCBwYXRoLCBmbGFncywgc3RhdHMuY2xvbmUoKSwgYnVmZmVyKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGNiKG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlOVkFMLCAnSW52YWxpZCBGaWxlTW9kZSBvYmplY3QuJykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2IoQXBpRXJyb3IuRUlTRElSKHBhdGgpKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb3BlblN5bmMocGF0aDogc3RyaW5nLCBmbGFnczogRmlsZUZsYWcsIG1vZGU6IG51bWJlcik6IGZpbGUuRmlsZSB7XG4gICAgLy8gSU5WQVJJQU5UOiBZb3UgY2FuJ3Qgd3JpdGUgdG8gZmlsZXMgb24gdGhpcyBmaWxlIHN5c3RlbS5cbiAgICBpZiAoZmxhZ3MuaXNXcml0ZWFibGUoKSkge1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FUEVSTSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoZSBwYXRoIGV4aXN0cywgYW5kIGlzIGEgZmlsZS5cbiAgICB2YXIgaW5vZGUgPSB0aGlzLl9pbmRleC5nZXRJbm9kZShwYXRoKTtcbiAgICBpZiAoaW5vZGUgPT09IG51bGwpIHtcbiAgICAgIHRocm93IEFwaUVycm9yLkVOT0VOVChwYXRoKTtcbiAgICB9XG4gICAgaWYgKGlzRmlsZUlub2RlPFN0YXRzPihpbm9kZSkpIHtcbiAgICAgIHZhciBzdGF0cyA9IGlub2RlLmdldERhdGEoKTtcbiAgICAgIHN3aXRjaCAoZmxhZ3MucGF0aEV4aXN0c0FjdGlvbigpKSB7XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5USFJPV19FWENFUFRJT046XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5UUlVOQ0FURV9GSUxFOlxuICAgICAgICAgIHRocm93IEFwaUVycm9yLkVFWElTVChwYXRoKTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLk5PUDpcbiAgICAgICAgICAvLyBVc2UgZXhpc3RpbmcgZmlsZSBjb250ZW50cy5cbiAgICAgICAgICAvLyBYWFg6IFVoLCB0aGlzIG1haW50YWlucyB0aGUgcHJldmlvdXNseS11c2VkIGZsYWcuXG4gICAgICAgICAgaWYgKHN0YXRzLmZpbGVfZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHByZWxvYWRfZmlsZS5Ob1N5bmNGaWxlKHRoaXMsIHBhdGgsIGZsYWdzLCBzdGF0cy5jbG9uZSgpLCBzdGF0cy5maWxlX2RhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBAdG9kbyBiZSBsYXppZXIgYWJvdXQgYWN0dWFsbHkgcmVxdWVzdGluZyB0aGUgZmlsZVxuICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl9yZXF1ZXN0RmlsZVN5bmMocGF0aCwgJ2J1ZmZlcicpO1xuICAgICAgICAgIC8vIHdlIGRvbid0IGluaXRpYWxseSBoYXZlIGZpbGUgc2l6ZXNcbiAgICAgICAgICBzdGF0cy5zaXplID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICBzdGF0cy5maWxlX2RhdGEgPSBidWZmZXI7XG4gICAgICAgICAgcmV0dXJuIG5ldyBwcmVsb2FkX2ZpbGUuTm9TeW5jRmlsZSh0aGlzLCBwYXRoLCBmbGFncywgc3RhdHMuY2xvbmUoKSwgYnVmZmVyKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgJ0ludmFsaWQgRmlsZU1vZGUgb2JqZWN0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBBcGlFcnJvci5FSVNESVIocGF0aCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlYWRkaXIocGF0aDogc3RyaW5nLCBjYjogKGU6IEFwaUVycm9yLCBsaXN0aW5nPzogc3RyaW5nW10pID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgY2IobnVsbCwgdGhpcy5yZWFkZGlyU3luYyhwYXRoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2IoZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlYWRkaXJTeW5jKHBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAvLyBDaGVjayBpZiBpdCBleGlzdHMuXG4gICAgdmFyIGlub2RlID0gdGhpcy5faW5kZXguZ2V0SW5vZGUocGF0aCk7XG4gICAgaWYgKGlub2RlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBBcGlFcnJvci5FTk9FTlQocGF0aCk7XG4gICAgfSBlbHNlIGlmIChpc0Rpcklub2RlKGlub2RlKSkge1xuICAgICAgcmV0dXJuIGlub2RlLmdldExpc3RpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQXBpRXJyb3IuRU5PVERJUihwYXRoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2UgaGF2ZSB0aGUgZW50aXJlIGZpbGUgYXMgYSBidWZmZXI7IG9wdGltaXplIHJlYWRGaWxlLlxuICAgKi9cbiAgcHVibGljIHJlYWRGaWxlKGZuYW1lOiBzdHJpbmcsIGVuY29kaW5nOiBzdHJpbmcsIGZsYWc6IEZpbGVGbGFnLCBjYjogKGVycjogQXBpRXJyb3IsIGRhdGE/OiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAvLyBXcmFwIGNiIGluIGZpbGUgY2xvc2luZyBjb2RlLlxuICAgIHZhciBvbGRDYiA9IGNiO1xuICAgIC8vIEdldCBmaWxlLlxuICAgIHRoaXMub3BlbihmbmFtZSwgZmxhZywgMHgxYTQsIGZ1bmN0aW9uKGVycjogQXBpRXJyb3IsIGZkPzogZmlsZS5GaWxlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYihlcnIpO1xuICAgICAgfVxuICAgICAgY2IgPSBmdW5jdGlvbihlcnI6IEFwaUVycm9yLCBhcmc/OiBCdWZmZXIpIHtcbiAgICAgICAgZmQuY2xvc2UoZnVuY3Rpb24oZXJyMjogYW55KSB7XG4gICAgICAgICAgaWYgKGVyciA9PSBudWxsKSB7XG4gICAgICAgICAgICBlcnIgPSBlcnIyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2xkQ2IoZXJyLCBhcmcpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICB2YXIgZmRDYXN0ID0gPHByZWxvYWRfZmlsZS5Ob1N5bmNGaWxlPFhtbEh0dHBSZXF1ZXN0Pj4gZmQ7XG4gICAgICB2YXIgZmRCdWZmID0gPEJ1ZmZlcj4gZmRDYXN0LmdldEJ1ZmZlcigpO1xuICAgICAgaWYgKGVuY29kaW5nID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjYihlcnIsIGNvcHlpbmdTbGljZShmZEJ1ZmYpKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNiKG51bGwsIGZkQnVmZi50b1N0cmluZyhlbmNvZGluZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYihlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGVjaWFsbHktb3B0aW1pemVkIHJlYWRmaWxlLlxuICAgKi9cbiAgcHVibGljIHJlYWRGaWxlU3luYyhmbmFtZTogc3RyaW5nLCBlbmNvZGluZzogc3RyaW5nLCBmbGFnOiBGaWxlRmxhZyk6IGFueSB7XG4gICAgLy8gR2V0IGZpbGUuXG4gICAgdmFyIGZkID0gdGhpcy5vcGVuU3luYyhmbmFtZSwgZmxhZywgMHgxYTQpO1xuICAgIHRyeSB7XG4gICAgICB2YXIgZmRDYXN0ID0gPHByZWxvYWRfZmlsZS5Ob1N5bmNGaWxlPFhtbEh0dHBSZXF1ZXN0Pj4gZmQ7XG4gICAgICB2YXIgZmRCdWZmID0gPEJ1ZmZlcj4gZmRDYXN0LmdldEJ1ZmZlcigpO1xuICAgICAgaWYgKGVuY29kaW5nID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjb3B5aW5nU2xpY2UoZmRCdWZmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmZEJ1ZmYudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBmZC5jbG9zZVN5bmMoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==