var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var api_error_1 = require('../core/api_error');
var node_fs_stats_1 = require('../core/node_fs_stats');
var file_system = require('../core/file_system');
var file_flag_1 = require('../core/file_flag');
var preload_file = require('../generic/preload_file');
var util_1 = require('../core/util');
var extended_ascii_1 = require('bfs-buffer/js/extended_ascii');
var inflateRaw = require('pako/dist/pako_inflate.min').inflateRaw;
var file_index_1 = require('../generic/file_index');
(function (ExternalFileAttributeType) {
    ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
    ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
    ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
    ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
    ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
    ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
    ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
    ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
    ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
    ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
    ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
    ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
    ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
    ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
    ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
    ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
    ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
    ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
    ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
    ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
})(exports.ExternalFileAttributeType || (exports.ExternalFileAttributeType = {}));
var ExternalFileAttributeType = exports.ExternalFileAttributeType;
(function (CompressionMethod) {
    CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
    CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
    CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
    CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
    CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
    CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
    CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
    CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
    CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
    CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
    CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
    CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
    CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
    CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
    CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
    CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD";
})(exports.CompressionMethod || (exports.CompressionMethod = {}));
var CompressionMethod = exports.CompressionMethod;
function msdos2date(time, date) {
    var day = date & 0x1F;
    var month = ((date >> 5) & 0xF) - 1;
    var year = (date >> 9) + 1980;
    var second = time & 0x1F;
    var minute = (time >> 5) & 0x3F;
    var hour = time >> 11;
    return new Date(year, month, day, hour, minute, second);
}
function safeToString(buff, useUTF8, start, length) {
    if (length === 0) {
        return "";
    }
    else if (useUTF8) {
        return buff.toString('utf8', start, start + length);
    }
    else {
        return extended_ascii_1["default"].byte2str(buff.slice(start, start + length));
    }
}
var FileHeader = (function () {
    function FileHeader(data) {
        this.data = data;
        if (data.readUInt32LE(0) !== 0x04034b50) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
        }
    }
    FileHeader.prototype.versionNeeded = function () { return this.data.readUInt16LE(4); };
    FileHeader.prototype.flags = function () { return this.data.readUInt16LE(6); };
    FileHeader.prototype.compressionMethod = function () { return this.data.readUInt16LE(8); };
    FileHeader.prototype.lastModFileTime = function () {
        return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
    };
    FileHeader.prototype.rawLastModFileTime = function () {
        return this.data.readUInt32LE(10);
    };
    FileHeader.prototype.crc32 = function () { return this.data.readUInt32LE(14); };
    FileHeader.prototype.fileNameLength = function () { return this.data.readUInt16LE(26); };
    FileHeader.prototype.extraFieldLength = function () { return this.data.readUInt16LE(28); };
    FileHeader.prototype.fileName = function () {
        return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
    };
    FileHeader.prototype.extraField = function () {
        var start = 30 + this.fileNameLength();
        return this.data.slice(start, start + this.extraFieldLength());
    };
    FileHeader.prototype.totalSize = function () { return 30 + this.fileNameLength() + this.extraFieldLength(); };
    FileHeader.prototype.useUTF8 = function () { return (this.flags() & 0x800) === 0x800; };
    return FileHeader;
})();
exports.FileHeader = FileHeader;
var FileData = (function () {
    function FileData(header, record, data) {
        this.header = header;
        this.record = record;
        this.data = data;
    }
    FileData.prototype.decompress = function () {
        var compressionMethod = this.header.compressionMethod();
        switch (compressionMethod) {
            case CompressionMethod.DEFLATE:
                var data = inflateRaw(util_1.buffer2Arrayish(this.data.slice(0, this.record.compressedSize())), { chunkSize: this.record.uncompressedSize() });
                return util_1.arrayish2Buffer(data);
            case CompressionMethod.STORED:
                return util_1.copyingSlice(this.data, 0, this.record.uncompressedSize());
            default:
                var name = CompressionMethod[compressionMethod];
                name = name ? name : "Unknown: " + compressionMethod;
                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid compression method on file '" + this.header.fileName() + "': " + name);
        }
    };
    FileData.prototype.getHeader = function () {
        return this.header;
    };
    FileData.prototype.getRecord = function () {
        return this.record;
    };
    FileData.prototype.getRawData = function () {
        return this.data;
    };
    return FileData;
})();
exports.FileData = FileData;
var DataDescriptor = (function () {
    function DataDescriptor(data) {
        this.data = data;
    }
    DataDescriptor.prototype.crc32 = function () { return this.data.readUInt32LE(0); };
    DataDescriptor.prototype.compressedSize = function () { return this.data.readUInt32LE(4); };
    DataDescriptor.prototype.uncompressedSize = function () { return this.data.readUInt32LE(8); };
    return DataDescriptor;
})();
exports.DataDescriptor = DataDescriptor;
var ArchiveExtraDataRecord = (function () {
    function ArchiveExtraDataRecord(data) {
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x08064b50) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
        }
    }
    ArchiveExtraDataRecord.prototype.length = function () { return this.data.readUInt32LE(4); };
    ArchiveExtraDataRecord.prototype.extraFieldData = function () { return this.data.slice(8, 8 + this.length()); };
    return ArchiveExtraDataRecord;
})();
exports.ArchiveExtraDataRecord = ArchiveExtraDataRecord;
var DigitalSignature = (function () {
    function DigitalSignature(data) {
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x05054b50) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
        }
    }
    DigitalSignature.prototype.size = function () { return this.data.readUInt16LE(4); };
    DigitalSignature.prototype.signatureData = function () { return this.data.slice(6, 6 + this.size()); };
    return DigitalSignature;
})();
exports.DigitalSignature = DigitalSignature;
var CentralDirectory = (function () {
    function CentralDirectory(zipData, data) {
        this.zipData = zipData;
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x02014b50)
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid Zip file: Central directory record has invalid signature: " + this.data.readUInt32LE(0));
        this._filename = this.produceFilename();
    }
    CentralDirectory.prototype.versionMadeBy = function () { return this.data.readUInt16LE(4); };
    CentralDirectory.prototype.versionNeeded = function () { return this.data.readUInt16LE(6); };
    CentralDirectory.prototype.flag = function () { return this.data.readUInt16LE(8); };
    CentralDirectory.prototype.compressionMethod = function () { return this.data.readUInt16LE(10); };
    CentralDirectory.prototype.lastModFileTime = function () {
        return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
    };
    CentralDirectory.prototype.rawLastModFileTime = function () {
        return this.data.readUInt32LE(12);
    };
    CentralDirectory.prototype.crc32 = function () { return this.data.readUInt32LE(16); };
    CentralDirectory.prototype.compressedSize = function () { return this.data.readUInt32LE(20); };
    CentralDirectory.prototype.uncompressedSize = function () { return this.data.readUInt32LE(24); };
    CentralDirectory.prototype.fileNameLength = function () { return this.data.readUInt16LE(28); };
    CentralDirectory.prototype.extraFieldLength = function () { return this.data.readUInt16LE(30); };
    CentralDirectory.prototype.fileCommentLength = function () { return this.data.readUInt16LE(32); };
    CentralDirectory.prototype.diskNumberStart = function () { return this.data.readUInt16LE(34); };
    CentralDirectory.prototype.internalAttributes = function () { return this.data.readUInt16LE(36); };
    CentralDirectory.prototype.externalAttributes = function () { return this.data.readUInt32LE(38); };
    CentralDirectory.prototype.headerRelativeOffset = function () { return this.data.readUInt32LE(42); };
    CentralDirectory.prototype.produceFilename = function () {
        var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
        return fileName.replace(/\\/g, "/");
    };
    CentralDirectory.prototype.fileName = function () {
        return this._filename;
    };
    CentralDirectory.prototype.rawFileName = function () {
        return this.data.slice(46, 46 + this.fileNameLength());
    };
    CentralDirectory.prototype.extraField = function () {
        var start = 44 + this.fileNameLength();
        return this.data.slice(start, start + this.extraFieldLength());
    };
    CentralDirectory.prototype.fileComment = function () {
        var start = 46 + this.fileNameLength() + this.extraFieldLength();
        return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
    };
    CentralDirectory.prototype.rawFileComment = function () {
        var start = 46 + this.fileNameLength() + this.extraFieldLength();
        return this.data.slice(start, start + this.fileCommentLength());
    };
    CentralDirectory.prototype.totalSize = function () {
        return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
    };
    CentralDirectory.prototype.isDirectory = function () {
        var fileName = this.fileName();
        return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');
    };
    CentralDirectory.prototype.isFile = function () { return !this.isDirectory(); };
    CentralDirectory.prototype.useUTF8 = function () { return (this.flag() & 0x800) === 0x800; };
    CentralDirectory.prototype.isEncrypted = function () { return (this.flag() & 0x1) === 0x1; };
    CentralDirectory.prototype.getFileData = function () {
        var start = this.headerRelativeOffset();
        var header = new FileHeader(this.zipData.slice(start));
        return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
    };
    CentralDirectory.prototype.getData = function () {
        return this.getFileData().decompress();
    };
    CentralDirectory.prototype.getRawData = function () {
        return this.getFileData().getRawData();
    };
    CentralDirectory.prototype.getStats = function () {
        return new node_fs_stats_1.default(node_fs_stats_1.FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
    };
    return CentralDirectory;
})();
exports.CentralDirectory = CentralDirectory;
var EndOfCentralDirectory = (function () {
    function EndOfCentralDirectory(data) {
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x06054b50)
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid Zip file: End of central directory record has invalid signature: " + this.data.readUInt32LE(0));
    }
    EndOfCentralDirectory.prototype.diskNumber = function () { return this.data.readUInt16LE(4); };
    EndOfCentralDirectory.prototype.cdDiskNumber = function () { return this.data.readUInt16LE(6); };
    EndOfCentralDirectory.prototype.cdDiskEntryCount = function () { return this.data.readUInt16LE(8); };
    EndOfCentralDirectory.prototype.cdTotalEntryCount = function () { return this.data.readUInt16LE(10); };
    EndOfCentralDirectory.prototype.cdSize = function () { return this.data.readUInt32LE(12); };
    EndOfCentralDirectory.prototype.cdOffset = function () { return this.data.readUInt32LE(16); };
    EndOfCentralDirectory.prototype.cdZipCommentLength = function () { return this.data.readUInt16LE(20); };
    EndOfCentralDirectory.prototype.cdZipComment = function () {
        return safeToString(this.data, true, 22, this.cdZipCommentLength());
    };
    EndOfCentralDirectory.prototype.rawCdZipComment = function () {
        return this.data.slice(22, 22 + this.cdZipCommentLength());
    };
    return EndOfCentralDirectory;
})();
exports.EndOfCentralDirectory = EndOfCentralDirectory;
var ZipFS = (function (_super) {
    __extends(ZipFS, _super);
    function ZipFS(data, name) {
        if (name === void 0) { name = ''; }
        _super.call(this);
        this.data = data;
        this.name = name;
        this._index = new file_index_1.FileIndex();
        this._directoryEntries = [];
        this._eocd = null;
        this.populateIndex();
    }
    ZipFS.prototype.getName = function () {
        return 'ZipFS' + (this.name !== '' ? ' ' + this.name : '');
    };
    ZipFS.prototype.getCentralDirectoryEntry = function (path) {
        var inode = this._index.getInode(path);
        if (inode === null) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        if (file_index_1.isFileInode(inode)) {
            return inode.getData();
        }
        else if (file_index_1.isDirInode(inode)) {
            return inode.getData();
        }
    };
    ZipFS.prototype.getCentralDirectoryEntryAt = function (index) {
        var dirEntry = this._directoryEntries[index];
        if (!dirEntry) {
            throw new RangeError("Invalid directory index: " + index + ".");
        }
        return dirEntry;
    };
    ZipFS.prototype.getNumberOfCentralDirectoryEntries = function () {
        return this._directoryEntries.length;
    };
    ZipFS.prototype.getEndOfCentralDirectory = function () {
        return this._eocd;
    };
    ZipFS.isAvailable = function () { return true; };
    ZipFS.prototype.diskSpace = function (path, cb) {
        cb(this.data.length, 0);
    };
    ZipFS.prototype.isReadOnly = function () {
        return true;
    };
    ZipFS.prototype.supportsLinks = function () {
        return false;
    };
    ZipFS.prototype.supportsProps = function () {
        return false;
    };
    ZipFS.prototype.supportsSynch = function () {
        return true;
    };
    ZipFS.prototype.statSync = function (path, isLstat) {
        var inode = this._index.getInode(path);
        if (inode === null) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        var stats;
        if (file_index_1.isFileInode(inode)) {
            stats = inode.getData().getStats();
        }
        else if (file_index_1.isDirInode(inode)) {
            stats = inode.getStats();
        }
        else {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid inode.");
        }
        return stats;
    };
    ZipFS.prototype.openSync = function (path, flags, mode) {
        if (flags.isWriteable()) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, path);
        }
        var inode = this._index.getInode(path);
        if (!inode) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        else if (file_index_1.isFileInode(inode)) {
            var cdRecord = inode.getData();
            var stats = cdRecord.getStats();
            switch (flags.pathExistsAction()) {
                case file_flag_1.ActionType.THROW_EXCEPTION:
                case file_flag_1.ActionType.TRUNCATE_FILE:
                    throw api_error_1.ApiError.EEXIST(path);
                case file_flag_1.ActionType.NOP:
                    return new preload_file.NoSyncFile(this, path, flags, stats, cdRecord.getData());
                default:
                    throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileMode object.');
            }
            return null;
        }
        else {
            throw api_error_1.ApiError.EISDIR(path);
        }
    };
    ZipFS.prototype.readdirSync = function (path) {
        var inode = this._index.getInode(path);
        if (!inode) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        else if (file_index_1.isDirInode(inode)) {
            return inode.getListing();
        }
        else {
            throw api_error_1.ApiError.ENOTDIR(path);
        }
    };
    ZipFS.prototype.readFileSync = function (fname, encoding, flag) {
        var fd = this.openSync(fname, flag, 0x1a4);
        try {
            var fdCast = fd;
            var fdBuff = fdCast.getBuffer();
            if (encoding === null) {
                return util_1.copyingSlice(fdBuff);
            }
            return fdBuff.toString(encoding);
        }
        finally {
            fd.closeSync();
        }
    };
    ZipFS.prototype.getEOCD = function () {
        var startOffset = 22;
        var endOffset = Math.min(startOffset + 0xFFFF, this.data.length - 1);
        for (var i = startOffset; i < endOffset; i++) {
            if (this.data.readUInt32LE(this.data.length - i) === 0x06054b50) {
                return new EndOfCentralDirectory(this.data.slice(this.data.length - i));
            }
        }
        throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
    };
    ZipFS.prototype.populateIndex = function () {
        var eocd = this._eocd = this.getEOCD();
        if (eocd.diskNumber() !== eocd.cdDiskNumber())
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
        var cdPtr = eocd.cdOffset();
        if (cdPtr === 0xFFFFFFFF)
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "ZipFS does not support Zip64.");
        var cdEnd = cdPtr + eocd.cdSize();
        while (cdPtr < cdEnd) {
            var cd = new CentralDirectory(this.data, this.data.slice(cdPtr));
            cdPtr += cd.totalSize();
            var filename = cd.fileName();
            if (filename.charAt(0) === '/')
                throw new Error("WHY IS THIS ABSOLUTE");
            if (filename.charAt(filename.length - 1) === '/') {
                filename = filename.substr(0, filename.length - 1);
            }
            if (cd.isDirectory()) {
                this._index.addPath('/' + filename, new file_index_1.DirInode(cd));
            }
            else {
                this._index.addPath('/' + filename, new file_index_1.FileInode(cd));
            }
            this._directoryEntries.push(cd);
        }
    };
    return ZipFS;
})(file_system.SynchronousFileSystem);
exports.__esModule = true;
exports["default"] = ZipFS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWmlwRlMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFja2VuZC9aaXBGUy50cyJdLCJuYW1lcyI6WyJFeHRlcm5hbEZpbGVBdHRyaWJ1dGVUeXBlIiwiQ29tcHJlc3Npb25NZXRob2QiLCJtc2RvczJkYXRlIiwic2FmZVRvU3RyaW5nIiwiRmlsZUhlYWRlciIsIkZpbGVIZWFkZXIuY29uc3RydWN0b3IiLCJGaWxlSGVhZGVyLnZlcnNpb25OZWVkZWQiLCJGaWxlSGVhZGVyLmZsYWdzIiwiRmlsZUhlYWRlci5jb21wcmVzc2lvbk1ldGhvZCIsIkZpbGVIZWFkZXIubGFzdE1vZEZpbGVUaW1lIiwiRmlsZUhlYWRlci5yYXdMYXN0TW9kRmlsZVRpbWUiLCJGaWxlSGVhZGVyLmNyYzMyIiwiRmlsZUhlYWRlci5maWxlTmFtZUxlbmd0aCIsIkZpbGVIZWFkZXIuZXh0cmFGaWVsZExlbmd0aCIsIkZpbGVIZWFkZXIuZmlsZU5hbWUiLCJGaWxlSGVhZGVyLmV4dHJhRmllbGQiLCJGaWxlSGVhZGVyLnRvdGFsU2l6ZSIsIkZpbGVIZWFkZXIudXNlVVRGOCIsIkZpbGVEYXRhIiwiRmlsZURhdGEuY29uc3RydWN0b3IiLCJGaWxlRGF0YS5kZWNvbXByZXNzIiwiRmlsZURhdGEuZ2V0SGVhZGVyIiwiRmlsZURhdGEuZ2V0UmVjb3JkIiwiRmlsZURhdGEuZ2V0UmF3RGF0YSIsIkRhdGFEZXNjcmlwdG9yIiwiRGF0YURlc2NyaXB0b3IuY29uc3RydWN0b3IiLCJEYXRhRGVzY3JpcHRvci5jcmMzMiIsIkRhdGFEZXNjcmlwdG9yLmNvbXByZXNzZWRTaXplIiwiRGF0YURlc2NyaXB0b3IudW5jb21wcmVzc2VkU2l6ZSIsIkFyY2hpdmVFeHRyYURhdGFSZWNvcmQiLCJBcmNoaXZlRXh0cmFEYXRhUmVjb3JkLmNvbnN0cnVjdG9yIiwiQXJjaGl2ZUV4dHJhRGF0YVJlY29yZC5sZW5ndGgiLCJBcmNoaXZlRXh0cmFEYXRhUmVjb3JkLmV4dHJhRmllbGREYXRhIiwiRGlnaXRhbFNpZ25hdHVyZSIsIkRpZ2l0YWxTaWduYXR1cmUuY29uc3RydWN0b3IiLCJEaWdpdGFsU2lnbmF0dXJlLnNpemUiLCJEaWdpdGFsU2lnbmF0dXJlLnNpZ25hdHVyZURhdGEiLCJDZW50cmFsRGlyZWN0b3J5IiwiQ2VudHJhbERpcmVjdG9yeS5jb25zdHJ1Y3RvciIsIkNlbnRyYWxEaXJlY3RvcnkudmVyc2lvbk1hZGVCeSIsIkNlbnRyYWxEaXJlY3RvcnkudmVyc2lvbk5lZWRlZCIsIkNlbnRyYWxEaXJlY3RvcnkuZmxhZyIsIkNlbnRyYWxEaXJlY3RvcnkuY29tcHJlc3Npb25NZXRob2QiLCJDZW50cmFsRGlyZWN0b3J5Lmxhc3RNb2RGaWxlVGltZSIsIkNlbnRyYWxEaXJlY3RvcnkucmF3TGFzdE1vZEZpbGVUaW1lIiwiQ2VudHJhbERpcmVjdG9yeS5jcmMzMiIsIkNlbnRyYWxEaXJlY3RvcnkuY29tcHJlc3NlZFNpemUiLCJDZW50cmFsRGlyZWN0b3J5LnVuY29tcHJlc3NlZFNpemUiLCJDZW50cmFsRGlyZWN0b3J5LmZpbGVOYW1lTGVuZ3RoIiwiQ2VudHJhbERpcmVjdG9yeS5leHRyYUZpZWxkTGVuZ3RoIiwiQ2VudHJhbERpcmVjdG9yeS5maWxlQ29tbWVudExlbmd0aCIsIkNlbnRyYWxEaXJlY3RvcnkuZGlza051bWJlclN0YXJ0IiwiQ2VudHJhbERpcmVjdG9yeS5pbnRlcm5hbEF0dHJpYnV0ZXMiLCJDZW50cmFsRGlyZWN0b3J5LmV4dGVybmFsQXR0cmlidXRlcyIsIkNlbnRyYWxEaXJlY3RvcnkuaGVhZGVyUmVsYXRpdmVPZmZzZXQiLCJDZW50cmFsRGlyZWN0b3J5LnByb2R1Y2VGaWxlbmFtZSIsIkNlbnRyYWxEaXJlY3RvcnkuZmlsZU5hbWUiLCJDZW50cmFsRGlyZWN0b3J5LnJhd0ZpbGVOYW1lIiwiQ2VudHJhbERpcmVjdG9yeS5leHRyYUZpZWxkIiwiQ2VudHJhbERpcmVjdG9yeS5maWxlQ29tbWVudCIsIkNlbnRyYWxEaXJlY3RvcnkucmF3RmlsZUNvbW1lbnQiLCJDZW50cmFsRGlyZWN0b3J5LnRvdGFsU2l6ZSIsIkNlbnRyYWxEaXJlY3RvcnkuaXNEaXJlY3RvcnkiLCJDZW50cmFsRGlyZWN0b3J5LmlzRmlsZSIsIkNlbnRyYWxEaXJlY3RvcnkudXNlVVRGOCIsIkNlbnRyYWxEaXJlY3RvcnkuaXNFbmNyeXB0ZWQiLCJDZW50cmFsRGlyZWN0b3J5LmdldEZpbGVEYXRhIiwiQ2VudHJhbERpcmVjdG9yeS5nZXREYXRhIiwiQ2VudHJhbERpcmVjdG9yeS5nZXRSYXdEYXRhIiwiQ2VudHJhbERpcmVjdG9yeS5nZXRTdGF0cyIsIkVuZE9mQ2VudHJhbERpcmVjdG9yeSIsIkVuZE9mQ2VudHJhbERpcmVjdG9yeS5jb25zdHJ1Y3RvciIsIkVuZE9mQ2VudHJhbERpcmVjdG9yeS5kaXNrTnVtYmVyIiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNkRGlza051bWJlciIsIkVuZE9mQ2VudHJhbERpcmVjdG9yeS5jZERpc2tFbnRyeUNvdW50IiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNkVG90YWxFbnRyeUNvdW50IiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNkU2l6ZSIsIkVuZE9mQ2VudHJhbERpcmVjdG9yeS5jZE9mZnNldCIsIkVuZE9mQ2VudHJhbERpcmVjdG9yeS5jZFppcENvbW1lbnRMZW5ndGgiLCJFbmRPZkNlbnRyYWxEaXJlY3RvcnkuY2RaaXBDb21tZW50IiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LnJhd0NkWmlwQ29tbWVudCIsIlppcEZTIiwiWmlwRlMuY29uc3RydWN0b3IiLCJaaXBGUy5nZXROYW1lIiwiWmlwRlMuZ2V0Q2VudHJhbERpcmVjdG9yeUVudHJ5IiwiWmlwRlMuZ2V0Q2VudHJhbERpcmVjdG9yeUVudHJ5QXQiLCJaaXBGUy5nZXROdW1iZXJPZkNlbnRyYWxEaXJlY3RvcnlFbnRyaWVzIiwiWmlwRlMuZ2V0RW5kT2ZDZW50cmFsRGlyZWN0b3J5IiwiWmlwRlMuaXNBdmFpbGFibGUiLCJaaXBGUy5kaXNrU3BhY2UiLCJaaXBGUy5pc1JlYWRPbmx5IiwiWmlwRlMuc3VwcG9ydHNMaW5rcyIsIlppcEZTLnN1cHBvcnRzUHJvcHMiLCJaaXBGUy5zdXBwb3J0c1N5bmNoIiwiWmlwRlMuc3RhdFN5bmMiLCJaaXBGUy5vcGVuU3luYyIsIlppcEZTLnJlYWRkaXJTeW5jIiwiWmlwRlMucmVhZEZpbGVTeW5jIiwiWmlwRlMuZ2V0RU9DRCIsIlppcEZTLnBvcHVsYXRlSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7O0FBK0NBLDBCQUFrQyxtQkFBbUIsQ0FBQyxDQUFBO0FBQ3RELDhCQUF5Qyx1QkFBdUIsQ0FBQyxDQUFBO0FBQ2pFLElBQU8sV0FBVyxXQUFXLHFCQUFxQixDQUFDLENBQUM7QUFFcEQsMEJBQW1DLG1CQUFtQixDQUFDLENBQUE7QUFDdkQsSUFBTyxZQUFZLFdBQVcseUJBQXlCLENBQUMsQ0FBQztBQUN6RCxxQkFBdUUsY0FBYyxDQUFDLENBQUE7QUFDdEYsK0JBQTBCLDhCQUE4QixDQUFDLENBQUE7QUFDekQsSUFBSSxVQUFVLEdBSVYsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3JELDJCQUFzRSx1QkFBdUIsQ0FBQyxDQUFBO0FBTTlGLFdBQVkseUJBQXlCO0lBQ25DQSwyRUFBU0EsQ0FBQUE7SUFBRUEsMkVBQVNBLENBQUFBO0lBQUVBLCtFQUFXQSxDQUFBQTtJQUFFQSx5RUFBUUEsQ0FBQUE7SUFBRUEsNkVBQVVBLENBQUFBO0lBQUVBLGlGQUFZQSxDQUFBQTtJQUNyRUEsaUZBQVlBLENBQUFBO0lBQUVBLHVFQUFPQSxDQUFBQTtJQUFFQSxpRkFBWUEsQ0FBQUE7SUFBRUEseUVBQVFBLENBQUFBO0lBQUVBLDBFQUFTQSxDQUFBQTtJQUFFQSx3RUFBUUEsQ0FBQUE7SUFBRUEsd0VBQVFBLENBQUFBO0lBQzVFQSxzRkFBZUEsQ0FBQUE7SUFBRUEsMEVBQVNBLENBQUFBO0lBQUVBLGdGQUFZQSxDQUFBQTtJQUFFQSwwRUFBU0EsQ0FBQUE7SUFBRUEsOEVBQVdBLENBQUFBO0lBQUVBLDhFQUFXQSxDQUFB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QUVBLElBQUlBLHNCQUFTQSxDQUFtQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0VBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDbENBLENBQUNBO0lBQ0hBLENBQUNBO0lBQ0hsQixZQUFDQTtBQUFEQSxDQUFDQSxBQXJNRCxFQUFtQyxXQUFXLENBQUMscUJBQXFCLEVBcU1uRTtBQXJNRDswQkFxTUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWmlwIGZpbGUtYmFja2VkIGZpbGVzeXN0ZW1cbiAqIEltcGxlbWVudGVkIGFjY29yZGluZyB0byB0aGUgc3RhbmRhcmQ6XG4gKiBodHRwOi8vd3d3LnBrd2FyZS5jb20vZG9jdW1lbnRzL2Nhc2VzdHVkaWVzL0FQUE5PVEUuVFhUXG4gKlxuICogV2hpbGUgdGhlcmUgYXJlIGEgZmV3IHppcCBsaWJyYXJpZXMgZm9yIEphdmFTY3JpcHQgKGUuZy4gSlNaaXAgYW5kIHppcC5qcyksXG4gKiB0aGV5IGFyZSBub3QgYSBnb29kIG1hdGNoIGZvciBCcm93c2VyRlMuIEluIHBhcnRpY3VsYXIsIHRoZXNlIGxpYnJhcmllc1xuICogcGVyZm9ybSBhIGxvdCBvZiB1bm5lZWRlZCBkYXRhIGNvcHlpbmcsIGFuZCBlYWdlcmx5IGRlY29tcHJlc3MgZXZlcnkgZmlsZVxuICogaW4gdGhlIHppcCBmaWxlIHVwb24gbG9hZGluZyB0byBjaGVjayB0aGUgQ1JDMzIuIFRoZXkgYWxzbyBlYWdlcmx5IGRlY29kZVxuICogc3RyaW5ncy4gRnVydGhlcm1vcmUsIHRoZXNlIGxpYnJhcmllcyBkdXBsaWNhdGUgZnVuY3Rpb25hbGl0eSBhbHJlYWR5IHByZXNlbnRcbiAqIGluIEJyb3dzZXJGUyAoZS5nLiBVVEYtOCBkZWNvZGluZyBhbmQgYmluYXJ5IGRhdGEgbWFuaXB1bGF0aW9uKS5cbiAqXG4gKiBUaGlzIGZpbGVzeXN0ZW0gdGFrZXMgYWR2YW50YWdlIG9mIEJyb3dzZXJGUydzIEJ1ZmZlciBpbXBsZW1lbnRhdGlvbiwgd2hpY2hcbiAqIGVmZmljaWVudGx5IHJlcHJlc2VudHMgdGhlIHppcCBmaWxlIGluIG1lbW9yeSAoaW4gYm90aCBBcnJheUJ1ZmZlci1lbmFibGVkXG4gKiBicm93c2VycyAqYW5kKiBub24tQXJyYXlCdWZmZXIgYnJvd3NlcnMpLCBhbmQgd2hpY2ggY2FuIG5lYXRseSBiZSAnc2xpY2VkJ1xuICogd2l0aG91dCBjb3B5aW5nIGRhdGEuIEVhY2ggc3RydWN0IGRlZmluZWQgaW4gdGhlIHN0YW5kYXJkIGlzIHJlcHJlc2VudGVkIHdpdGhcbiAqIGEgYnVmZmVyIHNsaWNlIHBvaW50aW5nIHRvIGFuIG9mZnNldCBpbiB0aGUgemlwIGZpbGUsIGFuZCBoYXMgZ2V0dGVycyBmb3JcbiAqIGVhY2ggZmllbGQuIEFzIHdlIGFudGljaXBhdGUgdGhhdCB0aGlzIGRhdGEgd2lsbCBub3QgYmUgcmVhZCBvZnRlbiwgd2UgY2hvb3NlXG4gKiBub3QgdG8gc3RvcmUgZWFjaCBzdHJ1Y3QgZmllbGQgaW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0OyBpbnN0ZWFkLCB0byByZWR1Y2VcbiAqIG1lbW9yeSBjb25zdW1wdGlvbiwgd2UgcmV0cmlldmUgaXQgZGlyZWN0bHkgZnJvbSB0aGUgYmluYXJ5IGRhdGEgZWFjaCB0aW1lIGl0XG4gKiBpcyByZXF1ZXN0ZWQuXG4gKlxuICogV2hlbiB0aGUgZmlsZXN5c3RlbSBpcyBpbnN0YW50aWF0ZWQsIHdlIGRldGVybWluZSB0aGUgZGlyZWN0b3J5IHN0cnVjdHVyZVxuICogb2YgdGhlIHppcCBmaWxlIGFzIHF1aWNrbHkgYXMgcG9zc2libGUuIFdlIGxhemlseSBkZWNvbXByZXNzIGFuZCBjaGVjayB0aGVcbiAqIENSQzMyIG9mIGZpbGVzLiBXZSBkbyBub3QgY2FjaGUgZGVjb21wcmVzc2VkIGZpbGVzOyBpZiB0aGlzIGlzIGEgZGVzaXJlZFxuICogZmVhdHVyZSwgaXQgaXMgYmVzdCBpbXBsZW1lbnRlZCBhcyBhIGdlbmVyaWMgZmlsZSBzeXN0ZW0gd3JhcHBlciB0aGF0IGNhblxuICogY2FjaGUgZGF0YSBmcm9tIGFyYml0cmFyeSBmaWxlIHN5c3RlbXMuXG4gKlxuICogRm9yIGluZmxhdGlvbiwgd2UgdXNlIGBwYWpvYCdzIGltcGxlbWVudGF0aW9uOlxuICogaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvXG4gKlxuICogVW5mb3J0dW5hdGVseSwgdGhlaXIgaW1wbGVtZW50YXRpb24gZmFsbHMgYmFjayB0byBhbiBhcnJheSBvZiBieXRlcyBmb3Igbm9uLVxuICogVHlwZWRBcnJheSBicm93c2Vycywgd2hpY2ggaXMgcmVzdWx0cyBpbiBhIG11Y2ggbGFyZ2VyIG1lbW9yeSBmb290cHJpbnQgaW5cbiAqIHRob3NlIGJyb3dzZXJzLiBQZXJoYXBzIG9uZSBkYXkgd2UnbGwgaGF2ZSBhbiBpbXBsZW1lbnRhdGlvbiBvZiBpbmZsYXRlIHRoYXRcbiAqIHdvcmtzIG9uIEJ1ZmZlcnM/IDopXG4gKlxuICogQ3VycmVudCBsaW1pdGF0aW9uczpcbiAqICogTm8gZW5jcnlwdGlvbi5cbiAqICogTm8gWklQNjQgc3VwcG9ydC5cbiAqICogUmVhZC1vbmx5LlxuICogICBXcml0ZSBzdXBwb3J0IHdvdWxkIHJlcXVpcmUgdGhhdCB3ZTpcbiAqICAgLSBLZWVwIHRyYWNrIG9mIGNoYW5nZWQvbmV3IGZpbGVzLlxuICogICAtIENvbXByZXNzIGNoYW5nZWQgZmlsZXMsIGFuZCBnZW5lcmF0ZSBhcHByb3ByaWF0ZSBtZXRhZGF0YSBmb3IgZWFjaC5cbiAqICAgLSBVcGRhdGUgZmlsZSBvZmZzZXRzIGZvciBvdGhlciBmaWxlcyBpbiB0aGUgemlwIGZpbGUuXG4gKiAgIC0gU3RyZWFtIGl0IG91dCB0byBhIGxvY2F0aW9uLlxuICogICBUaGlzIGlzbid0IHRoYXQgYmFkLCBzbyB3ZSBtaWdodCBkbyB0aGlzIGF0IGEgbGF0ZXIgZGF0ZS5cbiAqL1xuaW1wb3J0IHtBcGlFcnJvciwgRXJyb3JDb2RlfSBmcm9tICcuLi9jb3JlL2FwaV9lcnJvcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgU3RhdHMsIEZpbGVUeXBlfSBmcm9tICcuLi9jb3JlL25vZGVfZnNfc3RhdHMnO1xuaW1wb3J0IGZpbGVfc3lzdGVtID0gcmVxdWlyZSgnLi4vY29yZS9maWxlX3N5c3RlbScpO1xuaW1wb3J0IGZpbGUgPSByZXF1aXJlKCcuLi9jb3JlL2ZpbGUnKTtcbmltcG9ydCB7RmlsZUZsYWcsIEFjdGlvblR5cGV9IGZyb20gJy4uL2NvcmUvZmlsZV9mbGFnJztcbmltcG9ydCBwcmVsb2FkX2ZpbGUgPSByZXF1aXJlKCcuLi9nZW5lcmljL3ByZWxvYWRfZmlsZScpO1xuaW1wb3J0IHtBcnJheWlzaCwgYnVmZmVyMkFycmF5aXNoLCBhcnJheWlzaDJCdWZmZXIsIGNvcHlpbmdTbGljZX0gZnJvbSAnLi4vY29yZS91dGlsJztcbmltcG9ydCBFeHRlbmRlZEFTQ0lJIGZyb20gJ2Jmcy1idWZmZXIvanMvZXh0ZW5kZWRfYXNjaWknO1xudmFyIGluZmxhdGVSYXc6IHtcbiAgKGRhdGE6IEFycmF5aXNoPG51bWJlcj4sIG9wdGlvbnM/OiB7XG4gICAgY2h1bmtTaXplOiBudW1iZXI7XG4gIH0pOiBBcnJheWlzaDxudW1iZXI+O1xufSA9IHJlcXVpcmUoJ3Bha28vZGlzdC9wYWtvX2luZmxhdGUubWluJykuaW5mbGF0ZVJhdztcbmltcG9ydCB7RmlsZUluZGV4LCBEaXJJbm9kZSwgRmlsZUlub2RlLCBpc0Rpcklub2RlLCBpc0ZpbGVJbm9kZX0gZnJvbSAnLi4vZ2VuZXJpYy9maWxlX2luZGV4JztcblxuXG4vKipcbiAqIDQuNC4yLjI6IEluZGljYXRlcyB0aGUgY29tcGF0aWJpbHRpeSBvZiBhIGZpbGUncyBleHRlcm5hbCBhdHRyaWJ1dGVzLlxuICovXG5leHBvcnQgZW51bSBFeHRlcm5hbEZpbGVBdHRyaWJ1dGVUeXBlIHtcbiAgTVNET1MgPSAwLCBBTUlHQSA9IDEsIE9QRU5WTVMgPSAyLCBVTklYID0gMywgVk1fQ01TID0gNCwgQVRBUklfU1QgPSA1LFxuICBPUzJfSFBGUyA9IDYsIE1BQyA9IDcsIFpfU1lTVEVNID0gOCwgQ1BfTSA9IDksIE5URlMgPSAxMCwgTVZTID0gMTEsIFZTRSA9IDEyLFxuICBBQ09STl9SSVNDID0gMTMsIFZGQVQgPSAxNCwgQUxUX01WUyA9IDE1LCBCRU9TID0gMTYsIFRBTkRFTSA9IDE3LCBPU180MDAgPSAxOCxcbiAgT1NYID0gMTlcbn1cblxuLyoqXG4gKiA0LjQuNVxuICovXG5leHBvcnQgZW51bSBDb21wcmVzc2lvbk1ldGhvZCB7XG4gIFNUT1JFRCA9IDAsICAgICAvLyBUaGUgZmlsZSBpcyBzdG9yZWQgKG5vIGNvbXByZXNzaW9uKVxuICBTSFJVTksgPSAxLCAgICAgLy8gVGhlIGZpbGUgaXMgU2hydW5rXG4gIFJFRFVDRURfMSA9IDIsICAvLyBUaGUgZmlsZSBpcyBSZWR1Y2VkIHdpdGggY29tcHJlc3Npb24gZmFjdG9yIDFcbiAgUkVEVUNFRF8yID0gMywgIC8vIFRoZSBmaWxlIGlzIFJlZHVjZWQgd2l0aCBjb21wcmVzc2lvbiBmYWN0b3IgMlxuICBSRURVQ0VEXzMgPSA0LCAgLy8gVGhlIGZpbGUgaXMgUmVkdWNlZCB3aXRoIGNvbXByZXNzaW9uIGZhY3RvciAzXG4gIFJFRFVDRURfNCA9IDUsICAvLyBUaGUgZmlsZSBpcyBSZWR1Y2VkIHdpdGggY29tcHJlc3Npb24gZmFjdG9yIDRcbiAgSU1QTE9ERSA9IDYsICAgIC8vIFRoZSBmaWxlIGlzIEltcGxvZGVkXG4gIERFRkxBVEUgPSA4LCAgICAvLyBUaGUgZmlsZSBpcyBEZWZsYXRlZFxuICBERUZMQVRFNjQgPSA5LCAgLy8gRW5oYW5jZWQgRGVmbGF0aW5nIHVzaW5nIERlZmxhdGU2NCh0bSlcbiAgVEVSU0VfT0xEID0gMTAsIC8vIFBLV0FSRSBEYXRhIENvbXByZXNzaW9uIExpYnJhcnkgSW1wbG9kaW5nIChvbGQgSUJNIFRFUlNFKVxuICBCWklQMiA9IDEyLCAgICAgLy8gRmlsZSBpcyBjb21wcmVzc2VkIHVzaW5nIEJaSVAyIGFsZ29yaXRobVxuICBMWk1BID0gMTQsICAgICAgLy8gTFpNQSAoRUZTKVxuICBURVJTRV9ORVcgPSAxOCwgLy8gRmlsZSBpcyBjb21wcmVzc2VkIHVzaW5nIElCTSBURVJTRSAobmV3KVxuICBMWjc3ID0gMTksICAgICAgLy8gSUJNIExaNzcgeiBBcmNoaXRlY3R1cmUgKFBGUylcbiAgV0FWUEFDSyA9IDk3LCAgIC8vIFdhdlBhY2sgY29tcHJlc3NlZCBkYXRhXG4gIFBQTUQgPSA5OCAgICAgICAvLyBQUE1kIHZlcnNpb24gSSwgUmV2IDFcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgaW5wdXQgdGltZSBhbmQgZGF0ZSBpbiBNUy1ET1MgZm9ybWF0IGludG8gYSBKYXZhU2NyaXB0IERhdGVcbiAqIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gbXNkb3MyZGF0ZSh0aW1lOiBudW1iZXIsIGRhdGU6IG51bWJlcik6IERhdGUge1xuICAvLyBNUy1ET1MgRGF0ZVxuICAvL3wwIDAgMCAwICAwfDAgMCAwICAwfDAgMCAwICAwIDAgMCAwXG4gIC8vICBEICgxLTMxKSAgTSAoMS0yMykgIFkgKGZyb20gMTk4MClcbiAgdmFyIGRheSA9IGRhdGUgJiAweDFGO1xuICAvLyBKUyBkYXRlIGlzIDAtaW5kZXhlZCwgRE9TIGlzIDEtaW5kZXhlZC5cbiAgdmFyIG1vbnRoID0gKChkYXRlID4+IDUpICYgMHhGKSAtIDE7XG4gIHZhciB5ZWFyID0gKGRhdGUgPj4gOSkgKyAxOTgwO1xuICAvLyBNUyBET1MgVGltZVxuICAvL3wwIDAgMCAwICAwfDAgMCAwICAwIDAgMHwwICAwIDAgMCAwXG4gIC8vICAgU2Vjb25kICAgICAgTWludXRlICAgICAgIEhvdXJcbiAgdmFyIHNlY29uZCA9IHRpbWUgJiAweDFGO1xuICB2YXIgbWludXRlID0gKHRpbWUgPj4gNSkgJiAweDNGO1xuICB2YXIgaG91ciA9IHRpbWUgPj4gMTE7XG4gIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCk7XG59XG5cbi8qKlxuICogU2FmZWx5IHJldHVybnMgdGhlIHN0cmluZyBmcm9tIHRoZSBidWZmZXIsIGV2ZW4gaWYgaXQgaXMgMCBieXRlcyBsb25nLlxuICogKE5vcm1hbGx5LCBjYWxsaW5nIHRvU3RyaW5nKCkgb24gYSBidWZmZXIgd2l0aCBzdGFydCA9PT0gZW5kIGNhdXNlcyBhblxuICogZXhjZXB0aW9uKS5cbiAqL1xuZnVuY3Rpb24gc2FmZVRvU3RyaW5nKGJ1ZmY6IE5vZGVCdWZmZXIsIHVzZVVURjg6IGJvb2xlYW4sIHN0YXJ0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9IGVsc2UgaWYgKHVzZVVURjgpIHtcbiAgICByZXR1cm4gYnVmZi50b1N0cmluZygndXRmOCcsIHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEV4dGVuZGVkQVNDSUkuYnl0ZTJzdHIoYnVmZi5zbGljZShzdGFydCwgc3RhcnQgKyBsZW5ndGgpKTtcbiAgfVxufVxuXG4vKlxuICAgNC4zLjYgT3ZlcmFsbCAuWklQIGZpbGUgZm9ybWF0OlxuXG4gICAgICBbbG9jYWwgZmlsZSBoZWFkZXIgMV1cbiAgICAgIFtlbmNyeXB0aW9uIGhlYWRlciAxXVxuICAgICAgW2ZpbGUgZGF0YSAxXVxuICAgICAgW2RhdGEgZGVzY3JpcHRvciAxXVxuICAgICAgLlxuICAgICAgLlxuICAgICAgLlxuICAgICAgW2xvY2FsIGZpbGUgaGVhZGVyIG5dXG4gICAgICBbZW5jcnlwdGlvbiBoZWFkZXIgbl1cbiAgICAgIFtmaWxlIGRhdGEgbl1cbiAgICAgIFtkYXRhIGRlc2NyaXB0b3Igbl1cbiAgICAgIFthcmNoaXZlIGRlY3J5cHRpb24gaGVhZGVyXVxuICAgICAgW2FyY2hpdmUgZXh0cmEgZGF0YSByZWNvcmRdXG4gICAgICBbY2VudHJhbCBkaXJlY3RvcnkgaGVhZGVyIDFdXG4gICAgICAuXG4gICAgICAuXG4gICAgICAuXG4gICAgICBbY2VudHJhbCBkaXJlY3RvcnkgaGVhZGVyIG5dXG4gICAgICBbemlwNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IHJlY29yZF1cbiAgICAgIFt6aXA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvcl1cbiAgICAgIFtlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgcmVjb3JkXVxuKi9cblxuLypcbiA0LjMuNyAgTG9jYWwgZmlsZSBoZWFkZXI6XG5cbiAgICAgIGxvY2FsIGZpbGUgaGVhZGVyIHNpZ25hdHVyZSAgICAgNCBieXRlcyAgKDB4MDQwMzRiNTApXG4gICAgICB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0ICAgICAgIDIgYnl0ZXNcbiAgICAgIGdlbmVyYWwgcHVycG9zZSBiaXQgZmxhZyAgICAgICAgMiBieXRlc1xuICAgICAgY29tcHJlc3Npb24gbWV0aG9kICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgICBsYXN0IG1vZCBmaWxlIHRpbWUgICAgICAgICAgICAgIDIgYnl0ZXNcbiAgICAgIGxhc3QgbW9kIGZpbGUgZGF0ZSAgICAgICAgICAgICAgMiBieXRlc1xuICAgICAgY3JjLTMyICAgICAgICAgICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgICBjb21wcmVzc2VkIHNpemUgICAgICAgICAgICAgICAgIDQgYnl0ZXNcbiAgICAgIHVuY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgNCBieXRlc1xuICAgICAgZmlsZSBuYW1lIGxlbmd0aCAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgICBleHRyYSBmaWVsZCBsZW5ndGggICAgICAgICAgICAgIDIgYnl0ZXNcblxuICAgICAgZmlsZSBuYW1lICh2YXJpYWJsZSBzaXplKVxuICAgICAgZXh0cmEgZmllbGQgKHZhcmlhYmxlIHNpemUpXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlSGVhZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRhOiBOb2RlQnVmZmVyKSB7XG4gICAgaWYgKGRhdGEucmVhZFVJbnQzMkxFKDApICE9PSAweDA0MDM0YjUwKSB7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIFppcCBmaWxlOiBMb2NhbCBmaWxlIGhlYWRlciBoYXMgaW52YWxpZCBzaWduYXR1cmU6IFwiICsgdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB2ZXJzaW9uTmVlZGVkKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDQpOyB9XG4gIHB1YmxpYyBmbGFncygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg2KTsgfVxuICBwdWJsaWMgY29tcHJlc3Npb25NZXRob2QoKTogQ29tcHJlc3Npb25NZXRob2QgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg4KTsgfVxuICBwdWJsaWMgbGFzdE1vZEZpbGVUaW1lKCk6IERhdGUge1xuICAgIC8vIFRpbWUgYW5kIGRhdGUgaXMgaW4gTVMtRE9TIGZvcm1hdC5cbiAgICByZXR1cm4gbXNkb3MyZGF0ZSh0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDEwKSwgdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgxMikpO1xuICB9XG4gIHB1YmxpYyByYXdMYXN0TW9kRmlsZVRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgxMCk7XG4gIH1cbiAgcHVibGljIGNyYzMyKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDE0KTsgfVxuICAvKipcbiAgICogVGhlc2UgdHdvIHZhbHVlcyBhcmUgQ09NUExFVEVMWSBVU0VMRVNTLlxuICAgKlxuICAgKiBTZWN0aW9uIDQuNC45OlxuICAgKiAgIElmIGJpdCAzIG9mIHRoZSBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWcgaXMgc2V0LFxuICAgKiAgIHRoZXNlIGZpZWxkcyBhcmUgc2V0IHRvIHplcm8gaW4gdGhlIGxvY2FsIGhlYWRlciBhbmQgdGhlXG4gICAqICAgY29ycmVjdCB2YWx1ZXMgYXJlIHB1dCBpbiB0aGUgZGF0YSBkZXNjcmlwdG9yIGFuZFxuICAgKiAgIGluIHRoZSBjZW50cmFsIGRpcmVjdG9yeS5cbiAgICpcbiAgICogU28gd2UnbGwganVzdCB1c2UgdGhlIGNlbnRyYWwgZGlyZWN0b3J5J3MgdmFsdWVzLlxuICAgKi9cbiAgLy8gcHVibGljIGNvbXByZXNzZWRTaXplKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDE4KTsgfVxuICAvLyBwdWJsaWMgdW5jb21wcmVzc2VkU2l6ZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgyMik7IH1cbiAgcHVibGljIGZpbGVOYW1lTGVuZ3RoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDI2KTsgfVxuICBwdWJsaWMgZXh0cmFGaWVsZExlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgyOCk7IH1cbiAgcHVibGljIGZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHNhZmVUb1N0cmluZyh0aGlzLmRhdGEsIHRoaXMudXNlVVRGOCgpLCAzMCwgdGhpcy5maWxlTmFtZUxlbmd0aCgpKTtcbiAgfVxuICBwdWJsaWMgZXh0cmFGaWVsZCgpOiBOb2RlQnVmZmVyIHtcbiAgICB2YXIgc3RhcnQgPSAzMCArIHRoaXMuZmlsZU5hbWVMZW5ndGgoKTtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIHRoaXMuZXh0cmFGaWVsZExlbmd0aCgpKTtcbiAgfVxuICBwdWJsaWMgdG90YWxTaXplKCk6IG51bWJlciB7IHJldHVybiAzMCArIHRoaXMuZmlsZU5hbWVMZW5ndGgoKSArIHRoaXMuZXh0cmFGaWVsZExlbmd0aCgpOyB9XG4gIHB1YmxpYyB1c2VVVEY4KCk6IGJvb2xlYW4geyByZXR1cm4gKHRoaXMuZmxhZ3MoKSAmIDB4ODAwKSA9PT0gMHg4MDA7IH1cbn1cblxuLyoqXG4gIDQuMy44ICBGaWxlIGRhdGFcblxuICAgIEltbWVkaWF0ZWx5IGZvbGxvd2luZyB0aGUgbG9jYWwgaGVhZGVyIGZvciBhIGZpbGVcbiAgICBTSE9VTEQgYmUgcGxhY2VkIHRoZSBjb21wcmVzc2VkIG9yIHN0b3JlZCBkYXRhIGZvciB0aGUgZmlsZS5cbiAgICBJZiB0aGUgZmlsZSBpcyBlbmNyeXB0ZWQsIHRoZSBlbmNyeXB0aW9uIGhlYWRlciBmb3IgdGhlIGZpbGVcbiAgICBTSE9VTEQgYmUgcGxhY2VkIGFmdGVyIHRoZSBsb2NhbCBoZWFkZXIgYW5kIGJlZm9yZSB0aGUgZmlsZVxuICAgIGRhdGEuIFRoZSBzZXJpZXMgb2YgW2xvY2FsIGZpbGUgaGVhZGVyXVtlbmNyeXB0aW9uIGhlYWRlcl1cbiAgICBbZmlsZSBkYXRhXVtkYXRhIGRlc2NyaXB0b3JdIHJlcGVhdHMgZm9yIGVhY2ggZmlsZSBpbiB0aGVcbiAgICAuWklQIGFyY2hpdmUuXG5cbiAgICBaZXJvLWJ5dGUgZmlsZXMsIGRpcmVjdG9yaWVzLCBhbmQgb3RoZXIgZmlsZSB0eXBlcyB0aGF0XG4gICAgY29udGFpbiBubyBjb250ZW50IE1VU1Qgbm90IGluY2x1ZGUgZmlsZSBkYXRhLlxuKi9cbmV4cG9ydCBjbGFzcyBGaWxlRGF0YSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaGVhZGVyOiBGaWxlSGVhZGVyLCBwcml2YXRlIHJlY29yZDogQ2VudHJhbERpcmVjdG9yeSwgcHJpdmF0ZSBkYXRhOiBOb2RlQnVmZmVyKSB7fVxuICBwdWJsaWMgZGVjb21wcmVzcygpOiBOb2RlQnVmZmVyIHtcbiAgICAvLyBDaGVjayB0aGUgY29tcHJlc3Npb25cbiAgICB2YXIgY29tcHJlc3Npb25NZXRob2Q6IENvbXByZXNzaW9uTWV0aG9kID0gdGhpcy5oZWFkZXIuY29tcHJlc3Npb25NZXRob2QoKTtcbiAgICBzd2l0Y2ggKGNvbXByZXNzaW9uTWV0aG9kKSB7XG4gICAgICBjYXNlIENvbXByZXNzaW9uTWV0aG9kLkRFRkxBVEU6XG4gICAgICAgIHZhciBkYXRhID0gaW5mbGF0ZVJhdyhcbiAgICAgICAgICBidWZmZXIyQXJyYXlpc2godGhpcy5kYXRhLnNsaWNlKDAsIHRoaXMucmVjb3JkLmNvbXByZXNzZWRTaXplKCkpKSxcbiAgICAgICAgICB7IGNodW5rU2l6ZTogdGhpcy5yZWNvcmQudW5jb21wcmVzc2VkU2l6ZSgpIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGFycmF5aXNoMkJ1ZmZlcihkYXRhKTtcbiAgICAgIGNhc2UgQ29tcHJlc3Npb25NZXRob2QuU1RPUkVEOlxuICAgICAgICAvLyBHcmFiIGFuZCBjb3B5LlxuICAgICAgICByZXR1cm4gY29weWluZ1NsaWNlKHRoaXMuZGF0YSwgMCwgdGhpcy5yZWNvcmQudW5jb21wcmVzc2VkU2l6ZSgpKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciBuYW1lOiBzdHJpbmcgPSBDb21wcmVzc2lvbk1ldGhvZFtjb21wcmVzc2lvbk1ldGhvZF07XG4gICAgICAgIG5hbWUgPSBuYW1lID8gbmFtZSA6IFwiVW5rbm93bjogXCIgKyBjb21wcmVzc2lvbk1ldGhvZDtcbiAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiSW52YWxpZCBjb21wcmVzc2lvbiBtZXRob2Qgb24gZmlsZSAnXCIgKyB0aGlzLmhlYWRlci5maWxlTmFtZSgpICsgXCInOiBcIiArIG5hbWUpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0SGVhZGVyKCk6IEZpbGVIZWFkZXIge1xuICAgIHJldHVybiB0aGlzLmhlYWRlcjtcbiAgfVxuICBwdWJsaWMgZ2V0UmVjb3JkKCk6IENlbnRyYWxEaXJlY3Rvcnkge1xuICAgIHJldHVybiB0aGlzLnJlY29yZDtcbiAgfVxuICBwdWJsaWMgZ2V0UmF3RGF0YSgpOiBOb2RlQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG59XG5cbi8qXG4gNC4zLjkgIERhdGEgZGVzY3JpcHRvcjpcblxuICAgICAgY3JjLTMyICAgICAgICAgICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgICBjb21wcmVzc2VkIHNpemUgICAgICAgICAgICAgICAgIDQgYnl0ZXNcbiAgICAgIHVuY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgNCBieXRlc1xuICovXG5leHBvcnQgY2xhc3MgRGF0YURlc2NyaXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGE6IE5vZGVCdWZmZXIpIHt9XG4gIHB1YmxpYyBjcmMzMigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKTsgfVxuICBwdWJsaWMgY29tcHJlc3NlZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoNCk7IH1cbiAgcHVibGljIHVuY29tcHJlc3NlZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoOCk7IH1cbn1cblxuLypcbmAgNC4zLjEwICBBcmNoaXZlIGRlY3J5cHRpb24gaGVhZGVyOlxuXG4gICAgICA0LjMuMTAuMSBUaGUgQXJjaGl2ZSBEZWNyeXB0aW9uIEhlYWRlciBpcyBpbnRyb2R1Y2VkIGluIHZlcnNpb24gNi4yXG4gICAgICBvZiB0aGUgWklQIGZvcm1hdCBzcGVjaWZpY2F0aW9uLiAgVGhpcyByZWNvcmQgZXhpc3RzIGluIHN1cHBvcnRcbiAgICAgIG9mIHRoZSBDZW50cmFsIERpcmVjdG9yeSBFbmNyeXB0aW9uIEZlYXR1cmUgaW1wbGVtZW50ZWQgYXMgcGFydCBvZlxuICAgICAgdGhlIFN0cm9uZyBFbmNyeXB0aW9uIFNwZWNpZmljYXRpb24gYXMgZGVzY3JpYmVkIGluIHRoaXMgZG9jdW1lbnQuXG4gICAgICBXaGVuIHRoZSBDZW50cmFsIERpcmVjdG9yeSBTdHJ1Y3R1cmUgaXMgZW5jcnlwdGVkLCB0aGlzIGRlY3J5cHRpb25cbiAgICAgIGhlYWRlciBNVVNUIHByZWNlZGUgdGhlIGVuY3J5cHRlZCBkYXRhIHNlZ21lbnQuXG4gKi9cbi8qXG4gIDQuMy4xMSAgQXJjaGl2ZSBleHRyYSBkYXRhIHJlY29yZDpcblxuICAgICAgICBhcmNoaXZlIGV4dHJhIGRhdGEgc2lnbmF0dXJlICAgIDQgYnl0ZXMgICgweDA4MDY0YjUwKVxuICAgICAgICBleHRyYSBmaWVsZCBsZW5ndGggICAgICAgICAgICAgIDQgYnl0ZXNcbiAgICAgICAgZXh0cmEgZmllbGQgZGF0YSAgICAgICAgICAgICAgICAodmFyaWFibGUgc2l6ZSlcblxuICAgICAgNC4zLjExLjEgVGhlIEFyY2hpdmUgRXh0cmEgRGF0YSBSZWNvcmQgaXMgaW50cm9kdWNlZCBpbiB2ZXJzaW9uIDYuMlxuICAgICAgb2YgdGhlIFpJUCBmb3JtYXQgc3BlY2lmaWNhdGlvbi4gIFRoaXMgcmVjb3JkIE1BWSBiZSB1c2VkIGluIHN1cHBvcnRcbiAgICAgIG9mIHRoZSBDZW50cmFsIERpcmVjdG9yeSBFbmNyeXB0aW9uIEZlYXR1cmUgaW1wbGVtZW50ZWQgYXMgcGFydCBvZlxuICAgICAgdGhlIFN0cm9uZyBFbmNyeXB0aW9uIFNwZWNpZmljYXRpb24gYXMgZGVzY3JpYmVkIGluIHRoaXMgZG9jdW1lbnQuXG4gICAgICBXaGVuIHByZXNlbnQsIHRoaXMgcmVjb3JkIE1VU1QgaW1tZWRpYXRlbHkgcHJlY2VkZSB0aGUgY2VudHJhbFxuICAgICAgZGlyZWN0b3J5IGRhdGEgc3RydWN0dXJlLlxuKi9cbmV4cG9ydCBjbGFzcyBBcmNoaXZlRXh0cmFEYXRhUmVjb3JkIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRhOiBOb2RlQnVmZmVyKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMCkgIT09IDB4MDgwNjRiNTApIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBcIkludmFsaWQgYXJjaGl2ZSBleHRyYSBkYXRhIHJlY29yZCBzaWduYXR1cmU6IFwiICsgdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBsZW5ndGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoNCk7IH1cbiAgcHVibGljIGV4dHJhRmllbGREYXRhKCk6IE5vZGVCdWZmZXIgeyByZXR1cm4gdGhpcy5kYXRhLnNsaWNlKDgsIDggKyB0aGlzLmxlbmd0aCgpKTsgfVxufVxuXG4vKlxuICA0LjMuMTMgRGlnaXRhbCBzaWduYXR1cmU6XG5cbiAgICAgICAgaGVhZGVyIHNpZ25hdHVyZSAgICAgICAgICAgICAgICA0IGJ5dGVzICAoMHgwNTA1NGI1MClcbiAgICAgICAgc2l6ZSBvZiBkYXRhICAgICAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgICAgIHNpZ25hdHVyZSBkYXRhICh2YXJpYWJsZSBzaXplKVxuXG4gICAgICBXaXRoIHRoZSBpbnRyb2R1Y3Rpb24gb2YgdGhlIENlbnRyYWwgRGlyZWN0b3J5IEVuY3J5cHRpb25cbiAgICAgIGZlYXR1cmUgaW4gdmVyc2lvbiA2LjIgb2YgdGhpcyBzcGVjaWZpY2F0aW9uLCB0aGUgQ2VudHJhbFxuICAgICAgRGlyZWN0b3J5IFN0cnVjdHVyZSBNQVkgYmUgc3RvcmVkIGJvdGggY29tcHJlc3NlZCBhbmQgZW5jcnlwdGVkLlxuICAgICAgQWx0aG91Z2ggbm90IHJlcXVpcmVkLCBpdCBpcyBhc3N1bWVkIHdoZW4gZW5jcnlwdGluZyB0aGVcbiAgICAgIENlbnRyYWwgRGlyZWN0b3J5IFN0cnVjdHVyZSwgdGhhdCBpdCB3aWxsIGJlIGNvbXByZXNzZWRcbiAgICAgIGZvciBncmVhdGVyIHN0b3JhZ2UgZWZmaWNpZW5jeS4gIEluZm9ybWF0aW9uIG9uIHRoZVxuICAgICAgQ2VudHJhbCBEaXJlY3RvcnkgRW5jcnlwdGlvbiBmZWF0dXJlIGNhbiBiZSBmb3VuZCBpbiB0aGUgc2VjdGlvblxuICAgICAgZGVzY3JpYmluZyB0aGUgU3Ryb25nIEVuY3J5cHRpb24gU3BlY2lmaWNhdGlvbi4gVGhlIERpZ2l0YWxcbiAgICAgIFNpZ25hdHVyZSByZWNvcmQgd2lsbCBiZSBuZWl0aGVyIGNvbXByZXNzZWQgbm9yIGVuY3J5cHRlZC5cbiovXG5leHBvcnQgY2xhc3MgRGlnaXRhbFNpZ25hdHVyZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogTm9kZUJ1ZmZlcikge1xuICAgIGlmICh0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApICE9PSAweDA1MDU0YjUwKSB7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIGRpZ2l0YWwgc2lnbmF0dXJlIHNpZ25hdHVyZTogXCIgKyB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoNCk7IH1cbiAgcHVibGljIHNpZ25hdHVyZURhdGEoKTogTm9kZUJ1ZmZlciB7IHJldHVybiB0aGlzLmRhdGEuc2xpY2UoNiwgNiArIHRoaXMuc2l6ZSgpKTsgfVxufVxuXG4vKlxuICA0LjMuMTIgIENlbnRyYWwgZGlyZWN0b3J5IHN0cnVjdHVyZTpcblxuICAgIGNlbnRyYWwgZmlsZSBoZWFkZXIgc2lnbmF0dXJlICAgNCBieXRlcyAgKDB4MDIwMTRiNTApXG4gICAgdmVyc2lvbiBtYWRlIGJ5ICAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdCAgICAgICAyIGJ5dGVzXG4gICAgZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnICAgICAgICAyIGJ5dGVzXG4gICAgY29tcHJlc3Npb24gbWV0aG9kICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgbGFzdCBtb2QgZmlsZSB0aW1lICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgbGFzdCBtb2QgZmlsZSBkYXRlICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgY3JjLTMyICAgICAgICAgICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgdW5jb21wcmVzc2VkIHNpemUgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgZmlsZSBuYW1lIGxlbmd0aCAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgZXh0cmEgZmllbGQgbGVuZ3RoICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgZmlsZSBjb21tZW50IGxlbmd0aCAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgZGlzayBudW1iZXIgc3RhcnQgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgaW50ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzICAgICAgICAyIGJ5dGVzXG4gICAgZXh0ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzICAgICAgICA0IGJ5dGVzXG4gICAgcmVsYXRpdmUgb2Zmc2V0IG9mIGxvY2FsIGhlYWRlciA0IGJ5dGVzXG5cbiAgICBmaWxlIG5hbWUgKHZhcmlhYmxlIHNpemUpXG4gICAgZXh0cmEgZmllbGQgKHZhcmlhYmxlIHNpemUpXG4gICAgZmlsZSBjb21tZW50ICh2YXJpYWJsZSBzaXplKVxuICovXG5leHBvcnQgY2xhc3MgQ2VudHJhbERpcmVjdG9yeSB7XG4gIC8vIE9wdGltaXphdGlvbjogVGhlIGZpbGVuYW1lIGlzIGZyZXF1ZW50bHkgcmVhZCwgc28gc3Rhc2ggaXQgaGVyZS5cbiAgcHJpdmF0ZSBfZmlsZW5hbWU6IHN0cmluZztcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB6aXBEYXRhOiBOb2RlQnVmZmVyLCBwcml2YXRlIGRhdGE6IE5vZGVCdWZmZXIpIHtcbiAgICAvLyBTYW5pdHkgY2hlY2suXG4gICAgaWYgKHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMCkgIT09IDB4MDIwMTRiNTApXG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIFppcCBmaWxlOiBDZW50cmFsIGRpcmVjdG9yeSByZWNvcmQgaGFzIGludmFsaWQgc2lnbmF0dXJlOiBcIiArIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMCkpO1xuICAgIHRoaXMuX2ZpbGVuYW1lID0gdGhpcy5wcm9kdWNlRmlsZW5hbWUoKTtcbiAgfVxuICBwdWJsaWMgdmVyc2lvbk1hZGVCeSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg0KTsgfVxuICBwdWJsaWMgdmVyc2lvbk5lZWRlZCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg2KTsgfVxuICBwdWJsaWMgZmxhZygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg4KTsgfVxuICBwdWJsaWMgY29tcHJlc3Npb25NZXRob2QoKTogQ29tcHJlc3Npb25NZXRob2QgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgxMCk7IH1cbiAgcHVibGljIGxhc3RNb2RGaWxlVGltZSgpOiBEYXRlIHtcbiAgICAvLyBUaW1lIGFuZCBkYXRlIGlzIGluIE1TLURPUyBmb3JtYXQuXG4gICAgcmV0dXJuIG1zZG9zMmRhdGUodGhpcy5kYXRhLnJlYWRVSW50MTZMRSgxMiksIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoMTQpKTtcbiAgfVxuICBwdWJsaWMgcmF3TGFzdE1vZEZpbGVUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMTIpO1xuICB9XG4gIHB1YmxpYyBjcmMzMigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgxNik7IH1cbiAgcHVibGljIGNvbXByZXNzZWRTaXplKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDIwKTsgfVxuICBwdWJsaWMgdW5jb21wcmVzc2VkU2l6ZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgyNCk7IH1cbiAgcHVibGljIGZpbGVOYW1lTGVuZ3RoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDI4KTsgfVxuICBwdWJsaWMgZXh0cmFGaWVsZExlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgzMCk7IH1cbiAgcHVibGljIGZpbGVDb21tZW50TGVuZ3RoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDMyKTsgfVxuICBwdWJsaWMgZGlza051bWJlclN0YXJ0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDM0KTsgfVxuICBwdWJsaWMgaW50ZXJuYWxBdHRyaWJ1dGVzKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDM2KTsgfVxuICBwdWJsaWMgZXh0ZXJuYWxBdHRyaWJ1dGVzKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDM4KTsgfVxuICBwdWJsaWMgaGVhZGVyUmVsYXRpdmVPZmZzZXQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoNDIpOyB9XG4gIHB1YmxpYyBwcm9kdWNlRmlsZW5hbWUoKTogc3RyaW5nIHtcbiAgICAvKlxuICAgICAgNC40LjE3LjEgY2xhaW1zOlxuICAgICAgKiBBbGwgc2xhc2hlcyBhcmUgZm9yd2FyZCAoJy8nKSBzbGFzaGVzLlxuICAgICAgKiBGaWxlbmFtZSBkb2Vzbid0IGJlZ2luIHdpdGggYSBzbGFzaC5cbiAgICAgICogTm8gZHJpdmUgbGV0dGVycyBvciBhbnkgbm9uc2Vuc2UgbGlrZSB0aGF0LlxuICAgICAgKiBJZiBmaWxlbmFtZSBpcyBtaXNzaW5nLCB0aGUgaW5wdXQgY2FtZSBmcm9tIHN0YW5kYXJkIGlucHV0LlxuXG4gICAgICBVbmZvcnR1bmF0ZWx5LCB0aGlzIGlzbid0IHRydWUgaW4gcHJhY3RpY2UuIFNvbWUgV2luZG93cyB6aXAgdXRpbGl0aWVzIHVzZVxuICAgICAgYSBiYWNrc2xhc2ggaGVyZSwgYnV0IHRoZSBjb3JyZWN0IFVuaXgtc3R5bGUgcGF0aCBpbiBmaWxlIGhlYWRlcnMuXG5cbiAgICAgIFRvIGF2b2lkIHNlZWtpbmcgYWxsIG92ZXIgdGhlIGZpbGUgdG8gcmVjb3ZlciB0aGUga25vd24tZ29vZCBmaWxlbmFtZXNcbiAgICAgIGZyb20gZmlsZSBoZWFkZXJzLCB3ZSBzaW1wbHkgY29udmVydCAnLycgdG8gJ1xcJyBoZXJlLlxuICAgICovXG4gICAgdmFyIGZpbGVOYW1lOiBzdHJpbmcgPSBzYWZlVG9TdHJpbmcodGhpcy5kYXRhLCB0aGlzLnVzZVVURjgoKSwgNDYsIHRoaXMuZmlsZU5hbWVMZW5ndGgoKSk7XG4gICAgcmV0dXJuIGZpbGVOYW1lLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpO1xuICB9XG4gIHB1YmxpYyBmaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgfVxuICBwdWJsaWMgcmF3RmlsZU5hbWUoKTogTm9kZUJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5zbGljZSg0NiwgNDYgKyB0aGlzLmZpbGVOYW1lTGVuZ3RoKCkpO1xuICB9XG4gIHB1YmxpYyBleHRyYUZpZWxkKCk6IE5vZGVCdWZmZXIge1xuICAgIHZhciBzdGFydCA9IDQ0ICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpO1xuICAgIHJldHVybiB0aGlzLmRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCkpO1xuICB9XG4gIHB1YmxpYyBmaWxlQ29tbWVudCgpOiBzdHJpbmcge1xuICAgIHZhciBzdGFydCA9IDQ2ICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCk7XG4gICAgcmV0dXJuIHNhZmVUb1N0cmluZyh0aGlzLmRhdGEsIHRoaXMudXNlVVRGOCgpLCBzdGFydCwgdGhpcy5maWxlQ29tbWVudExlbmd0aCgpKTtcbiAgfVxuICBwdWJsaWMgcmF3RmlsZUNvbW1lbnQoKTogTm9kZUJ1ZmZlciB7XG4gICAgbGV0IHN0YXJ0ID0gNDYgKyB0aGlzLmZpbGVOYW1lTGVuZ3RoKCkgKyB0aGlzLmV4dHJhRmllbGRMZW5ndGgoKTtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIHRoaXMuZmlsZUNvbW1lbnRMZW5ndGgoKSk7XG4gIH1cbiAgcHVibGljIHRvdGFsU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiA0NiArIHRoaXMuZmlsZU5hbWVMZW5ndGgoKSArIHRoaXMuZXh0cmFGaWVsZExlbmd0aCgpICsgdGhpcy5maWxlQ29tbWVudExlbmd0aCgpO1xuICB9XG4gIHB1YmxpYyBpc0RpcmVjdG9yeSgpOiBib29sZWFuIHtcbiAgICAvLyBOT1RFOiBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgemlwIGZpbGUgaW1wbGVtZW50YXRpb24gdXNlcyB0aGUgbG93ZXIgYnl0ZVxuICAgIC8vICAgICAgIG9mIGV4dGVybmFsIGF0dHJpYnV0ZXMgZm9yIERPUyBhdHRyaWJ1dGVzIGZvclxuICAgIC8vICAgICAgIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LiBUaGlzIGlzIG5vdCBtYW5kYXRlZCwgYnV0IGFwcGVhcnMgdG8gYmVcbiAgICAvLyAgICAgICBjb21tb25wbGFjZS5cbiAgICAvLyAgICAgICBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHRoZSBsYXlvdXQgb2YgZXh0ZXJuYWwgYXR0cmlidXRlcyBpc1xuICAgIC8vICAgICAgIHBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICAvLyAgICAgICBJZiB0aGF0IGZhaWxzLCB3ZSBhbHNvIGNoZWNrIGlmIHRoZSBuYW1lIG9mIHRoZSBmaWxlIGVuZHMgaW4gJy8nLFxuICAgIC8vICAgICAgIHdoaWNoIGlzIHdoYXQgSmF2YSdzIFppcEZpbGUgaW1wbGVtZW50YXRpb24gZG9lcy5cbiAgICB2YXIgZmlsZU5hbWUgPSB0aGlzLmZpbGVOYW1lKCk7XG4gICAgcmV0dXJuICh0aGlzLmV4dGVybmFsQXR0cmlidXRlcygpICYgMHgxMCA/IHRydWUgOiBmYWxzZSkgfHwgKGZpbGVOYW1lLmNoYXJBdChmaWxlTmFtZS5sZW5ndGgtMSkgPT09ICcvJyk7XG4gIH1cbiAgcHVibGljIGlzRmlsZSgpOiBib29sZWFuIHsgcmV0dXJuICF0aGlzLmlzRGlyZWN0b3J5KCk7IH1cbiAgcHVibGljIHVzZVVURjgoKTogYm9vbGVhbiB7IHJldHVybiAodGhpcy5mbGFnKCkgJiAweDgwMCkgPT09IDB4ODAwOyB9XG4gIHB1YmxpYyBpc0VuY3J5cHRlZCgpOiBib29sZWFuIHsgcmV0dXJuICh0aGlzLmZsYWcoKSAmIDB4MSkgPT09IDB4MTsgfVxuICBwdWJsaWMgZ2V0RmlsZURhdGEoKTogRmlsZURhdGEge1xuICAgIC8vIE5lZWQgdG8gZ3JhYiB0aGUgaGVhZGVyIGJlZm9yZSB3ZSBjYW4gZmlndXJlIG91dCB3aGVyZSB0aGUgYWN0dWFsXG4gICAgLy8gY29tcHJlc3NlZCBkYXRhIHN0YXJ0cy5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLmhlYWRlclJlbGF0aXZlT2Zmc2V0KCk7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBGaWxlSGVhZGVyKHRoaXMuemlwRGF0YS5zbGljZShzdGFydCkpO1xuICAgIHJldHVybiBuZXcgRmlsZURhdGEoaGVhZGVyLCB0aGlzLCB0aGlzLnppcERhdGEuc2xpY2Uoc3RhcnQgKyBoZWFkZXIudG90YWxTaXplKCkpKTtcbiAgfVxuICBwdWJsaWMgZ2V0RGF0YSgpOiBOb2RlQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGaWxlRGF0YSgpLmRlY29tcHJlc3MoKTtcbiAgfVxuICBwdWJsaWMgZ2V0UmF3RGF0YSgpOiBOb2RlQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGaWxlRGF0YSgpLmdldFJhd0RhdGEoKTtcbiAgfVxuICBwdWJsaWMgZ2V0U3RhdHMoKTogU3RhdHMge1xuICAgIHJldHVybiBuZXcgU3RhdHMoRmlsZVR5cGUuRklMRSwgdGhpcy51bmNvbXByZXNzZWRTaXplKCksIDB4MTZELCBuZXcgRGF0ZSgpLCB0aGlzLmxhc3RNb2RGaWxlVGltZSgpKTtcbiAgfVxufVxuXG4vKlxuICA0LjMuMTY6IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSByZWNvcmRcbiAgICBlbmQgb2YgY2VudHJhbCBkaXIgc2lnbmF0dXJlICAgIDQgYnl0ZXMgICgweDA2MDU0YjUwKVxuICAgIG51bWJlciBvZiB0aGlzIGRpc2sgICAgICAgICAgICAgMiBieXRlc1xuICAgIG51bWJlciBvZiB0aGUgZGlzayB3aXRoIHRoZVxuICAgIHN0YXJ0IG9mIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAgMiBieXRlc1xuICAgIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoZVxuICAgIGNlbnRyYWwgZGlyZWN0b3J5IG9uIHRoaXMgZGlzayAgMiBieXRlc1xuICAgIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluXG4gICAgdGhlIGNlbnRyYWwgZGlyZWN0b3J5ICAgICAgICAgICAyIGJ5dGVzXG4gICAgc2l6ZSBvZiB0aGUgY2VudHJhbCBkaXJlY3RvcnkgICA0IGJ5dGVzXG4gICAgb2Zmc2V0IG9mIHN0YXJ0IG9mIGNlbnRyYWxcbiAgICBkaXJlY3Rvcnkgd2l0aCByZXNwZWN0IHRvXG4gICAgdGhlIHN0YXJ0aW5nIGRpc2sgbnVtYmVyICAgICAgICA0IGJ5dGVzXG4gICAgLlpJUCBmaWxlIGNvbW1lbnQgbGVuZ3RoICAgICAgICAyIGJ5dGVzXG4gICAgLlpJUCBmaWxlIGNvbW1lbnQgICAgICAgKHZhcmlhYmxlIHNpemUpXG4qL1xuZXhwb3J0IGNsYXNzIEVuZE9mQ2VudHJhbERpcmVjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogTm9kZUJ1ZmZlcikge1xuICAgIGlmICh0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApICE9PSAweDA2MDU0YjUwKVxuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiSW52YWxpZCBaaXAgZmlsZTogRW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IHJlY29yZCBoYXMgaW52YWxpZCBzaWduYXR1cmU6IFwiICsgdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKSk7XG4gIH1cbiAgcHVibGljIGRpc2tOdW1iZXIoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoNCk7IH1cbiAgcHVibGljIGNkRGlza051bWJlcigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg2KTsgfVxuICBwdWJsaWMgY2REaXNrRW50cnlDb3VudCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg4KTsgfVxuICBwdWJsaWMgY2RUb3RhbEVudHJ5Q291bnQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoMTApOyB9XG4gIHB1YmxpYyBjZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMTIpOyB9XG4gIHB1YmxpYyBjZE9mZnNldCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgxNik7IH1cbiAgcHVibGljIGNkWmlwQ29tbWVudExlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgyMCk7IH1cbiAgcHVibGljIGNkWmlwQ29tbWVudCgpOiBzdHJpbmcge1xuICAgIC8vIEFzc3VtaW5nIFVURi04LiBUaGUgc3BlY2lmaWNhdGlvbiBkb2Vzbid0IHNwZWNpZnkuXG4gICAgcmV0dXJuIHNhZmVUb1N0cmluZyh0aGlzLmRhdGEsIHRydWUsIDIyLCB0aGlzLmNkWmlwQ29tbWVudExlbmd0aCgpKTtcbiAgfVxuICBwdWJsaWMgcmF3Q2RaaXBDb21tZW50KCk6IE5vZGVCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLmRhdGEuc2xpY2UoMjIsIDIyICsgdGhpcy5jZFppcENvbW1lbnRMZW5ndGgoKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBaaXBGUyBleHRlbmRzIGZpbGVfc3lzdGVtLlN5bmNocm9ub3VzRmlsZVN5c3RlbSBpbXBsZW1lbnRzIGZpbGVfc3lzdGVtLkZpbGVTeXN0ZW0ge1xuICBwcml2YXRlIF9pbmRleDogRmlsZUluZGV4PENlbnRyYWxEaXJlY3Rvcnk+ID0gbmV3IEZpbGVJbmRleDxDZW50cmFsRGlyZWN0b3J5PigpO1xuICBwcml2YXRlIF9kaXJlY3RvcnlFbnRyaWVzOiBDZW50cmFsRGlyZWN0b3J5W10gPSBbXTtcbiAgcHJpdmF0ZSBfZW9jZDogRW5kT2ZDZW50cmFsRGlyZWN0b3J5ID0gbnVsbDtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBaaXBGUyBmcm9tIHRoZSBnaXZlbiB6aXAgZmlsZSBkYXRhLiBOYW1lIGlzIG9wdGlvbmFsLCBhbmQgaXNcbiAgICogdXNlZCBwcmltYXJpbHkgZm9yIG91ciB1bml0IHRlc3RzJyBwdXJwb3NlcyB0byBkaWZmZXJlbnRpYXRlIGRpZmZlcmVudFxuICAgKiB0ZXN0IHppcCBmaWxlcyBpbiB0ZXN0IG91dHB1dC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogTm9kZUJ1ZmZlciwgcHJpdmF0ZSBuYW1lOiBzdHJpbmcgPSAnJykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wb3B1bGF0ZUluZGV4KCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnWmlwRlMnICsgKHRoaXMubmFtZSAhPT0gJycgPyAnICcgKyB0aGlzLm5hbWUgOiAnJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBDZW50cmFsRGlyZWN0b3J5IG9iamVjdCBmb3IgdGhlIGdpdmVuIHBhdGguXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2VudHJhbERpcmVjdG9yeUVudHJ5KHBhdGg6IHN0cmluZyk6IENlbnRyYWxEaXJlY3Rvcnkge1xuICAgIGxldCBpbm9kZSA9IHRoaXMuX2luZGV4LmdldElub2RlKHBhdGgpO1xuICAgIGlmIChpbm9kZSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgQXBpRXJyb3IuRU5PRU5UKHBhdGgpO1xuICAgIH1cbiAgICBpZiAoaXNGaWxlSW5vZGU8Q2VudHJhbERpcmVjdG9yeT4oaW5vZGUpKSB7XG4gICAgICByZXR1cm4gaW5vZGUuZ2V0RGF0YSgpO1xuICAgIH0gZWxzZSBpZiAoaXNEaXJJbm9kZTxDZW50cmFsRGlyZWN0b3J5Pihpbm9kZSkpIHtcbiAgICAgIHJldHVybiBpbm9kZS5nZXREYXRhKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldENlbnRyYWxEaXJlY3RvcnlFbnRyeUF0KGluZGV4OiBudW1iZXIpOiBDZW50cmFsRGlyZWN0b3J5IHtcbiAgICBsZXQgZGlyRW50cnkgPSB0aGlzLl9kaXJlY3RvcnlFbnRyaWVzW2luZGV4XTtcbiAgICBpZiAoIWRpckVudHJ5KSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCBkaXJlY3RvcnkgaW5kZXg6ICR7aW5kZXh9LmApO1xuICAgIH1cbiAgICByZXR1cm4gZGlyRW50cnk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TnVtYmVyT2ZDZW50cmFsRGlyZWN0b3J5RW50cmllcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kaXJlY3RvcnlFbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRFbmRPZkNlbnRyYWxEaXJlY3RvcnkoKTogRW5kT2ZDZW50cmFsRGlyZWN0b3J5IHtcbiAgICByZXR1cm4gdGhpcy5fZW9jZDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaXNBdmFpbGFibGUoKTogYm9vbGVhbiB7IHJldHVybiB0cnVlOyB9XG5cbiAgcHVibGljIGRpc2tTcGFjZShwYXRoOiBzdHJpbmcsIGNiOiAodG90YWw6IG51bWJlciwgZnJlZTogbnVtYmVyKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgLy8gUmVhZC1vbmx5IGZpbGUgc3lzdGVtLlxuICAgIGNiKHRoaXMuZGF0YS5sZW5ndGgsIDApO1xuICB9XG5cbiAgcHVibGljIGlzUmVhZE9ubHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgc3VwcG9ydHNMaW5rcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3VwcG9ydHNQcm9wcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3VwcG9ydHNTeW5jaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0U3luYyhwYXRoOiBzdHJpbmcsIGlzTHN0YXQ6IGJvb2xlYW4pOiBTdGF0cyB7XG4gICAgdmFyIGlub2RlID0gdGhpcy5faW5kZXguZ2V0SW5vZGUocGF0aCk7XG4gICAgaWYgKGlub2RlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBBcGlFcnJvci5FTk9FTlQocGF0aCk7XG4gICAgfVxuICAgIHZhciBzdGF0czogU3RhdHM7XG4gICAgaWYgKGlzRmlsZUlub2RlPENlbnRyYWxEaXJlY3Rvcnk+KGlub2RlKSkge1xuICAgICAgc3RhdHMgPSBpbm9kZS5nZXREYXRhKCkuZ2V0U3RhdHMoKTtcbiAgICB9IGVsc2UgaWYgKGlzRGlySW5vZGUoaW5vZGUpKSB7XG4gICAgICBzdGF0cyA9IGlub2RlLmdldFN0YXRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBcIkludmFsaWQgaW5vZGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHM7XG4gIH1cblxuICBwdWJsaWMgb3BlblN5bmMocGF0aDogc3RyaW5nLCBmbGFnczogRmlsZUZsYWcsIG1vZGU6IG51bWJlcik6IGZpbGUuRmlsZSB7XG4gICAgLy8gSU5WQVJJQU5UOiBDYW5ub3Qgd3JpdGUgdG8gUk8gZmlsZSBzeXN0ZW1zLlxuICAgIGlmIChmbGFncy5pc1dyaXRlYWJsZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVQRVJNLCBwYXRoKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBhdGggZXhpc3RzLCBhbmQgaXMgYSBmaWxlLlxuICAgIHZhciBpbm9kZSA9IHRoaXMuX2luZGV4LmdldElub2RlKHBhdGgpO1xuICAgIGlmICghaW5vZGUpIHtcbiAgICAgIHRocm93IEFwaUVycm9yLkVOT0VOVChwYXRoKTtcbiAgICB9IGVsc2UgaWYgKGlzRmlsZUlub2RlPENlbnRyYWxEaXJlY3Rvcnk+KGlub2RlKSkge1xuICAgICAgdmFyIGNkUmVjb3JkID0gaW5vZGUuZ2V0RGF0YSgpO1xuICAgICAgdmFyIHN0YXRzID0gY2RSZWNvcmQuZ2V0U3RhdHMoKTtcbiAgICAgIHN3aXRjaCAoZmxhZ3MucGF0aEV4aXN0c0FjdGlvbigpKSB7XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5USFJPV19FWENFUFRJT046XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5UUlVOQ0FURV9GSUxFOlxuICAgICAgICAgIHRocm93IEFwaUVycm9yLkVFWElTVChwYXRoKTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLk5PUDpcbiAgICAgICAgICByZXR1cm4gbmV3IHByZWxvYWRfZmlsZS5Ob1N5bmNGaWxlKHRoaXMsIHBhdGgsIGZsYWdzLCBzdGF0cywgY2RSZWNvcmQuZ2V0RGF0YSgpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgJ0ludmFsaWQgRmlsZU1vZGUgb2JqZWN0LicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEFwaUVycm9yLkVJU0RJUihwYXRoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVhZGRpclN5bmMocGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIC8vIENoZWNrIGlmIGl0IGV4aXN0cy5cbiAgICB2YXIgaW5vZGUgPSB0aGlzLl9pbmRleC5nZXRJbm9kZShwYXRoKTtcbiAgICBpZiAoIWlub2RlKSB7XG4gICAgICB0aHJvdyBBcGlFcnJvci5FTk9FTlQocGF0aCk7XG4gICAgfSBlbHNlIGlmIChpc0Rpcklub2RlKGlub2RlKSkge1xuICAgICAgcmV0dXJuIGlub2RlLmdldExpc3RpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQXBpRXJyb3IuRU5PVERJUihwYXRoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lhbGx5LW9wdGltaXplZCByZWFkZmlsZS5cbiAgICovXG4gIHB1YmxpYyByZWFkRmlsZVN5bmMoZm5hbWU6IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZywgZmxhZzogRmlsZUZsYWcpOiBhbnkge1xuICAgIC8vIEdldCBmaWxlLlxuICAgIHZhciBmZCA9IHRoaXMub3BlblN5bmMoZm5hbWUsIGZsYWcsIDB4MWE0KTtcbiAgICB0cnkge1xuICAgICAgdmFyIGZkQ2FzdCA9IDxwcmVsb2FkX2ZpbGUuTm9TeW5jRmlsZTxaaXBGUz4+IGZkO1xuICAgICAgdmFyIGZkQnVmZiA9IDxCdWZmZXI+IGZkQ2FzdC5nZXRCdWZmZXIoKTtcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29weWluZ1NsaWNlKGZkQnVmZik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmRCdWZmLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZmQuY2xvc2VTeW5jKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvY2F0ZXMgdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSByZWNvcmQgYXQgdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiBpdCBjYW5ub3QgYmUgZm91bmQuXG4gICAqL1xuICBwcml2YXRlIGdldEVPQ0QoKTogRW5kT2ZDZW50cmFsRGlyZWN0b3J5IHtcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGUgY29tbWVudCBpcyB2YXJpYWJsZSBzaXplIGFuZCB1cCB0byA2NEsgaW4gc2l6ZS5cbiAgICAvLyBXZSBhc3N1bWUgdGhhdCB0aGUgbWFnaWMgc2lnbmF0dXJlIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgY29tbWVudCwgYW5kXG4gICAgLy8gaW4gdGhlIGJ5dGVzIGJldHdlZW4gdGhlIGNvbW1lbnQgYW5kIHRoZSBzaWduYXR1cmUuIE90aGVyIFpJUFxuICAgIC8vIGltcGxlbWVudGF0aW9ucyBtYWtlIHRoaXMgc2FtZSBhc3N1bXB0aW9uLCBzaW5jZSB0aGUgYWx0ZXJuYXRpdmUgaXMgdG9cbiAgICAvLyByZWFkIHRocmVhZCBldmVyeSBlbnRyeSBpbiB0aGUgZmlsZSB0byBnZXQgdG8gaXQuIDooXG4gICAgLy8gVGhlc2UgYXJlICpuZWdhdGl2ZSogb2Zmc2V0cyBmcm9tIHRoZSBlbmQgb2YgdGhlIGZpbGUuXG4gICAgdmFyIHN0YXJ0T2Zmc2V0ID0gMjI7XG4gICAgdmFyIGVuZE9mZnNldCA9IE1hdGgubWluKHN0YXJ0T2Zmc2V0ICsgMHhGRkZGLCB0aGlzLmRhdGEubGVuZ3RoIC0gMSk7XG4gICAgLy8gVGhlcmUncyBub3QgZXZlbiBhIGJ5dGUgYWxpZ25tZW50IGd1YXJhbnRlZSBvbiB0aGUgY29tbWVudCBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gc2VhcmNoIGJ5dGUgYnkgYnl0ZS4gKmdydW1ibGUgZ3J1bWJsZSpcbiAgICBmb3IgKHZhciBpID0gc3RhcnRPZmZzZXQ7IGkgPCBlbmRPZmZzZXQ7IGkrKykge1xuICAgICAgLy8gTWFnaWMgbnVtYmVyOiBFT0NEIFNpZ25hdHVyZVxuICAgICAgaWYgKHRoaXMuZGF0YS5yZWFkVUludDMyTEUodGhpcy5kYXRhLmxlbmd0aCAtIGkpID09PSAweDA2MDU0YjUwKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW5kT2ZDZW50cmFsRGlyZWN0b3J5KHRoaXMuZGF0YS5zbGljZSh0aGlzLmRhdGEubGVuZ3RoIC0gaSkpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIFpJUCBmaWxlOiBDb3VsZCBub3QgbG9jYXRlIEVuZCBvZiBDZW50cmFsIERpcmVjdG9yeSBzaWduYXR1cmUuXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3B1bGF0ZUluZGV4KCkge1xuICAgIHZhciBlb2NkOiBFbmRPZkNlbnRyYWxEaXJlY3RvcnkgPSB0aGlzLl9lb2NkID0gdGhpcy5nZXRFT0NEKCk7XG4gICAgaWYgKGVvY2QuZGlza051bWJlcigpICE9PSBlb2NkLmNkRGlza051bWJlcigpKVxuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiWmlwRlMgZG9lcyBub3Qgc3VwcG9ydCBzcGFubmVkIHppcCBmaWxlcy5cIik7XG5cbiAgICB2YXIgY2RQdHIgPSBlb2NkLmNkT2Zmc2V0KCk7XG4gICAgaWYgKGNkUHRyID09PSAweEZGRkZGRkZGKVxuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiWmlwRlMgZG9lcyBub3Qgc3VwcG9ydCBaaXA2NC5cIik7XG4gICAgdmFyIGNkRW5kID0gY2RQdHIgKyBlb2NkLmNkU2l6ZSgpO1xuICAgIHdoaWxlIChjZFB0ciA8IGNkRW5kKSB7XG4gICAgICB2YXIgY2Q6IENlbnRyYWxEaXJlY3RvcnkgPSBuZXcgQ2VudHJhbERpcmVjdG9yeSh0aGlzLmRhdGEsIHRoaXMuZGF0YS5zbGljZShjZFB0cikpO1xuICAgICAgY2RQdHIgKz0gY2QudG90YWxTaXplKCk7XG4gICAgICAvLyBQYXRocyBtdXN0IGJlIGFic29sdXRlLCB5ZXQgemlwIGZpbGUgcGF0aHMgYXJlIGFsd2F5cyByZWxhdGl2ZSB0byB0aGVcbiAgICAgIC8vIHppcCByb290LiBTbyB3ZSBhcHBlbmQgJy8nIGFuZCBjYWxsIGl0IGEgZGF5LlxuICAgICAgdmFyIGZpbGVuYW1lID0gY2QuZmlsZU5hbWUoKTtcbiAgICAgIGlmIChmaWxlbmFtZS5jaGFyQXQoMCkgPT09ICcvJykgdGhyb3cgbmV3IEVycm9yKFwiV0hZIElTIFRISVMgQUJTT0xVVEVcIik7XG4gICAgICAvLyBYWFg6IEZvciB0aGUgZmlsZSBpbmRleCwgc3RyaXAgdGhlIHRyYWlsaW5nICcvJy5cbiAgICAgIGlmIChmaWxlbmFtZS5jaGFyQXQoZmlsZW5hbWUubGVuZ3RoIC0gMSkgPT09ICcvJykge1xuICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lLnN1YnN0cigwLCBmaWxlbmFtZS5sZW5ndGgtMSk7XG4gICAgICB9XG4gICAgICBpZiAoY2QuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICB0aGlzLl9pbmRleC5hZGRQYXRoKCcvJyArIGZpbGVuYW1lLCBuZXcgRGlySW5vZGU8Q2VudHJhbERpcmVjdG9yeT4oY2QpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2luZGV4LmFkZFBhdGgoJy8nICsgZmlsZW5hbWUsIG5ldyBGaWxlSW5vZGU8Q2VudHJhbERpcmVjdG9yeT4oY2QpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RpcmVjdG9yeUVudHJpZXMucHVzaChjZCk7XG4gICAgfVxuICB9XG59XG4iXX0=