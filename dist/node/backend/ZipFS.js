var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var api_error_1 = require('../core/api_error');
var node_fs_stats = require('../core/node_fs_stats');
var file_system = require('../core/file_system');
var file_flag_1 = require('../core/file_flag');
var preload_file = require('../generic/preload_file');
var util_1 = require('../core/util');
var inflateRaw = require('pako/dist/pako_inflate.min').inflateRaw;
var file_index_1 = require('../generic/file_index');
(function (ExternalFileAttributeType) {
    ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
    ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
    ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
    ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
    ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
    ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
    ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
    ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
    ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
    ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
    ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
    ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
    ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
    ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
    ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
    ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
    ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
    ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
    ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
    ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
})(exports.ExternalFileAttributeType || (exports.ExternalFileAttributeType = {}));
var ExternalFileAttributeType = exports.ExternalFileAttributeType;
(function (CompressionMethod) {
    CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
    CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
    CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
    CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
    CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
    CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
    CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
    CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
    CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
    CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
    CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
    CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
    CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
    CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
    CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
    CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD";
})(exports.CompressionMethod || (exports.CompressionMethod = {}));
var CompressionMethod = exports.CompressionMethod;
function msdos2date(time, date) {
    var day = date & 0x1F;
    var month = ((date >> 5) & 0xF) - 1;
    var year = (date >> 9) + 1980;
    var second = time & 0x1F;
    var minute = (time >> 5) & 0x3F;
    var hour = time >> 11;
    return new Date(year, month, day, hour, minute, second);
}
function safeToString(buff, useUTF8, start, length) {
    return length === 0 ? "" : buff.toString(useUTF8 ? 'utf8' : 'extended_ascii', start, start + length);
}
var FileHeader = (function () {
    function FileHeader(data) {
        this.data = data;
        if (data.readUInt32LE(0) !== 0x04034b50) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
        }
    }
    FileHeader.prototype.versionNeeded = function () { return this.data.readUInt16LE(4); };
    FileHeader.prototype.flags = function () { return this.data.readUInt16LE(6); };
    FileHeader.prototype.compressionMethod = function () { return this.data.readUInt16LE(8); };
    FileHeader.prototype.lastModFileTime = function () {
        return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
    };
    FileHeader.prototype.crc32 = function () { return this.data.readUInt32LE(14); };
    FileHeader.prototype.fileNameLength = function () { return this.data.readUInt16LE(26); };
    FileHeader.prototype.extraFieldLength = function () { return this.data.readUInt16LE(28); };
    FileHeader.prototype.fileName = function () {
        return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
    };
    FileHeader.prototype.extraField = function () {
        var start = 30 + this.fileNameLength();
        return this.data.slice(start, start + this.extraFieldLength());
    };
    FileHeader.prototype.totalSize = function () { return 30 + this.fileNameLength() + this.extraFieldLength(); };
    FileHeader.prototype.useUTF8 = function () { return (this.flags() & 0x800) === 0x800; };
    return FileHeader;
})();
exports.FileHeader = FileHeader;
var FileData = (function () {
    function FileData(header, record, data) {
        this.header = header;
        this.record = record;
        this.data = data;
    }
    FileData.prototype.decompress = function () {
        var compressionMethod = this.header.compressionMethod();
        switch (compressionMethod) {
            case CompressionMethod.DEFLATE:
                var data = inflateRaw(util_1.buffer2Arrayish(this.data.slice(0, this.record.compressedSize())), { chunkSize: this.record.uncompressedSize() });
                return util_1.arrayish2Buffer(data);
            case CompressionMethod.STORED:
                return util_1.copyingSlice(this.data, 0, this.record.uncompressedSize());
            default:
                var name = CompressionMethod[compressionMethod];
                name = name ? name : "Unknown: " + compressionMethod;
                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid compression method on file '" + this.header.fileName() + "': " + name);
        }
    };
    return FileData;
})();
exports.FileData = FileData;
var DataDescriptor = (function () {
    function DataDescriptor(data) {
        this.data = data;
    }
    DataDescriptor.prototype.crc32 = function () { return this.data.readUInt32LE(0); };
    DataDescriptor.prototype.compressedSize = function () { return this.data.readUInt32LE(4); };
    DataDescriptor.prototype.uncompressedSize = function () { return this.data.readUInt32LE(8); };
    return DataDescriptor;
})();
exports.DataDescriptor = DataDescriptor;
var ArchiveExtraDataRecord = (function () {
    function ArchiveExtraDataRecord(data) {
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x08064b50) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
        }
    }
    ArchiveExtraDataRecord.prototype.length = function () { return this.data.readUInt32LE(4); };
    ArchiveExtraDataRecord.prototype.extraFieldData = function () { return this.data.slice(8, 8 + this.length()); };
    return ArchiveExtraDataRecord;
})();
exports.ArchiveExtraDataRecord = ArchiveExtraDataRecord;
var DigitalSignature = (function () {
    function DigitalSignature(data) {
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x05054b50) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
        }
    }
    DigitalSignature.prototype.size = function () { return this.data.readUInt16LE(4); };
    DigitalSignature.prototype.signatureData = function () { return this.data.slice(6, 6 + this.size()); };
    return DigitalSignature;
})();
exports.DigitalSignature = DigitalSignature;
var CentralDirectory = (function () {
    function CentralDirectory(zipData, data) {
        this.zipData = zipData;
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x02014b50)
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid Zip file: Central directory record has invalid signature: " + this.data.readUInt32LE(0));
    }
    CentralDirectory.prototype.versionMadeBy = function () { return this.data.readUInt16LE(4); };
    CentralDirectory.prototype.versionNeeded = function () { return this.data.readUInt16LE(6); };
    CentralDirectory.prototype.flag = function () { return this.data.readUInt16LE(8); };
    CentralDirectory.prototype.compressionMethod = function () { return this.data.readUInt16LE(10); };
    CentralDirectory.prototype.lastModFileTime = function () {
        return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
    };
    CentralDirectory.prototype.crc32 = function () { return this.data.readUInt32LE(16); };
    CentralDirectory.prototype.compressedSize = function () { return this.data.readUInt32LE(20); };
    CentralDirectory.prototype.uncompressedSize = function () { return this.data.readUInt32LE(24); };
    CentralDirectory.prototype.fileNameLength = function () { return this.data.readUInt16LE(28); };
    CentralDirectory.prototype.extraFieldLength = function () { return this.data.readUInt16LE(30); };
    CentralDirectory.prototype.fileCommentLength = function () { return this.data.readUInt16LE(32); };
    CentralDirectory.prototype.diskNumberStart = function () { return this.data.readUInt16LE(34); };
    CentralDirectory.prototype.internalAttributes = function () { return this.data.readUInt16LE(36); };
    CentralDirectory.prototype.externalAttributes = function () { return this.data.readUInt32LE(38); };
    CentralDirectory.prototype.headerRelativeOffset = function () { return this.data.readUInt32LE(42); };
    CentralDirectory.prototype.fileName = function () {
        var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
        return fileName.replace(/\\/g, "/");
    };
    CentralDirectory.prototype.extraField = function () {
        var start = 44 + this.fileNameLength();
        return this.data.slice(start, start + this.extraFieldLength());
    };
    CentralDirectory.prototype.fileComment = function () {
        var start = 46 + this.fileNameLength() + this.extraFieldLength();
        return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
    };
    CentralDirectory.prototype.totalSize = function () {
        return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
    };
    CentralDirectory.prototype.isDirectory = function () {
        var fileName = this.fileName();
        return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');
    };
    CentralDirectory.prototype.isFile = function () { return !this.isDirectory(); };
    CentralDirectory.prototype.useUTF8 = function () { return (this.flag() & 0x800) === 0x800; };
    CentralDirectory.prototype.isEncrypted = function () { return (this.flag() & 0x1) === 0x1; };
    CentralDirectory.prototype.getData = function () {
        var start = this.headerRelativeOffset();
        var header = new FileHeader(this.zipData.slice(start));
        var filedata = new FileData(header, this, this.zipData.slice(start + header.totalSize()));
        return filedata.decompress();
    };
    CentralDirectory.prototype.getStats = function () {
        return new node_fs_stats.Stats(node_fs_stats.FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
    };
    return CentralDirectory;
})();
exports.CentralDirectory = CentralDirectory;
var EndOfCentralDirectory = (function () {
    function EndOfCentralDirectory(data) {
        this.data = data;
        if (this.data.readUInt32LE(0) !== 0x06054b50)
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid Zip file: End of central directory record has invalid signature: " + this.data.readUInt32LE(0));
    }
    EndOfCentralDirectory.prototype.diskNumber = function () { return this.data.readUInt16LE(4); };
    EndOfCentralDirectory.prototype.cdDiskNumber = function () { return this.data.readUInt16LE(6); };
    EndOfCentralDirectory.prototype.cdDiskEntryCount = function () { return this.data.readUInt16LE(8); };
    EndOfCentralDirectory.prototype.cdTotalEntryCount = function () { return this.data.readUInt16LE(10); };
    EndOfCentralDirectory.prototype.cdSize = function () { return this.data.readUInt32LE(12); };
    EndOfCentralDirectory.prototype.cdOffset = function () { return this.data.readUInt32LE(16); };
    EndOfCentralDirectory.prototype.cdZipComment = function () {
        return safeToString(this.data, true, 22, this.data.readUInt16LE(20));
    };
    return EndOfCentralDirectory;
})();
exports.EndOfCentralDirectory = EndOfCentralDirectory;
var ZipFS = (function (_super) {
    __extends(ZipFS, _super);
    function ZipFS(data, name) {
        if (name === void 0) { name = ''; }
        _super.call(this);
        this.data = data;
        this.name = name;
        this._index = new file_index_1.FileIndex();
        this.populateIndex();
    }
    ZipFS.prototype.getName = function () {
        return 'ZipFS' + (this.name !== '' ? ' ' + this.name : '');
    };
    ZipFS.isAvailable = function () { return true; };
    ZipFS.prototype.diskSpace = function (path, cb) {
        cb(this.data.length, 0);
    };
    ZipFS.prototype.isReadOnly = function () {
        return true;
    };
    ZipFS.prototype.supportsLinks = function () {
        return false;
    };
    ZipFS.prototype.supportsProps = function () {
        return false;
    };
    ZipFS.prototype.supportsSynch = function () {
        return true;
    };
    ZipFS.prototype.statSync = function (path, isLstat) {
        var inode = this._index.getInode(path);
        if (inode === null) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        var stats;
        if (file_index_1.isFileInode(inode)) {
            stats = inode.getData().getStats();
        }
        else if (file_index_1.isDirInode(inode)) {
            stats = inode.getStats();
        }
        else {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid inode.");
        }
        return stats;
    };
    ZipFS.prototype.openSync = function (path, flags, mode) {
        if (flags.isWriteable()) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, path);
        }
        var inode = this._index.getInode(path);
        if (!inode) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        else if (file_index_1.isFileInode(inode)) {
            var cdRecord = inode.getData();
            var stats = cdRecord.getStats();
            switch (flags.pathExistsAction()) {
                case file_flag_1.ActionType.THROW_EXCEPTION:
                case file_flag_1.ActionType.TRUNCATE_FILE:
                    throw api_error_1.ApiError.EEXIST(path);
                case file_flag_1.ActionType.NOP:
                    return new preload_file.NoSyncFile(this, path, flags, stats, cdRecord.getData());
                default:
                    throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileMode object.');
            }
            return null;
        }
        else {
            throw api_error_1.ApiError.EISDIR(path);
        }
    };
    ZipFS.prototype.readdirSync = function (path) {
        var inode = this._index.getInode(path);
        if (!inode) {
            throw api_error_1.ApiError.ENOENT(path);
        }
        else if (file_index_1.isDirInode(inode)) {
            return inode.getListing();
        }
        else {
            throw api_error_1.ApiError.ENOTDIR(path);
        }
    };
    ZipFS.prototype.readFileSync = function (fname, encoding, flag) {
        var fd = this.openSync(fname, flag, 0x1a4);
        try {
            var fdCast = fd;
            var fdBuff = fdCast.getBuffer();
            if (encoding === null) {
                return util_1.copyingSlice(fdBuff);
            }
            return fdBuff.toString(encoding);
        }
        finally {
            fd.closeSync();
        }
    };
    ZipFS.prototype.getEOCD = function () {
        var startOffset = 22;
        var endOffset = Math.min(startOffset + 0xFFFF, this.data.length - 1);
        for (var i = startOffset; i < endOffset; i++) {
            if (this.data.readUInt32LE(this.data.length - i) === 0x06054b50) {
                return new EndOfCentralDirectory(this.data.slice(this.data.length - i));
            }
        }
        throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
    };
    ZipFS.prototype.populateIndex = function () {
        var eocd = this.getEOCD();
        if (eocd.diskNumber() !== eocd.cdDiskNumber())
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
        var cdPtr = eocd.cdOffset();
        if (cdPtr === 0xFFFFFFFF)
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, "ZipFS does not support Zip64.");
        var cdEnd = cdPtr + eocd.cdSize();
        while (cdPtr < cdEnd) {
            var cd = new CentralDirectory(this.data, this.data.slice(cdPtr));
            cdPtr += cd.totalSize();
            var filename = cd.fileName();
            if (filename.charAt(0) === '/')
                throw new Error("WHY IS THIS ABSOLUTE");
            if (filename.charAt(filename.length - 1) === '/') {
                filename = filename.substr(0, filename.length - 1);
            }
            if (cd.isDirectory()) {
                this._index.addPath('/' + filename, new file_index_1.DirInode());
            }
            else {
                this._index.addPath('/' + filename, new file_index_1.FileInode(cd));
            }
        }
    };
    return ZipFS;
})(file_system.SynchronousFileSystem);
exports.__esModule = true;
exports["default"] = ZipFS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWmlwRlMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFja2VuZC9aaXBGUy50cyJdLCJuYW1lcyI6WyJFeHRlcm5hbEZpbGVBdHRyaWJ1dGVUeXBlIiwiQ29tcHJlc3Npb25NZXRob2QiLCJtc2RvczJkYXRlIiwic2FmZVRvU3RyaW5nIiwiRmlsZUhlYWRlciIsIkZpbGVIZWFkZXIuY29uc3RydWN0b3IiLCJGaWxlSGVhZGVyLnZlcnNpb25OZWVkZWQiLCJGaWxlSGVhZGVyLmZsYWdzIiwiRmlsZUhlYWRlci5jb21wcmVzc2lvbk1ldGhvZCIsIkZpbGVIZWFkZXIubGFzdE1vZEZpbGVUaW1lIiwiRmlsZUhlYWRlci5jcmMzMiIsIkZpbGVIZWFkZXIuZmlsZU5hbWVMZW5ndGgiLCJGaWxlSGVhZGVyLmV4dHJhRmllbGRMZW5ndGgiLCJGaWxlSGVhZGVyLmZpbGVOYW1lIiwiRmlsZUhlYWRlci5leHRyYUZpZWxkIiwiRmlsZUhlYWRlci50b3RhbFNpemUiLCJGaWxlSGVhZGVyLnVzZVVURjgiLCJGaWxlRGF0YSIsIkZpbGVEYXRhLmNvbnN0cnVjdG9yIiwiRmlsZURhdGEuZGVjb21wcmVzcyIsIkRhdGFEZXNjcmlwdG9yIiwiRGF0YURlc2NyaXB0b3IuY29uc3RydWN0b3IiLCJEYXRhRGVzY3JpcHRvci5jcmMzMiIsIkRhdGFEZXNjcmlwdG9yLmNvbXByZXNzZWRTaXplIiwiRGF0YURlc2NyaXB0b3IudW5jb21wcmVzc2VkU2l6ZSIsIkFyY2hpdmVFeHRyYURhdGFSZWNvcmQiLCJBcmNoaXZlRXh0cmFEYXRhUmVjb3JkLmNvbnN0cnVjdG9yIiwiQXJjaGl2ZUV4dHJhRGF0YVJlY29yZC5sZW5ndGgiLCJBcmNoaXZlRXh0cmFEYXRhUmVjb3JkLmV4dHJhRmllbGREYXRhIiwiRGlnaXRhbFNpZ25hdHVyZSIsIkRpZ2l0YWxTaWduYXR1cmUuY29uc3RydWN0b3IiLCJEaWdpdGFsU2lnbmF0dXJlLnNpemUiLCJEaWdpdGFsU2lnbmF0dXJlLnNpZ25hdHVyZURhdGEiLCJDZW50cmFsRGlyZWN0b3J5IiwiQ2VudHJhbERpcmVjdG9yeS5jb25zdHJ1Y3RvciIsIkNlbnRyYWxEaXJlY3RvcnkudmVyc2lvbk1hZGVCeSIsIkNlbnRyYWxEaXJlY3RvcnkudmVyc2lvbk5lZWRlZCIsIkNlbnRyYWxEaXJlY3RvcnkuZmxhZyIsIkNlbnRyYWxEaXJlY3RvcnkuY29tcHJlc3Npb25NZXRob2QiLCJDZW50cmFsRGlyZWN0b3J5Lmxhc3RNb2RGaWxlVGltZSIsIkNlbnRyYWxEaXJlY3RvcnkuY3JjMzIiLCJDZW50cmFsRGlyZWN0b3J5LmNvbXByZXNzZWRTaXplIiwiQ2VudHJhbERpcmVjdG9yeS51bmNvbXByZXNzZWRTaXplIiwiQ2VudHJhbERpcmVjdG9yeS5maWxlTmFtZUxlbmd0aCIsIkNlbnRyYWxEaXJlY3RvcnkuZXh0cmFGaWVsZExlbmd0aCIsIkNlbnRyYWxEaXJlY3RvcnkuZmlsZUNvbW1lbnRMZW5ndGgiLCJDZW50cmFsRGlyZWN0b3J5LmRpc2tOdW1iZXJTdGFydCIsIkNlbnRyYWxEaXJlY3RvcnkuaW50ZXJuYWxBdHRyaWJ1dGVzIiwiQ2VudHJhbERpcmVjdG9yeS5leHRlcm5hbEF0dHJpYnV0ZXMiLCJDZW50cmFsRGlyZWN0b3J5LmhlYWRlclJlbGF0aXZlT2Zmc2V0IiwiQ2VudHJhbERpcmVjdG9yeS5maWxlTmFtZSIsIkNlbnRyYWxEaXJlY3RvcnkuZXh0cmFGaWVsZCIsIkNlbnRyYWxEaXJlY3RvcnkuZmlsZUNvbW1lbnQiLCJDZW50cmFsRGlyZWN0b3J5LnRvdGFsU2l6ZSIsIkNlbnRyYWxEaXJlY3RvcnkuaXNEaXJlY3RvcnkiLCJDZW50cmFsRGlyZWN0b3J5LmlzRmlsZSIsIkNlbnRyYWxEaXJlY3RvcnkudXNlVVRGOCIsIkNlbnRyYWxEaXJlY3RvcnkuaXNFbmNyeXB0ZWQiLCJDZW50cmFsRGlyZWN0b3J5LmdldERhdGEiLCJDZW50cmFsRGlyZWN0b3J5LmdldFN0YXRzIiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5IiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNvbnN0cnVjdG9yIiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmRpc2tOdW1iZXIiLCJFbmRPZkNlbnRyYWxEaXJlY3RvcnkuY2REaXNrTnVtYmVyIiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNkRGlza0VudHJ5Q291bnQiLCJFbmRPZkNlbnRyYWxEaXJlY3RvcnkuY2RUb3RhbEVudHJ5Q291bnQiLCJFbmRPZkNlbnRyYWxEaXJlY3RvcnkuY2RTaXplIiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNkT2Zmc2V0IiwiRW5kT2ZDZW50cmFsRGlyZWN0b3J5LmNkWmlwQ29tbWVudCIsIlppcEZTIiwiWmlwRlMuY29uc3RydWN0b3IiLCJaaXBGUy5nZXROYW1lIiwiWmlwRlMuaXNBdmFpbGFibGUiLCJaaXBGUy5kaXNrU3BhY2UiLCJaaXBGUy5pc1JlYWRPbmx5IiwiWmlwRlMuc3VwcG9ydHNMaW5rcyIsIlppcEZTLnN1cHBvcnRzUHJvcHMiLCJaaXBGUy5zdXBwb3J0c1N5bmNoIiwiWmlwRlMuc3RhdFN5bmMiLCJaaXBGUy5vcGVuU3luYyIsIlppcEZTLnJlYWRkaXJTeW5jIiwiWmlwRlMucmVhZEZpbGVTeW5jIiwiWmlwRlMuZ2V0RU9DRCIsIlppcEZTLnBvcHVsYXRlSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7O0FBK0NBLDBCQUFrQyxtQkFBbUIsQ0FBQyxDQUFBO0FBQ3RELElBQU8sYUFBYSxXQUFXLHVCQUF1QixDQUFDLENBQUM7QUFDeEQsSUFBTyxXQUFXLFdBQVcscUJBQXFCLENBQUMsQ0FBQztBQUVwRCwwQkFBbUMsbUJBQW1CLENBQUMsQ0FBQTtBQUN2RCxJQUFPLFlBQVksV0FBVyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3pELHFCQUF1RSxjQUFjLENBQUMsQ0FBQTtBQUN0RixJQUFJLFVBQVUsR0FJVixPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDckQsMkJBQXNFLHVCQUF1QixDQUFDLENBQUE7QUFNOUYsV0FBWSx5QkFBeUI7SUFDbkNB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Q2pEQSxRQUFRQSxHQUFHQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxNQUFNQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNuREEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxHQUFHQSxRQUFRQSxFQUFFQSxJQUFJQSxxQkFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDdERBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNOQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxHQUFHQSxRQUFRQSxFQUFFQSxJQUFJQSxzQkFBU0EsQ0FBbUJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQzNFQSxDQUFDQTtRQUNIQSxDQUFDQTtJQUNIQSxDQUFDQTtJQUNIZCxZQUFDQTtBQUFEQSxDQUFDQSxBQW5LRCxFQUFtQyxXQUFXLENBQUMscUJBQXFCLEVBbUtuRTtBQW5LRDswQkFtS0MsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWmlwIGZpbGUtYmFja2VkIGZpbGVzeXN0ZW1cbiAqIEltcGxlbWVudGVkIGFjY29yZGluZyB0byB0aGUgc3RhbmRhcmQ6XG4gKiBodHRwOi8vd3d3LnBrd2FyZS5jb20vZG9jdW1lbnRzL2Nhc2VzdHVkaWVzL0FQUE5PVEUuVFhUXG4gKlxuICogV2hpbGUgdGhlcmUgYXJlIGEgZmV3IHppcCBsaWJyYXJpZXMgZm9yIEphdmFTY3JpcHQgKGUuZy4gSlNaaXAgYW5kIHppcC5qcyksXG4gKiB0aGV5IGFyZSBub3QgYSBnb29kIG1hdGNoIGZvciBCcm93c2VyRlMuIEluIHBhcnRpY3VsYXIsIHRoZXNlIGxpYnJhcmllc1xuICogcGVyZm9ybSBhIGxvdCBvZiB1bm5lZWRlZCBkYXRhIGNvcHlpbmcsIGFuZCBlYWdlcmx5IGRlY29tcHJlc3MgZXZlcnkgZmlsZVxuICogaW4gdGhlIHppcCBmaWxlIHVwb24gbG9hZGluZyB0byBjaGVjayB0aGUgQ1JDMzIuIFRoZXkgYWxzbyBlYWdlcmx5IGRlY29kZVxuICogc3RyaW5ncy4gRnVydGhlcm1vcmUsIHRoZXNlIGxpYnJhcmllcyBkdXBsaWNhdGUgZnVuY3Rpb25hbGl0eSBhbHJlYWR5IHByZXNlbnRcbiAqIGluIEJyb3dzZXJGUyAoZS5nLiBVVEYtOCBkZWNvZGluZyBhbmQgYmluYXJ5IGRhdGEgbWFuaXB1bGF0aW9uKS5cbiAqXG4gKiBUaGlzIGZpbGVzeXN0ZW0gdGFrZXMgYWR2YW50YWdlIG9mIEJyb3dzZXJGUydzIEJ1ZmZlciBpbXBsZW1lbnRhdGlvbiwgd2hpY2hcbiAqIGVmZmljaWVudGx5IHJlcHJlc2VudHMgdGhlIHppcCBmaWxlIGluIG1lbW9yeSAoaW4gYm90aCBBcnJheUJ1ZmZlci1lbmFibGVkXG4gKiBicm93c2VycyAqYW5kKiBub24tQXJyYXlCdWZmZXIgYnJvd3NlcnMpLCBhbmQgd2hpY2ggY2FuIG5lYXRseSBiZSAnc2xpY2VkJ1xuICogd2l0aG91dCBjb3B5aW5nIGRhdGEuIEVhY2ggc3RydWN0IGRlZmluZWQgaW4gdGhlIHN0YW5kYXJkIGlzIHJlcHJlc2VudGVkIHdpdGhcbiAqIGEgYnVmZmVyIHNsaWNlIHBvaW50aW5nIHRvIGFuIG9mZnNldCBpbiB0aGUgemlwIGZpbGUsIGFuZCBoYXMgZ2V0dGVycyBmb3JcbiAqIGVhY2ggZmllbGQuIEFzIHdlIGFudGljaXBhdGUgdGhhdCB0aGlzIGRhdGEgd2lsbCBub3QgYmUgcmVhZCBvZnRlbiwgd2UgY2hvb3NlXG4gKiBub3QgdG8gc3RvcmUgZWFjaCBzdHJ1Y3QgZmllbGQgaW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0OyBpbnN0ZWFkLCB0byByZWR1Y2VcbiAqIG1lbW9yeSBjb25zdW1wdGlvbiwgd2UgcmV0cmlldmUgaXQgZGlyZWN0bHkgZnJvbSB0aGUgYmluYXJ5IGRhdGEgZWFjaCB0aW1lIGl0XG4gKiBpcyByZXF1ZXN0ZWQuXG4gKlxuICogV2hlbiB0aGUgZmlsZXN5c3RlbSBpcyBpbnN0YW50aWF0ZWQsIHdlIGRldGVybWluZSB0aGUgZGlyZWN0b3J5IHN0cnVjdHVyZVxuICogb2YgdGhlIHppcCBmaWxlIGFzIHF1aWNrbHkgYXMgcG9zc2libGUuIFdlIGxhemlseSBkZWNvbXByZXNzIGFuZCBjaGVjayB0aGVcbiAqIENSQzMyIG9mIGZpbGVzLiBXZSBkbyBub3QgY2FjaGUgZGVjb21wcmVzc2VkIGZpbGVzOyBpZiB0aGlzIGlzIGEgZGVzaXJlZFxuICogZmVhdHVyZSwgaXQgaXMgYmVzdCBpbXBsZW1lbnRlZCBhcyBhIGdlbmVyaWMgZmlsZSBzeXN0ZW0gd3JhcHBlciB0aGF0IGNhblxuICogY2FjaGUgZGF0YSBmcm9tIGFyYml0cmFyeSBmaWxlIHN5c3RlbXMuXG4gKlxuICogRm9yIGluZmxhdGlvbiwgd2UgdXNlIGBwYWpvYCdzIGltcGxlbWVudGF0aW9uOlxuICogaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvXG4gKlxuICogVW5mb3J0dW5hdGVseSwgdGhlaXIgaW1wbGVtZW50YXRpb24gZmFsbHMgYmFjayB0byBhbiBhcnJheSBvZiBieXRlcyBmb3Igbm9uLVxuICogVHlwZWRBcnJheSBicm93c2Vycywgd2hpY2ggaXMgcmVzdWx0cyBpbiBhIG11Y2ggbGFyZ2VyIG1lbW9yeSBmb290cHJpbnQgaW5cbiAqIHRob3NlIGJyb3dzZXJzLiBQZXJoYXBzIG9uZSBkYXkgd2UnbGwgaGF2ZSBhbiBpbXBsZW1lbnRhdGlvbiBvZiBpbmZsYXRlIHRoYXRcbiAqIHdvcmtzIG9uIEJ1ZmZlcnM/IDopXG4gKlxuICogQ3VycmVudCBsaW1pdGF0aW9uczpcbiAqICogTm8gZW5jcnlwdGlvbi5cbiAqICogTm8gWklQNjQgc3VwcG9ydC5cbiAqICogUmVhZC1vbmx5LlxuICogICBXcml0ZSBzdXBwb3J0IHdvdWxkIHJlcXVpcmUgdGhhdCB3ZTpcbiAqICAgLSBLZWVwIHRyYWNrIG9mIGNoYW5nZWQvbmV3IGZpbGVzLlxuICogICAtIENvbXByZXNzIGNoYW5nZWQgZmlsZXMsIGFuZCBnZW5lcmF0ZSBhcHByb3ByaWF0ZSBtZXRhZGF0YSBmb3IgZWFjaC5cbiAqICAgLSBVcGRhdGUgZmlsZSBvZmZzZXRzIGZvciBvdGhlciBmaWxlcyBpbiB0aGUgemlwIGZpbGUuXG4gKiAgIC0gU3RyZWFtIGl0IG91dCB0byBhIGxvY2F0aW9uLlxuICogICBUaGlzIGlzbid0IHRoYXQgYmFkLCBzbyB3ZSBtaWdodCBkbyB0aGlzIGF0IGEgbGF0ZXIgZGF0ZS5cbiAqL1xuaW1wb3J0IHtBcGlFcnJvciwgRXJyb3JDb2RlfSBmcm9tICcuLi9jb3JlL2FwaV9lcnJvcic7XG5pbXBvcnQgbm9kZV9mc19zdGF0cyA9IHJlcXVpcmUoJy4uL2NvcmUvbm9kZV9mc19zdGF0cycpO1xuaW1wb3J0IGZpbGVfc3lzdGVtID0gcmVxdWlyZSgnLi4vY29yZS9maWxlX3N5c3RlbScpO1xuaW1wb3J0IGZpbGUgPSByZXF1aXJlKCcuLi9jb3JlL2ZpbGUnKTtcbmltcG9ydCB7RmlsZUZsYWcsIEFjdGlvblR5cGV9IGZyb20gJy4uL2NvcmUvZmlsZV9mbGFnJztcbmltcG9ydCBwcmVsb2FkX2ZpbGUgPSByZXF1aXJlKCcuLi9nZW5lcmljL3ByZWxvYWRfZmlsZScpO1xuaW1wb3J0IHtBcnJheWlzaCwgYnVmZmVyMkFycmF5aXNoLCBhcnJheWlzaDJCdWZmZXIsIGNvcHlpbmdTbGljZX0gZnJvbSAnLi4vY29yZS91dGlsJztcbnZhciBpbmZsYXRlUmF3OiB7XG4gIChkYXRhOiBBcnJheWlzaDxudW1iZXI+LCBvcHRpb25zPzoge1xuICAgIGNodW5rU2l6ZTogbnVtYmVyO1xuICB9KTogQXJyYXlpc2g8bnVtYmVyPjtcbn0gPSByZXF1aXJlKCdwYWtvL2Rpc3QvcGFrb19pbmZsYXRlLm1pbicpLmluZmxhdGVSYXc7XG5pbXBvcnQge0ZpbGVJbmRleCwgRGlySW5vZGUsIEZpbGVJbm9kZSwgaXNEaXJJbm9kZSwgaXNGaWxlSW5vZGV9IGZyb20gJy4uL2dlbmVyaWMvZmlsZV9pbmRleCc7XG5cblxuLyoqXG4gKiA0LjQuMi4yOiBJbmRpY2F0ZXMgdGhlIGNvbXBhdGliaWx0aXkgb2YgYSBmaWxlJ3MgZXh0ZXJuYWwgYXR0cmlidXRlcy5cbiAqL1xuZXhwb3J0IGVudW0gRXh0ZXJuYWxGaWxlQXR0cmlidXRlVHlwZSB7XG4gIE1TRE9TID0gMCwgQU1JR0EgPSAxLCBPUEVOVk1TID0gMiwgVU5JWCA9IDMsIFZNX0NNUyA9IDQsIEFUQVJJX1NUID0gNSxcbiAgT1MyX0hQRlMgPSA2LCBNQUMgPSA3LCBaX1NZU1RFTSA9IDgsIENQX00gPSA5LCBOVEZTID0gMTAsIE1WUyA9IDExLCBWU0UgPSAxMixcbiAgQUNPUk5fUklTQyA9IDEzLCBWRkFUID0gMTQsIEFMVF9NVlMgPSAxNSwgQkVPUyA9IDE2LCBUQU5ERU0gPSAxNywgT1NfNDAwID0gMTgsXG4gIE9TWCA9IDE5XG59XG5cbi8qKlxuICogNC40LjVcbiAqL1xuZXhwb3J0IGVudW0gQ29tcHJlc3Npb25NZXRob2Qge1xuICBTVE9SRUQgPSAwLCAgICAgLy8gVGhlIGZpbGUgaXMgc3RvcmVkIChubyBjb21wcmVzc2lvbilcbiAgU0hSVU5LID0gMSwgICAgIC8vIFRoZSBmaWxlIGlzIFNocnVua1xuICBSRURVQ0VEXzEgPSAyLCAgLy8gVGhlIGZpbGUgaXMgUmVkdWNlZCB3aXRoIGNvbXByZXNzaW9uIGZhY3RvciAxXG4gIFJFRFVDRURfMiA9IDMsICAvLyBUaGUgZmlsZSBpcyBSZWR1Y2VkIHdpdGggY29tcHJlc3Npb24gZmFjdG9yIDJcbiAgUkVEVUNFRF8zID0gNCwgIC8vIFRoZSBmaWxlIGlzIFJlZHVjZWQgd2l0aCBjb21wcmVzc2lvbiBmYWN0b3IgM1xuICBSRURVQ0VEXzQgPSA1LCAgLy8gVGhlIGZpbGUgaXMgUmVkdWNlZCB3aXRoIGNvbXByZXNzaW9uIGZhY3RvciA0XG4gIElNUExPREUgPSA2LCAgICAvLyBUaGUgZmlsZSBpcyBJbXBsb2RlZFxuICBERUZMQVRFID0gOCwgICAgLy8gVGhlIGZpbGUgaXMgRGVmbGF0ZWRcbiAgREVGTEFURTY0ID0gOSwgIC8vIEVuaGFuY2VkIERlZmxhdGluZyB1c2luZyBEZWZsYXRlNjQodG0pXG4gIFRFUlNFX09MRCA9IDEwLCAvLyBQS1dBUkUgRGF0YSBDb21wcmVzc2lvbiBMaWJyYXJ5IEltcGxvZGluZyAob2xkIElCTSBURVJTRSlcbiAgQlpJUDIgPSAxMiwgICAgIC8vIEZpbGUgaXMgY29tcHJlc3NlZCB1c2luZyBCWklQMiBhbGdvcml0aG1cbiAgTFpNQSA9IDE0LCAgICAgIC8vIExaTUEgKEVGUylcbiAgVEVSU0VfTkVXID0gMTgsIC8vIEZpbGUgaXMgY29tcHJlc3NlZCB1c2luZyBJQk0gVEVSU0UgKG5ldylcbiAgTFo3NyA9IDE5LCAgICAgIC8vIElCTSBMWjc3IHogQXJjaGl0ZWN0dXJlIChQRlMpXG4gIFdBVlBBQ0sgPSA5NywgICAvLyBXYXZQYWNrIGNvbXByZXNzZWQgZGF0YVxuICBQUE1EID0gOTggICAgICAgLy8gUFBNZCB2ZXJzaW9uIEksIFJldiAxXG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGlucHV0IHRpbWUgYW5kIGRhdGUgaW4gTVMtRE9TIGZvcm1hdCBpbnRvIGEgSmF2YVNjcmlwdCBEYXRlXG4gKiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIG1zZG9zMmRhdGUodGltZTogbnVtYmVyLCBkYXRlOiBudW1iZXIpOiBEYXRlIHtcbiAgLy8gTVMtRE9TIERhdGVcbiAgLy98MCAwIDAgMCAgMHwwIDAgMCAgMHwwIDAgMCAgMCAwIDAgMFxuICAvLyAgRCAoMS0zMSkgIE0gKDEtMjMpICBZIChmcm9tIDE5ODApXG4gIHZhciBkYXkgPSBkYXRlICYgMHgxRjtcbiAgLy8gSlMgZGF0ZSBpcyAwLWluZGV4ZWQsIERPUyBpcyAxLWluZGV4ZWQuXG4gIHZhciBtb250aCA9ICgoZGF0ZSA+PiA1KSAmIDB4RikgLSAxO1xuICB2YXIgeWVhciA9IChkYXRlID4+IDkpICsgMTk4MDtcbiAgLy8gTVMgRE9TIFRpbWVcbiAgLy98MCAwIDAgMCAgMHwwIDAgMCAgMCAwIDB8MCAgMCAwIDAgMFxuICAvLyAgIFNlY29uZCAgICAgIE1pbnV0ZSAgICAgICBIb3VyXG4gIHZhciBzZWNvbmQgPSB0aW1lICYgMHgxRjtcbiAgdmFyIG1pbnV0ZSA9ICh0aW1lID4+IDUpICYgMHgzRjtcbiAgdmFyIGhvdXIgPSB0aW1lID4+IDExO1xuICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQpO1xufVxuXG4vKipcbiAqIFNhZmVseSByZXR1cm5zIHRoZSBzdHJpbmcgZnJvbSB0aGUgYnVmZmVyLCBldmVuIGlmIGl0IGlzIDAgYnl0ZXMgbG9uZy5cbiAqIChOb3JtYWxseSwgY2FsbGluZyB0b1N0cmluZygpIG9uIGEgYnVmZmVyIHdpdGggc3RhcnQgPT09IGVuZCBjYXVzZXMgYW5cbiAqIGV4Y2VwdGlvbikuXG4gKi9cbmZ1bmN0aW9uIHNhZmVUb1N0cmluZyhidWZmOiBOb2RlQnVmZmVyLCB1c2VVVEY4OiBib29sZWFuLCBzdGFydDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gIHJldHVybiBsZW5ndGggPT09IDAgPyBcIlwiIDogYnVmZi50b1N0cmluZyh1c2VVVEY4ID8gJ3V0ZjgnIDogJ2V4dGVuZGVkX2FzY2lpJywgc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKTtcbn1cblxuLypcbiAgIDQuMy42IE92ZXJhbGwgLlpJUCBmaWxlIGZvcm1hdDpcblxuICAgICAgW2xvY2FsIGZpbGUgaGVhZGVyIDFdXG4gICAgICBbZW5jcnlwdGlvbiBoZWFkZXIgMV1cbiAgICAgIFtmaWxlIGRhdGEgMV1cbiAgICAgIFtkYXRhIGRlc2NyaXB0b3IgMV1cbiAgICAgIC5cbiAgICAgIC5cbiAgICAgIC5cbiAgICAgIFtsb2NhbCBmaWxlIGhlYWRlciBuXVxuICAgICAgW2VuY3J5cHRpb24gaGVhZGVyIG5dXG4gICAgICBbZmlsZSBkYXRhIG5dXG4gICAgICBbZGF0YSBkZXNjcmlwdG9yIG5dXG4gICAgICBbYXJjaGl2ZSBkZWNyeXB0aW9uIGhlYWRlcl1cbiAgICAgIFthcmNoaXZlIGV4dHJhIGRhdGEgcmVjb3JkXVxuICAgICAgW2NlbnRyYWwgZGlyZWN0b3J5IGhlYWRlciAxXVxuICAgICAgLlxuICAgICAgLlxuICAgICAgLlxuICAgICAgW2NlbnRyYWwgZGlyZWN0b3J5IGhlYWRlciBuXVxuICAgICAgW3ppcDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSByZWNvcmRdXG4gICAgICBbemlwNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JdXG4gICAgICBbZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IHJlY29yZF1cbiovXG5cbi8qXG4gNC4zLjcgIExvY2FsIGZpbGUgaGVhZGVyOlxuXG4gICAgICBsb2NhbCBmaWxlIGhlYWRlciBzaWduYXR1cmUgICAgIDQgYnl0ZXMgICgweDA0MDM0YjUwKVxuICAgICAgdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdCAgICAgICAyIGJ5dGVzXG4gICAgICBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWcgICAgICAgIDIgYnl0ZXNcbiAgICAgIGNvbXByZXNzaW9uIG1ldGhvZCAgICAgICAgICAgICAgMiBieXRlc1xuICAgICAgbGFzdCBtb2QgZmlsZSB0aW1lICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgICBsYXN0IG1vZCBmaWxlIGRhdGUgICAgICAgICAgICAgIDIgYnl0ZXNcbiAgICAgIGNyYy0zMiAgICAgICAgICAgICAgICAgICAgICAgICAgNCBieXRlc1xuICAgICAgY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgICB1bmNvbXByZXNzZWQgc2l6ZSAgICAgICAgICAgICAgIDQgYnl0ZXNcbiAgICAgIGZpbGUgbmFtZSBsZW5ndGggICAgICAgICAgICAgICAgMiBieXRlc1xuICAgICAgZXh0cmEgZmllbGQgbGVuZ3RoICAgICAgICAgICAgICAyIGJ5dGVzXG5cbiAgICAgIGZpbGUgbmFtZSAodmFyaWFibGUgc2l6ZSlcbiAgICAgIGV4dHJhIGZpZWxkICh2YXJpYWJsZSBzaXplKVxuICovXG5leHBvcnQgY2xhc3MgRmlsZUhlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogTm9kZUJ1ZmZlcikge1xuICAgIGlmIChkYXRhLnJlYWRVSW50MzJMRSgwKSAhPT0gMHgwNDAzNGI1MCkge1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiSW52YWxpZCBaaXAgZmlsZTogTG9jYWwgZmlsZSBoZWFkZXIgaGFzIGludmFsaWQgc2lnbmF0dXJlOiBcIiArIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMCkpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgdmVyc2lvbk5lZWRlZCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg0KTsgfVxuICBwdWJsaWMgZmxhZ3MoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoNik7IH1cbiAgcHVibGljIGNvbXByZXNzaW9uTWV0aG9kKCk6IENvbXByZXNzaW9uTWV0aG9kIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoOCk7IH1cbiAgcHVibGljIGxhc3RNb2RGaWxlVGltZSgpOiBEYXRlIHtcbiAgICAvLyBUaW1lIGFuZCBkYXRlIGlzIGluIE1TLURPUyBmb3JtYXQuXG4gICAgcmV0dXJuIG1zZG9zMmRhdGUodGhpcy5kYXRhLnJlYWRVSW50MTZMRSgxMCksIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoMTIpKTtcbiAgfVxuICBwdWJsaWMgY3JjMzIoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMTQpOyB9XG4gIC8qKlxuICAgKiBUaGVzZSB0d28gdmFsdWVzIGFyZSBDT01QTEVURUxZIFVTRUxFU1MuXG4gICAqXG4gICAqIFNlY3Rpb24gNC40Ljk6XG4gICAqICAgSWYgYml0IDMgb2YgdGhlIGdlbmVyYWwgcHVycG9zZSBiaXQgZmxhZyBpcyBzZXQsXG4gICAqICAgdGhlc2UgZmllbGRzIGFyZSBzZXQgdG8gemVybyBpbiB0aGUgbG9jYWwgaGVhZGVyIGFuZCB0aGVcbiAgICogICBjb3JyZWN0IHZhbHVlcyBhcmUgcHV0IGluIHRoZSBkYXRhIGRlc2NyaXB0b3IgYW5kXG4gICAqICAgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5LlxuICAgKlxuICAgKiBTbyB3ZSdsbCBqdXN0IHVzZSB0aGUgY2VudHJhbCBkaXJlY3RvcnkncyB2YWx1ZXMuXG4gICAqL1xuICAvLyBwdWJsaWMgY29tcHJlc3NlZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMTgpOyB9XG4gIC8vIHB1YmxpYyB1bmNvbXByZXNzZWRTaXplKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDIyKTsgfVxuICBwdWJsaWMgZmlsZU5hbWVMZW5ndGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoMjYpOyB9XG4gIHB1YmxpYyBleHRyYUZpZWxkTGVuZ3RoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDI4KTsgfVxuICBwdWJsaWMgZmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc2FmZVRvU3RyaW5nKHRoaXMuZGF0YSwgdGhpcy51c2VVVEY4KCksIDMwLCB0aGlzLmZpbGVOYW1lTGVuZ3RoKCkpO1xuICB9XG4gIHB1YmxpYyBleHRyYUZpZWxkKCk6IE5vZGVCdWZmZXIge1xuICAgIHZhciBzdGFydCA9IDMwICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpO1xuICAgIHJldHVybiB0aGlzLmRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCkpO1xuICB9XG4gIHB1YmxpYyB0b3RhbFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIDMwICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCk7IH1cbiAgcHVibGljIHVzZVVURjgoKTogYm9vbGVhbiB7IHJldHVybiAodGhpcy5mbGFncygpICYgMHg4MDApID09PSAweDgwMDsgfVxufVxuXG4vKipcbiAgNC4zLjggIEZpbGUgZGF0YVxuXG4gICAgSW1tZWRpYXRlbHkgZm9sbG93aW5nIHRoZSBsb2NhbCBoZWFkZXIgZm9yIGEgZmlsZVxuICAgIFNIT1VMRCBiZSBwbGFjZWQgdGhlIGNvbXByZXNzZWQgb3Igc3RvcmVkIGRhdGEgZm9yIHRoZSBmaWxlLlxuICAgIElmIHRoZSBmaWxlIGlzIGVuY3J5cHRlZCwgdGhlIGVuY3J5cHRpb24gaGVhZGVyIGZvciB0aGUgZmlsZVxuICAgIFNIT1VMRCBiZSBwbGFjZWQgYWZ0ZXIgdGhlIGxvY2FsIGhlYWRlciBhbmQgYmVmb3JlIHRoZSBmaWxlXG4gICAgZGF0YS4gVGhlIHNlcmllcyBvZiBbbG9jYWwgZmlsZSBoZWFkZXJdW2VuY3J5cHRpb24gaGVhZGVyXVxuICAgIFtmaWxlIGRhdGFdW2RhdGEgZGVzY3JpcHRvcl0gcmVwZWF0cyBmb3IgZWFjaCBmaWxlIGluIHRoZVxuICAgIC5aSVAgYXJjaGl2ZS5cblxuICAgIFplcm8tYnl0ZSBmaWxlcywgZGlyZWN0b3JpZXMsIGFuZCBvdGhlciBmaWxlIHR5cGVzIHRoYXRcbiAgICBjb250YWluIG5vIGNvbnRlbnQgTVVTVCBub3QgaW5jbHVkZSBmaWxlIGRhdGEuXG4qL1xuZXhwb3J0IGNsYXNzIEZpbGVEYXRhIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBoZWFkZXI6IEZpbGVIZWFkZXIsIHByaXZhdGUgcmVjb3JkOiBDZW50cmFsRGlyZWN0b3J5LCBwcml2YXRlIGRhdGE6IE5vZGVCdWZmZXIpIHt9XG4gIHB1YmxpYyBkZWNvbXByZXNzKCk6IE5vZGVCdWZmZXIge1xuICAgIC8vIENoZWNrIHRoZSBjb21wcmVzc2lvblxuICAgIHZhciBjb21wcmVzc2lvbk1ldGhvZDogQ29tcHJlc3Npb25NZXRob2QgPSB0aGlzLmhlYWRlci5jb21wcmVzc2lvbk1ldGhvZCgpO1xuICAgIHN3aXRjaCAoY29tcHJlc3Npb25NZXRob2QpIHtcbiAgICAgIGNhc2UgQ29tcHJlc3Npb25NZXRob2QuREVGTEFURTpcbiAgICAgICAgdmFyIGRhdGEgPSBpbmZsYXRlUmF3KFxuICAgICAgICAgIGJ1ZmZlcjJBcnJheWlzaCh0aGlzLmRhdGEuc2xpY2UoMCwgdGhpcy5yZWNvcmQuY29tcHJlc3NlZFNpemUoKSkpLFxuICAgICAgICAgIHsgY2h1bmtTaXplOiB0aGlzLnJlY29yZC51bmNvbXByZXNzZWRTaXplKCkgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYXJyYXlpc2gyQnVmZmVyKGRhdGEpO1xuICAgICAgY2FzZSBDb21wcmVzc2lvbk1ldGhvZC5TVE9SRUQ6XG4gICAgICAgIC8vIEdyYWIgYW5kIGNvcHkuXG4gICAgICAgIHJldHVybiBjb3B5aW5nU2xpY2UodGhpcy5kYXRhLCAwLCB0aGlzLnJlY29yZC51bmNvbXByZXNzZWRTaXplKCkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIG5hbWU6IHN0cmluZyA9IENvbXByZXNzaW9uTWV0aG9kW2NvbXByZXNzaW9uTWV0aG9kXTtcbiAgICAgICAgbmFtZSA9IG5hbWUgPyBuYW1lIDogXCJVbmtub3duOiBcIiArIGNvbXByZXNzaW9uTWV0aG9kO1xuICAgICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIGNvbXByZXNzaW9uIG1ldGhvZCBvbiBmaWxlICdcIiArIHRoaXMuaGVhZGVyLmZpbGVOYW1lKCkgKyBcIic6IFwiICsgbmFtZSk7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gNC4zLjkgIERhdGEgZGVzY3JpcHRvcjpcblxuICAgICAgY3JjLTMyICAgICAgICAgICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgICBjb21wcmVzc2VkIHNpemUgICAgICAgICAgICAgICAgIDQgYnl0ZXNcbiAgICAgIHVuY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgNCBieXRlc1xuICovXG5leHBvcnQgY2xhc3MgRGF0YURlc2NyaXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGE6IE5vZGVCdWZmZXIpIHt9XG4gIHB1YmxpYyBjcmMzMigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKTsgfVxuICBwdWJsaWMgY29tcHJlc3NlZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoNCk7IH1cbiAgcHVibGljIHVuY29tcHJlc3NlZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoOCk7IH1cbn1cblxuLypcbmAgNC4zLjEwICBBcmNoaXZlIGRlY3J5cHRpb24gaGVhZGVyOlxuXG4gICAgICA0LjMuMTAuMSBUaGUgQXJjaGl2ZSBEZWNyeXB0aW9uIEhlYWRlciBpcyBpbnRyb2R1Y2VkIGluIHZlcnNpb24gNi4yXG4gICAgICBvZiB0aGUgWklQIGZvcm1hdCBzcGVjaWZpY2F0aW9uLiAgVGhpcyByZWNvcmQgZXhpc3RzIGluIHN1cHBvcnRcbiAgICAgIG9mIHRoZSBDZW50cmFsIERpcmVjdG9yeSBFbmNyeXB0aW9uIEZlYXR1cmUgaW1wbGVtZW50ZWQgYXMgcGFydCBvZlxuICAgICAgdGhlIFN0cm9uZyBFbmNyeXB0aW9uIFNwZWNpZmljYXRpb24gYXMgZGVzY3JpYmVkIGluIHRoaXMgZG9jdW1lbnQuXG4gICAgICBXaGVuIHRoZSBDZW50cmFsIERpcmVjdG9yeSBTdHJ1Y3R1cmUgaXMgZW5jcnlwdGVkLCB0aGlzIGRlY3J5cHRpb25cbiAgICAgIGhlYWRlciBNVVNUIHByZWNlZGUgdGhlIGVuY3J5cHRlZCBkYXRhIHNlZ21lbnQuXG4gKi9cbi8qXG4gIDQuMy4xMSAgQXJjaGl2ZSBleHRyYSBkYXRhIHJlY29yZDpcblxuICAgICAgICBhcmNoaXZlIGV4dHJhIGRhdGEgc2lnbmF0dXJlICAgIDQgYnl0ZXMgICgweDA4MDY0YjUwKVxuICAgICAgICBleHRyYSBmaWVsZCBsZW5ndGggICAgICAgICAgICAgIDQgYnl0ZXNcbiAgICAgICAgZXh0cmEgZmllbGQgZGF0YSAgICAgICAgICAgICAgICAodmFyaWFibGUgc2l6ZSlcblxuICAgICAgNC4zLjExLjEgVGhlIEFyY2hpdmUgRXh0cmEgRGF0YSBSZWNvcmQgaXMgaW50cm9kdWNlZCBpbiB2ZXJzaW9uIDYuMlxuICAgICAgb2YgdGhlIFpJUCBmb3JtYXQgc3BlY2lmaWNhdGlvbi4gIFRoaXMgcmVjb3JkIE1BWSBiZSB1c2VkIGluIHN1cHBvcnRcbiAgICAgIG9mIHRoZSBDZW50cmFsIERpcmVjdG9yeSBFbmNyeXB0aW9uIEZlYXR1cmUgaW1wbGVtZW50ZWQgYXMgcGFydCBvZlxuICAgICAgdGhlIFN0cm9uZyBFbmNyeXB0aW9uIFNwZWNpZmljYXRpb24gYXMgZGVzY3JpYmVkIGluIHRoaXMgZG9jdW1lbnQuXG4gICAgICBXaGVuIHByZXNlbnQsIHRoaXMgcmVjb3JkIE1VU1QgaW1tZWRpYXRlbHkgcHJlY2VkZSB0aGUgY2VudHJhbFxuICAgICAgZGlyZWN0b3J5IGRhdGEgc3RydWN0dXJlLlxuKi9cbmV4cG9ydCBjbGFzcyBBcmNoaXZlRXh0cmFEYXRhUmVjb3JkIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRhOiBOb2RlQnVmZmVyKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMCkgIT09IDB4MDgwNjRiNTApIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBcIkludmFsaWQgYXJjaGl2ZSBleHRyYSBkYXRhIHJlY29yZCBzaWduYXR1cmU6IFwiICsgdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBsZW5ndGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoNCk7IH1cbiAgcHVibGljIGV4dHJhRmllbGREYXRhKCk6IE5vZGVCdWZmZXIgeyByZXR1cm4gdGhpcy5kYXRhLnNsaWNlKDgsIDggKyB0aGlzLmxlbmd0aCgpKTsgfVxufVxuXG4vKlxuICA0LjMuMTMgRGlnaXRhbCBzaWduYXR1cmU6XG5cbiAgICAgICAgaGVhZGVyIHNpZ25hdHVyZSAgICAgICAgICAgICAgICA0IGJ5dGVzICAoMHgwNTA1NGI1MClcbiAgICAgICAgc2l6ZSBvZiBkYXRhICAgICAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgICAgIHNpZ25hdHVyZSBkYXRhICh2YXJpYWJsZSBzaXplKVxuXG4gICAgICBXaXRoIHRoZSBpbnRyb2R1Y3Rpb24gb2YgdGhlIENlbnRyYWwgRGlyZWN0b3J5IEVuY3J5cHRpb25cbiAgICAgIGZlYXR1cmUgaW4gdmVyc2lvbiA2LjIgb2YgdGhpcyBzcGVjaWZpY2F0aW9uLCB0aGUgQ2VudHJhbFxuICAgICAgRGlyZWN0b3J5IFN0cnVjdHVyZSBNQVkgYmUgc3RvcmVkIGJvdGggY29tcHJlc3NlZCBhbmQgZW5jcnlwdGVkLlxuICAgICAgQWx0aG91Z2ggbm90IHJlcXVpcmVkLCBpdCBpcyBhc3N1bWVkIHdoZW4gZW5jcnlwdGluZyB0aGVcbiAgICAgIENlbnRyYWwgRGlyZWN0b3J5IFN0cnVjdHVyZSwgdGhhdCBpdCB3aWxsIGJlIGNvbXByZXNzZWRcbiAgICAgIGZvciBncmVhdGVyIHN0b3JhZ2UgZWZmaWNpZW5jeS4gIEluZm9ybWF0aW9uIG9uIHRoZVxuICAgICAgQ2VudHJhbCBEaXJlY3RvcnkgRW5jcnlwdGlvbiBmZWF0dXJlIGNhbiBiZSBmb3VuZCBpbiB0aGUgc2VjdGlvblxuICAgICAgZGVzY3JpYmluZyB0aGUgU3Ryb25nIEVuY3J5cHRpb24gU3BlY2lmaWNhdGlvbi4gVGhlIERpZ2l0YWxcbiAgICAgIFNpZ25hdHVyZSByZWNvcmQgd2lsbCBiZSBuZWl0aGVyIGNvbXByZXNzZWQgbm9yIGVuY3J5cHRlZC5cbiovXG5leHBvcnQgY2xhc3MgRGlnaXRhbFNpZ25hdHVyZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogTm9kZUJ1ZmZlcikge1xuICAgIGlmICh0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApICE9PSAweDA1MDU0YjUwKSB7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIGRpZ2l0YWwgc2lnbmF0dXJlIHNpZ25hdHVyZTogXCIgKyB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoNCk7IH1cbiAgcHVibGljIHNpZ25hdHVyZURhdGEoKTogTm9kZUJ1ZmZlciB7IHJldHVybiB0aGlzLmRhdGEuc2xpY2UoNiwgNiArIHRoaXMuc2l6ZSgpKTsgfVxufVxuXG4vKlxuICA0LjMuMTIgIENlbnRyYWwgZGlyZWN0b3J5IHN0cnVjdHVyZTpcblxuICAgIGNlbnRyYWwgZmlsZSBoZWFkZXIgc2lnbmF0dXJlICAgNCBieXRlcyAgKDB4MDIwMTRiNTApXG4gICAgdmVyc2lvbiBtYWRlIGJ5ICAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdCAgICAgICAyIGJ5dGVzXG4gICAgZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnICAgICAgICAyIGJ5dGVzXG4gICAgY29tcHJlc3Npb24gbWV0aG9kICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgbGFzdCBtb2QgZmlsZSB0aW1lICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgbGFzdCBtb2QgZmlsZSBkYXRlICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgY3JjLTMyICAgICAgICAgICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgdW5jb21wcmVzc2VkIHNpemUgICAgICAgICAgICAgICA0IGJ5dGVzXG4gICAgZmlsZSBuYW1lIGxlbmd0aCAgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgZXh0cmEgZmllbGQgbGVuZ3RoICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgZmlsZSBjb21tZW50IGxlbmd0aCAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgZGlzayBudW1iZXIgc3RhcnQgICAgICAgICAgICAgICAyIGJ5dGVzXG4gICAgaW50ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzICAgICAgICAyIGJ5dGVzXG4gICAgZXh0ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzICAgICAgICA0IGJ5dGVzXG4gICAgcmVsYXRpdmUgb2Zmc2V0IG9mIGxvY2FsIGhlYWRlciA0IGJ5dGVzXG5cbiAgICBmaWxlIG5hbWUgKHZhcmlhYmxlIHNpemUpXG4gICAgZXh0cmEgZmllbGQgKHZhcmlhYmxlIHNpemUpXG4gICAgZmlsZSBjb21tZW50ICh2YXJpYWJsZSBzaXplKVxuICovXG5leHBvcnQgY2xhc3MgQ2VudHJhbERpcmVjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgemlwRGF0YTogTm9kZUJ1ZmZlciwgcHJpdmF0ZSBkYXRhOiBOb2RlQnVmZmVyKSB7XG4gICAgLy8gU2FuaXR5IGNoZWNrLlxuICAgIGlmICh0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApICE9PSAweDAyMDE0YjUwKVxuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKEVycm9yQ29kZS5FSU5WQUwsIFwiSW52YWxpZCBaaXAgZmlsZTogQ2VudHJhbCBkaXJlY3RvcnkgcmVjb3JkIGhhcyBpbnZhbGlkIHNpZ25hdHVyZTogXCIgKyB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDApKTtcbiAgfVxuICBwdWJsaWMgdmVyc2lvbk1hZGVCeSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg0KTsgfVxuICBwdWJsaWMgdmVyc2lvbk5lZWRlZCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg2KTsgfVxuICBwdWJsaWMgZmxhZygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSg4KTsgfVxuICBwdWJsaWMgY29tcHJlc3Npb25NZXRob2QoKTogQ29tcHJlc3Npb25NZXRob2QgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgxMCk7IH1cbiAgcHVibGljIGxhc3RNb2RGaWxlVGltZSgpOiBEYXRlIHtcbiAgICAvLyBUaW1lIGFuZCBkYXRlIGlzIGluIE1TLURPUyBmb3JtYXQuXG4gICAgcmV0dXJuIG1zZG9zMmRhdGUodGhpcy5kYXRhLnJlYWRVSW50MTZMRSgxMiksIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoMTQpKTtcbiAgfVxuICBwdWJsaWMgY3JjMzIoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMTYpOyB9XG4gIHB1YmxpYyBjb21wcmVzc2VkU2l6ZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgyMCk7IH1cbiAgcHVibGljIHVuY29tcHJlc3NlZFNpemUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMjQpOyB9XG4gIHB1YmxpYyBmaWxlTmFtZUxlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgyOCk7IH1cbiAgcHVibGljIGV4dHJhRmllbGRMZW5ndGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoMzApOyB9XG4gIHB1YmxpYyBmaWxlQ29tbWVudExlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgzMik7IH1cbiAgcHVibGljIGRpc2tOdW1iZXJTdGFydCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgzNCk7IH1cbiAgcHVibGljIGludGVybmFsQXR0cmlidXRlcygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgzNik7IH1cbiAgcHVibGljIGV4dGVybmFsQXR0cmlidXRlcygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5kYXRhLnJlYWRVSW50MzJMRSgzOCk7IH1cbiAgcHVibGljIGhlYWRlclJlbGF0aXZlT2Zmc2V0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDQyKTsgfVxuICBwdWJsaWMgZmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICAvKlxuICAgICAgNC40LjE3LjEgY2xhaW1zOlxuICAgICAgKiBBbGwgc2xhc2hlcyBhcmUgZm9yd2FyZCAoJy8nKSBzbGFzaGVzLlxuICAgICAgKiBGaWxlbmFtZSBkb2Vzbid0IGJlZ2luIHdpdGggYSBzbGFzaC5cbiAgICAgICogTm8gZHJpdmUgbGV0dGVycyBvciBhbnkgbm9uc2Vuc2UgbGlrZSB0aGF0LlxuICAgICAgKiBJZiBmaWxlbmFtZSBpcyBtaXNzaW5nLCB0aGUgaW5wdXQgY2FtZSBmcm9tIHN0YW5kYXJkIGlucHV0LlxuXG4gICAgICBVbmZvcnR1bmF0ZWx5LCB0aGlzIGlzbid0IHRydWUgaW4gcHJhY3RpY2UuIFNvbWUgV2luZG93cyB6aXAgdXRpbGl0aWVzIHVzZVxuICAgICAgYSBiYWNrc2xhc2ggaGVyZSwgYnV0IHRoZSBjb3JyZWN0IFVuaXgtc3R5bGUgcGF0aCBpbiBmaWxlIGhlYWRlcnMuXG5cbiAgICAgIFRvIGF2b2lkIHNlZWtpbmcgYWxsIG92ZXIgdGhlIGZpbGUgdG8gcmVjb3ZlciB0aGUga25vd24tZ29vZCBmaWxlbmFtZXNcbiAgICAgIGZyb20gZmlsZSBoZWFkZXJzLCB3ZSBzaW1wbHkgY29udmVydCAnLycgdG8gJ1xcJyBoZXJlLlxuICAgICovXG4gICAgdmFyIGZpbGVOYW1lOiBzdHJpbmcgPSBzYWZlVG9TdHJpbmcodGhpcy5kYXRhLCB0aGlzLnVzZVVURjgoKSwgNDYsIHRoaXMuZmlsZU5hbWVMZW5ndGgoKSk7XG4gICAgcmV0dXJuIGZpbGVOYW1lLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpO1xuICB9XG4gIHB1YmxpYyBleHRyYUZpZWxkKCk6IE5vZGVCdWZmZXIge1xuICAgIHZhciBzdGFydCA9IDQ0ICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpO1xuICAgIHJldHVybiB0aGlzLmRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCkpO1xuICB9XG4gIHB1YmxpYyBmaWxlQ29tbWVudCgpOiBzdHJpbmcge1xuICAgIHZhciBzdGFydCA9IDQ2ICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCk7XG4gICAgcmV0dXJuIHNhZmVUb1N0cmluZyh0aGlzLmRhdGEsIHRoaXMudXNlVVRGOCgpLCBzdGFydCwgdGhpcy5maWxlQ29tbWVudExlbmd0aCgpKTtcbiAgfVxuICBwdWJsaWMgdG90YWxTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDQ2ICsgdGhpcy5maWxlTmFtZUxlbmd0aCgpICsgdGhpcy5leHRyYUZpZWxkTGVuZ3RoKCkgKyB0aGlzLmZpbGVDb21tZW50TGVuZ3RoKCk7XG4gIH1cbiAgcHVibGljIGlzRGlyZWN0b3J5KCk6IGJvb2xlYW4ge1xuICAgIC8vIE5PVEU6IFRoaXMgYXNzdW1lcyB0aGF0IHRoZSB6aXAgZmlsZSBpbXBsZW1lbnRhdGlvbiB1c2VzIHRoZSBsb3dlciBieXRlXG4gICAgLy8gICAgICAgb2YgZXh0ZXJuYWwgYXR0cmlidXRlcyBmb3IgRE9TIGF0dHJpYnV0ZXMgZm9yXG4gICAgLy8gICAgICAgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuIFRoaXMgaXMgbm90IG1hbmRhdGVkLCBidXQgYXBwZWFycyB0byBiZVxuICAgIC8vICAgICAgIGNvbW1vbnBsYWNlLlxuICAgIC8vICAgICAgIEFjY29yZGluZyB0byB0aGUgc3BlYywgdGhlIGxheW91dCBvZiBleHRlcm5hbCBhdHRyaWJ1dGVzIGlzXG4gICAgLy8gICAgICAgcGxhdGZvcm0tZGVwZW5kZW50LlxuICAgIC8vICAgICAgIElmIHRoYXQgZmFpbHMsIHdlIGFsc28gY2hlY2sgaWYgdGhlIG5hbWUgb2YgdGhlIGZpbGUgZW5kcyBpbiAnLycsXG4gICAgLy8gICAgICAgd2hpY2ggaXMgd2hhdCBKYXZhJ3MgWmlwRmlsZSBpbXBsZW1lbnRhdGlvbiBkb2VzLlxuICAgIHZhciBmaWxlTmFtZSA9IHRoaXMuZmlsZU5hbWUoKTtcbiAgICByZXR1cm4gKHRoaXMuZXh0ZXJuYWxBdHRyaWJ1dGVzKCkgJiAweDEwID8gdHJ1ZSA6IGZhbHNlKSB8fCAoZmlsZU5hbWUuY2hhckF0KGZpbGVOYW1lLmxlbmd0aC0xKSA9PT0gJy8nKTtcbiAgfVxuICBwdWJsaWMgaXNGaWxlKCk6IGJvb2xlYW4geyByZXR1cm4gIXRoaXMuaXNEaXJlY3RvcnkoKTsgfVxuICBwdWJsaWMgdXNlVVRGOCgpOiBib29sZWFuIHsgcmV0dXJuICh0aGlzLmZsYWcoKSAmIDB4ODAwKSA9PT0gMHg4MDA7IH1cbiAgcHVibGljIGlzRW5jcnlwdGVkKCk6IGJvb2xlYW4geyByZXR1cm4gKHRoaXMuZmxhZygpICYgMHgxKSA9PT0gMHgxOyB9XG4gIHB1YmxpYyBnZXREYXRhKCk6IE5vZGVCdWZmZXIge1xuICAgIC8vIE5lZWQgdG8gZ3JhYiB0aGUgaGVhZGVyIGJlZm9yZSB3ZSBjYW4gZmlndXJlIG91dCB3aGVyZSB0aGUgYWN0dWFsXG4gICAgLy8gY29tcHJlc3NlZCBkYXRhIHN0YXJ0cy5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLmhlYWRlclJlbGF0aXZlT2Zmc2V0KCk7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBGaWxlSGVhZGVyKHRoaXMuemlwRGF0YS5zbGljZShzdGFydCkpO1xuICAgIHZhciBmaWxlZGF0YSA9IG5ldyBGaWxlRGF0YShoZWFkZXIsIHRoaXMsIHRoaXMuemlwRGF0YS5zbGljZShzdGFydCArIGhlYWRlci50b3RhbFNpemUoKSkpO1xuICAgIHJldHVybiBmaWxlZGF0YS5kZWNvbXByZXNzKCk7XG4gIH1cbiAgcHVibGljIGdldFN0YXRzKCk6IG5vZGVfZnNfc3RhdHMuU3RhdHMge1xuICAgIHJldHVybiBuZXcgbm9kZV9mc19zdGF0cy5TdGF0cyhub2RlX2ZzX3N0YXRzLkZpbGVUeXBlLkZJTEUsIHRoaXMudW5jb21wcmVzc2VkU2l6ZSgpLCAweDE2RCwgbmV3IERhdGUoKSwgdGhpcy5sYXN0TW9kRmlsZVRpbWUoKSk7XG4gIH1cbn1cblxuLypcbiAgNC4zLjE2OiBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgcmVjb3JkXG4gICAgZW5kIG9mIGNlbnRyYWwgZGlyIHNpZ25hdHVyZSAgICA0IGJ5dGVzICAoMHgwNjA1NGI1MClcbiAgICBudW1iZXIgb2YgdGhpcyBkaXNrICAgICAgICAgICAgIDIgYnl0ZXNcbiAgICBudW1iZXIgb2YgdGhlIGRpc2sgd2l0aCB0aGVcbiAgICBzdGFydCBvZiB0aGUgY2VudHJhbCBkaXJlY3RvcnkgIDIgYnl0ZXNcbiAgICB0b3RhbCBudW1iZXIgb2YgZW50cmllcyBpbiB0aGVcbiAgICBjZW50cmFsIGRpcmVjdG9yeSBvbiB0aGlzIGRpc2sgIDIgYnl0ZXNcbiAgICB0b3RhbCBudW1iZXIgb2YgZW50cmllcyBpblxuICAgIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAgICAgICAgICAgMiBieXRlc1xuICAgIHNpemUgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5ICAgNCBieXRlc1xuICAgIG9mZnNldCBvZiBzdGFydCBvZiBjZW50cmFsXG4gICAgZGlyZWN0b3J5IHdpdGggcmVzcGVjdCB0b1xuICAgIHRoZSBzdGFydGluZyBkaXNrIG51bWJlciAgICAgICAgNCBieXRlc1xuICAgIC5aSVAgZmlsZSBjb21tZW50IGxlbmd0aCAgICAgICAgMiBieXRlc1xuICAgIC5aSVAgZmlsZSBjb21tZW50ICAgICAgICh2YXJpYWJsZSBzaXplKVxuKi9cbmV4cG9ydCBjbGFzcyBFbmRPZkNlbnRyYWxEaXJlY3Rvcnkge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGE6IE5vZGVCdWZmZXIpIHtcbiAgICBpZiAodGhpcy5kYXRhLnJlYWRVSW50MzJMRSgwKSAhPT0gMHgwNjA1NGI1MClcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBcIkludmFsaWQgWmlwIGZpbGU6IEVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSByZWNvcmQgaGFzIGludmFsaWQgc2lnbmF0dXJlOiBcIiArIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMCkpO1xuICB9XG4gIHB1YmxpYyBkaXNrTnVtYmVyKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDQpOyB9XG4gIHB1YmxpYyBjZERpc2tOdW1iZXIoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoNik7IH1cbiAgcHVibGljIGNkRGlza0VudHJ5Q291bnQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDE2TEUoOCk7IH1cbiAgcHVibGljIGNkVG90YWxFbnRyeUNvdW50KCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQxNkxFKDEwKTsgfVxuICBwdWJsaWMgY2RTaXplKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGEucmVhZFVJbnQzMkxFKDEyKTsgfVxuICBwdWJsaWMgY2RPZmZzZXQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YS5yZWFkVUludDMyTEUoMTYpOyB9XG4gIHB1YmxpYyBjZFppcENvbW1lbnQoKTogc3RyaW5nIHtcbiAgICAvLyBBc3N1bWluZyBVVEYtOC4gVGhlIHNwZWNpZmljYXRpb24gZG9lc24ndCBzcGVjaWZ5LlxuICAgIHJldHVybiBzYWZlVG9TdHJpbmcodGhpcy5kYXRhLCB0cnVlLCAyMiwgdGhpcy5kYXRhLnJlYWRVSW50MTZMRSgyMCkpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFppcEZTIGV4dGVuZHMgZmlsZV9zeXN0ZW0uU3luY2hyb25vdXNGaWxlU3lzdGVtIGltcGxlbWVudHMgZmlsZV9zeXN0ZW0uRmlsZVN5c3RlbSB7XG4gIHByaXZhdGUgX2luZGV4OiBGaWxlSW5kZXggPSBuZXcgRmlsZUluZGV4KCk7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgWmlwRlMgZnJvbSB0aGUgZ2l2ZW4gemlwIGZpbGUgZGF0YS4gTmFtZSBpcyBvcHRpb25hbCwgYW5kIGlzXG4gICAqIHVzZWQgcHJpbWFyaWx5IGZvciBvdXIgdW5pdCB0ZXN0cycgcHVycG9zZXMgdG8gZGlmZmVyZW50aWF0ZSBkaWZmZXJlbnRcbiAgICogdGVzdCB6aXAgZmlsZXMgaW4gdGVzdCBvdXRwdXQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGE6IE5vZGVCdWZmZXIsIHByaXZhdGUgbmFtZTogc3RyaW5nID0gJycpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucG9wdWxhdGVJbmRleCgpO1xuICB9XG5cbiAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ1ppcEZTJyArICh0aGlzLm5hbWUgIT09ICcnID8gJyAnICsgdGhpcy5uYW1lIDogJycpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHsgcmV0dXJuIHRydWU7IH1cblxuICBwdWJsaWMgZGlza1NwYWNlKHBhdGg6IHN0cmluZywgY2I6ICh0b3RhbDogbnVtYmVyLCBmcmVlOiBudW1iZXIpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAvLyBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0uXG4gICAgY2IodGhpcy5kYXRhLmxlbmd0aCwgMCk7XG4gIH1cblxuICBwdWJsaWMgaXNSZWFkT25seSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzdXBwb3J0c0xpbmtzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdXBwb3J0c1Byb3BzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdXBwb3J0c1N5bmNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHVibGljIHN0YXRTeW5jKHBhdGg6IHN0cmluZywgaXNMc3RhdDogYm9vbGVhbik6IG5vZGVfZnNfc3RhdHMuU3RhdHMge1xuICAgIHZhciBpbm9kZSA9IHRoaXMuX2luZGV4LmdldElub2RlKHBhdGgpO1xuICAgIGlmIChpbm9kZSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgQXBpRXJyb3IuRU5PRU5UKHBhdGgpO1xuICAgIH1cbiAgICB2YXIgc3RhdHM6IG5vZGVfZnNfc3RhdHMuU3RhdHM7XG4gICAgaWYgKGlzRmlsZUlub2RlPENlbnRyYWxEaXJlY3Rvcnk+KGlub2RlKSkge1xuICAgICAgc3RhdHMgPSBpbm9kZS5nZXREYXRhKCkuZ2V0U3RhdHMoKTtcbiAgICB9IGVsc2UgaWYgKGlzRGlySW5vZGUoaW5vZGUpKSB7XG4gICAgICBzdGF0cyA9IGlub2RlLmdldFN0YXRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlOVkFMLCBcIkludmFsaWQgaW5vZGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHM7XG4gIH1cblxuICBwdWJsaWMgb3BlblN5bmMocGF0aDogc3RyaW5nLCBmbGFnczogRmlsZUZsYWcsIG1vZGU6IG51bWJlcik6IGZpbGUuRmlsZSB7XG4gICAgLy8gSU5WQVJJQU5UOiBDYW5ub3Qgd3JpdGUgdG8gUk8gZmlsZSBzeXN0ZW1zLlxuICAgIGlmIChmbGFncy5pc1dyaXRlYWJsZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVQRVJNLCBwYXRoKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBhdGggZXhpc3RzLCBhbmQgaXMgYSBmaWxlLlxuICAgIHZhciBpbm9kZSA9IHRoaXMuX2luZGV4LmdldElub2RlKHBhdGgpO1xuICAgIGlmICghaW5vZGUpIHtcbiAgICAgIHRocm93IEFwaUVycm9yLkVOT0VOVChwYXRoKTtcbiAgICB9IGVsc2UgaWYgKGlzRmlsZUlub2RlPENlbnRyYWxEaXJlY3Rvcnk+KGlub2RlKSkge1xuICAgICAgdmFyIGNkUmVjb3JkID0gaW5vZGUuZ2V0RGF0YSgpO1xuICAgICAgdmFyIHN0YXRzID0gY2RSZWNvcmQuZ2V0U3RhdHMoKTtcbiAgICAgIHN3aXRjaCAoZmxhZ3MucGF0aEV4aXN0c0FjdGlvbigpKSB7XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5USFJPV19FWENFUFRJT046XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5UUlVOQ0FURV9GSUxFOlxuICAgICAgICAgIHRocm93IEFwaUVycm9yLkVFWElTVChwYXRoKTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLk5PUDpcbiAgICAgICAgICByZXR1cm4gbmV3IHByZWxvYWRfZmlsZS5Ob1N5bmNGaWxlKHRoaXMsIHBhdGgsIGZsYWdzLCBzdGF0cywgY2RSZWNvcmQuZ2V0RGF0YSgpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgJ0ludmFsaWQgRmlsZU1vZGUgb2JqZWN0LicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEFwaUVycm9yLkVJU0RJUihwYXRoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVhZGRpclN5bmMocGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIC8vIENoZWNrIGlmIGl0IGV4aXN0cy5cbiAgICB2YXIgaW5vZGUgPSB0aGlzLl9pbmRleC5nZXRJbm9kZShwYXRoKTtcbiAgICBpZiAoIWlub2RlKSB7XG4gICAgICB0aHJvdyBBcGlFcnJvci5FTk9FTlQocGF0aCk7XG4gICAgfSBlbHNlIGlmIChpc0Rpcklub2RlKGlub2RlKSkge1xuICAgICAgcmV0dXJuIGlub2RlLmdldExpc3RpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQXBpRXJyb3IuRU5PVERJUihwYXRoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lhbGx5LW9wdGltaXplZCByZWFkZmlsZS5cbiAgICovXG4gIHB1YmxpYyByZWFkRmlsZVN5bmMoZm5hbWU6IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZywgZmxhZzogRmlsZUZsYWcpOiBhbnkge1xuICAgIC8vIEdldCBmaWxlLlxuICAgIHZhciBmZCA9IHRoaXMub3BlblN5bmMoZm5hbWUsIGZsYWcsIDB4MWE0KTtcbiAgICB0cnkge1xuICAgICAgdmFyIGZkQ2FzdCA9IDxwcmVsb2FkX2ZpbGUuTm9TeW5jRmlsZTxaaXBGUz4+IGZkO1xuICAgICAgdmFyIGZkQnVmZiA9IDxCdWZmZXI+IGZkQ2FzdC5nZXRCdWZmZXIoKTtcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29weWluZ1NsaWNlKGZkQnVmZik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmRCdWZmLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZmQuY2xvc2VTeW5jKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvY2F0ZXMgdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSByZWNvcmQgYXQgdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiBpdCBjYW5ub3QgYmUgZm91bmQuXG4gICAqL1xuICBwcml2YXRlIGdldEVPQ0QoKTogRW5kT2ZDZW50cmFsRGlyZWN0b3J5IHtcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGUgY29tbWVudCBpcyB2YXJpYWJsZSBzaXplIGFuZCB1cCB0byA2NEsgaW4gc2l6ZS5cbiAgICAvLyBXZSBhc3N1bWUgdGhhdCB0aGUgbWFnaWMgc2lnbmF0dXJlIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgY29tbWVudCwgYW5kXG4gICAgLy8gaW4gdGhlIGJ5dGVzIGJldHdlZW4gdGhlIGNvbW1lbnQgYW5kIHRoZSBzaWduYXR1cmUuIE90aGVyIFpJUFxuICAgIC8vIGltcGxlbWVudGF0aW9ucyBtYWtlIHRoaXMgc2FtZSBhc3N1bXB0aW9uLCBzaW5jZSB0aGUgYWx0ZXJuYXRpdmUgaXMgdG9cbiAgICAvLyByZWFkIHRocmVhZCBldmVyeSBlbnRyeSBpbiB0aGUgZmlsZSB0byBnZXQgdG8gaXQuIDooXG4gICAgLy8gVGhlc2UgYXJlICpuZWdhdGl2ZSogb2Zmc2V0cyBmcm9tIHRoZSBlbmQgb2YgdGhlIGZpbGUuXG4gICAgdmFyIHN0YXJ0T2Zmc2V0ID0gMjI7XG4gICAgdmFyIGVuZE9mZnNldCA9IE1hdGgubWluKHN0YXJ0T2Zmc2V0ICsgMHhGRkZGLCB0aGlzLmRhdGEubGVuZ3RoIC0gMSk7XG4gICAgLy8gVGhlcmUncyBub3QgZXZlbiBhIGJ5dGUgYWxpZ25tZW50IGd1YXJhbnRlZSBvbiB0aGUgY29tbWVudCBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gc2VhcmNoIGJ5dGUgYnkgYnl0ZS4gKmdydW1ibGUgZ3J1bWJsZSpcbiAgICBmb3IgKHZhciBpID0gc3RhcnRPZmZzZXQ7IGkgPCBlbmRPZmZzZXQ7IGkrKykge1xuICAgICAgLy8gTWFnaWMgbnVtYmVyOiBFT0NEIFNpZ25hdHVyZVxuICAgICAgaWYgKHRoaXMuZGF0YS5yZWFkVUludDMyTEUodGhpcy5kYXRhLmxlbmd0aCAtIGkpID09PSAweDA2MDU0YjUwKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW5kT2ZDZW50cmFsRGlyZWN0b3J5KHRoaXMuZGF0YS5zbGljZSh0aGlzLmRhdGEubGVuZ3RoIC0gaSkpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJJbnZhbGlkIFpJUCBmaWxlOiBDb3VsZCBub3QgbG9jYXRlIEVuZCBvZiBDZW50cmFsIERpcmVjdG9yeSBzaWduYXR1cmUuXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3B1bGF0ZUluZGV4KCkge1xuICAgIHZhciBlb2NkOiBFbmRPZkNlbnRyYWxEaXJlY3RvcnkgPSB0aGlzLmdldEVPQ0QoKTtcbiAgICBpZiAoZW9jZC5kaXNrTnVtYmVyKCkgIT09IGVvY2QuY2REaXNrTnVtYmVyKCkpXG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJaaXBGUyBkb2VzIG5vdCBzdXBwb3J0IHNwYW5uZWQgemlwIGZpbGVzLlwiKTtcblxuICAgIHZhciBjZFB0ciA9IGVvY2QuY2RPZmZzZXQoKTtcbiAgICBpZiAoY2RQdHIgPT09IDB4RkZGRkZGRkYpXG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoRXJyb3JDb2RlLkVJTlZBTCwgXCJaaXBGUyBkb2VzIG5vdCBzdXBwb3J0IFppcDY0LlwiKTtcbiAgICB2YXIgY2RFbmQgPSBjZFB0ciArIGVvY2QuY2RTaXplKCk7XG4gICAgd2hpbGUgKGNkUHRyIDwgY2RFbmQpIHtcbiAgICAgIHZhciBjZDogQ2VudHJhbERpcmVjdG9yeSA9IG5ldyBDZW50cmFsRGlyZWN0b3J5KHRoaXMuZGF0YSwgdGhpcy5kYXRhLnNsaWNlKGNkUHRyKSk7XG4gICAgICBjZFB0ciArPSBjZC50b3RhbFNpemUoKTtcbiAgICAgIC8vIFBhdGhzIG11c3QgYmUgYWJzb2x1dGUsIHlldCB6aXAgZmlsZSBwYXRocyBhcmUgYWx3YXlzIHJlbGF0aXZlIHRvIHRoZVxuICAgICAgLy8gemlwIHJvb3QuIFNvIHdlIGFwcGVuZCAnLycgYW5kIGNhbGwgaXQgYSBkYXkuXG4gICAgICB2YXIgZmlsZW5hbWUgPSBjZC5maWxlTmFtZSgpO1xuICAgICAgaWYgKGZpbGVuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSB0aHJvdyBuZXcgRXJyb3IoXCJXSFkgSVMgVEhJUyBBQlNPTFVURVwiKTtcbiAgICAgIC8vIFhYWDogRm9yIHRoZSBmaWxlIGluZGV4LCBzdHJpcCB0aGUgdHJhaWxpbmcgJy8nLlxuICAgICAgaWYgKGZpbGVuYW1lLmNoYXJBdChmaWxlbmFtZS5sZW5ndGggLSAxKSA9PT0gJy8nKSB7XG4gICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWUuc3Vic3RyKDAsIGZpbGVuYW1lLmxlbmd0aC0xKTtcbiAgICAgIH1cbiAgICAgIGlmIChjZC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIHRoaXMuX2luZGV4LmFkZFBhdGgoJy8nICsgZmlsZW5hbWUsIG5ldyBEaXJJbm9kZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2luZGV4LmFkZFBhdGgoJy8nICsgZmlsZW5hbWUsIG5ldyBGaWxlSW5vZGU8Q2VudHJhbERpcmVjdG9yeT4oY2QpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==