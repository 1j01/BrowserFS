var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var file_system_1 = require('../core/file_system');
var path = require('path');
var api_error_1 = require('../core/api_error');
var FolderAdapter = (function (_super) {
    __extends(FolderAdapter, _super);
    function FolderAdapter(folder, wrapped) {
        _super.call(this);
        this._folder = folder;
        this._wrapped = wrapped;
    }
    FolderAdapter.prototype.initialize = function (cb) {
        var _this = this;
        this._wrapped.exists(this._folder, function (exists) {
            if (exists) {
                cb();
            }
            else if (_this._wrapped.isReadOnly()) {
                cb(api_error_1.ApiError.ENOENT(_this._folder));
            }
            else {
                _this._wrapped.mkdir(_this._folder, 0x1ff, cb);
            }
        });
    };
    FolderAdapter.prototype.getName = function () { return this._wrapped.getName(); };
    FolderAdapter.prototype.isReadOnly = function () { return this._wrapped.isReadOnly(); };
    FolderAdapter.prototype.supportsProps = function () { return this._wrapped.supportsProps(); };
    FolderAdapter.prototype.supportsSynch = function () { return this._wrapped.supportsSynch(); };
    FolderAdapter.prototype.supportsLinks = function () { return false; };
    FolderAdapter.isAvailable = function () {
        return true;
    };
    return FolderAdapter;
})(file_system_1.BaseFileSystem);
exports.__esModule = true;
exports["default"] = FolderAdapter;
function translateError(folder, e) {
    if (e !== null && typeof e === 'object') {
        var err = e;
        var p = err.path;
        if (p) {
            p = '/' + path.relative(folder, p);
            err.message = err.message.replace(err.path, p);
            err.path = p;
        }
    }
    return e;
}
function wrapCallback(folder, cb) {
    if (typeof cb === 'function') {
        return function (err) {
            if (arguments.length > 0) {
                arguments[0] = translateError(folder, err);
            }
            cb.apply(null, arguments);
        };
    }
    else {
        return cb;
    }
}
function wrapFunction(name, wrapFirst, wrapSecond) {
    if (name.slice(name.length - 4) !== 'Sync') {
        return function () {
            if (arguments.length > 0) {
                if (wrapFirst) {
                    arguments[0] = path.join(this._folder, arguments[0]);
                }
                if (wrapSecond) {
                    arguments[1] = path.join(this._folder, arguments[1]);
                }
                arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
            }
            return this._wrapped[name].apply(this._wrapped, arguments);
        };
    }
    else {
        return function () {
            try {
                if (wrapFirst) {
                    arguments[0] = path.join(this._folder, arguments[0]);
                }
                if (wrapSecond) {
                    arguments[1] = path.join(this._folder, arguments[1]);
                }
                return this._wrapped[name].apply(this._wrapped, arguments);
            }
            catch (e) {
                throw translateError(this._folder, e);
            }
        };
    }
}
['diskSpace', 'stat', 'statSync', 'open', 'openSync', 'unlink', 'unlinkSync',
    'rmdir', 'rmdirSync', 'mkdir', 'mkdirSync', 'readdir', 'readdirSync', 'exists',
    'existsSync', 'realpath', 'realpathSync', 'truncate', 'truncateSync', 'readFile',
    'readFileSync', 'writeFile', 'writeFileSync', 'appendFile', 'appendFileSync',
    'chmod', 'chmodSync', 'chown', 'chownSync', 'utimes', 'utimeSync', 'readlink',
    'readlinkSync'].forEach(function (name) {
    FolderAdapter.prototype[name] = wrapFunction(name, true, false);
});
['rename', 'renameSync', 'link', 'linkSync', 'symlink', 'symlinkSync'].forEach(function (name) {
    FolderAdapter.prototype[name] = wrapFunction(name, true, true);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9sZGVyQWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYWNrZW5kL0ZvbGRlckFkYXB0ZXIudHMiXSwibmFtZXMiOlsiRm9sZGVyQWRhcHRlciIsIkZvbGRlckFkYXB0ZXIuY29uc3RydWN0b3IiLCJGb2xkZXJBZGFwdGVyLmluaXRpYWxpemUiLCJGb2xkZXJBZGFwdGVyLmdldE5hbWUiLCJGb2xkZXJBZGFwdGVyLmlzUmVhZE9ubHkiLCJGb2xkZXJBZGFwdGVyLnN1cHBvcnRzUHJvcHMiLCJGb2xkZXJBZGFwdGVyLnN1cHBvcnRzU3luY2giLCJGb2xkZXJBZGFwdGVyLnN1cHBvcnRzTGlua3MiLCJGb2xkZXJBZGFwdGVyLmlzQXZhaWxhYmxlIiwidHJhbnNsYXRlRXJyb3IiLCJ3cmFwQ2FsbGJhY2siLCJ3cmFwRnVuY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNEJBQXlDLHFCQUFxQixDQUFDLENBQUE7QUFDL0QsSUFBTyxJQUFJLFdBQVcsTUFBTSxDQUFDLENBQUM7QUFDOUIsMEJBQXVCLG1CQUFtQixDQUFDLENBQUE7QUFLM0M7SUFBMkNBLGlDQUFjQTtJQUd2REEsdUJBQVlBLE1BQWNBLEVBQUVBLE9BQW1CQTtRQUM3Q0MsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUMxQkEsQ0FBQ0E7SUFNTUQsa0NBQVVBLEdBQWpCQSxVQUFrQkEsRUFBMEJBO1FBQTVDRSxpQkFVQ0E7UUFUQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsVUFBQ0EsTUFBZUE7WUFDakRBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUNQQSxDQUFDQTtZ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LFdBQVcsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsVUFBVTtJQUM3RSxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFZO0lBQ3BDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEUsQ0FBQyxDQUFDLENBQUM7QUFHSCxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBWTtJQUMxRixhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCYXNlRmlsZVN5c3RlbSwgRmlsZVN5c3RlbX0gZnJvbSAnLi4vY29yZS9maWxlX3N5c3RlbSc7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCB7QXBpRXJyb3J9IGZyb20gJy4uL2NvcmUvYXBpX2Vycm9yJztcblxuLyoqXG4gKiBUaGUgRm9sZGVyQWRhcHRlciBmaWxlIHN5c3RlbSB3cmFwcyBhIGZpbGUgc3lzdGVtLCBhbmQgc2NvcGVzIGFsbCBpbnRlcmFjdGlvbnMgdG8gYSBzdWJmb2xkZXIgb2YgdGhhdCBmaWxlIHN5c3RlbS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9sZGVyQWRhcHRlciBleHRlbmRzIEJhc2VGaWxlU3lzdGVtIGltcGxlbWVudHMgRmlsZVN5c3RlbSB7XG4gIHByaXZhdGUgX3dyYXBwZWQ6IEZpbGVTeXN0ZW07XG4gIHByaXZhdGUgX2ZvbGRlcjogc3RyaW5nO1xuICBjb25zdHJ1Y3Rvcihmb2xkZXI6IHN0cmluZywgd3JhcHBlZDogRmlsZVN5c3RlbSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZm9sZGVyID0gZm9sZGVyO1xuICAgIHRoaXMuX3dyYXBwZWQgPSB3cmFwcGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIGZpbGUgc3lzdGVtLiBFbnN1cmVzIHRoYXQgdGhlIHdyYXBwZWQgZmlsZSBzeXN0ZW1cbiAgICogaGFzIHRoZSBnaXZlbiBmb2xkZXIuXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZShjYjogKGU/OiBBcGlFcnJvcikgPT4gdm9pZCkge1xuICAgIHRoaXMuX3dyYXBwZWQuZXhpc3RzKHRoaXMuX2ZvbGRlciwgKGV4aXN0czogYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICBjYigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl93cmFwcGVkLmlzUmVhZE9ubHkoKSkge1xuICAgICAgICBjYihBcGlFcnJvci5FTk9FTlQodGhpcy5fZm9sZGVyKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl93cmFwcGVkLm1rZGlyKHRoaXMuX2ZvbGRlciwgMHgxZmYsIGNiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl93cmFwcGVkLmdldE5hbWUoKTsgfVxuICBwdWJsaWMgaXNSZWFkT25seSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX3dyYXBwZWQuaXNSZWFkT25seSgpOyB9XG4gIHB1YmxpYyBzdXBwb3J0c1Byb3BzKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fd3JhcHBlZC5zdXBwb3J0c1Byb3BzKCk7IH1cbiAgcHVibGljIHN1cHBvcnRzU3luY2goKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl93cmFwcGVkLnN1cHBvcnRzU3luY2goKTsgfVxuICBwdWJsaWMgc3VwcG9ydHNMaW5rcygpOiBib29sZWFuIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgcHVibGljIHN0YXRpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVFcnJvcihmb2xkZXI6IHN0cmluZywgZTogYW55KTogYW55IHtcbiAgaWYgKGUgIT09IG51bGwgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnKSB7XG4gICAgbGV0IGVyciA9IDxBcGlFcnJvcj4gZTtcbiAgICBsZXQgcCA9IGVyci5wYXRoO1xuICAgIGlmIChwKSB7XG4gICAgICBwID0gJy8nICsgcGF0aC5yZWxhdGl2ZShmb2xkZXIsIHApO1xuICAgICAgZXJyLm1lc3NhZ2UgPSBlcnIubWVzc2FnZS5yZXBsYWNlKGVyci5wYXRoLCBwKTtcbiAgICAgIGVyci5wYXRoID0gcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIHdyYXBDYWxsYmFjayhmb2xkZXI6IHN0cmluZywgY2I6IGFueSk6IGFueSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXJndW1lbnRzWzBdID0gdHJhbnNsYXRlRXJyb3IoZm9sZGVyLCBlcnIpO1xuICAgICAgfVxuICAgICAgKDxGdW5jdGlvbj4gY2IpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2I7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKG5hbWU6IHN0cmluZywgd3JhcEZpcnN0OiBib29sZWFuLCB3cmFwU2Vjb25kOiBib29sZWFuKTogRnVuY3Rpb24ge1xuICBpZiAobmFtZS5zbGljZShuYW1lLmxlbmd0aCAtIDQpICE9PSAnU3luYycpIHtcbiAgICAvLyBBc3luYyBmdW5jdGlvbi4gVHJhbnNsYXRlIGVycm9yIGluIGNhbGxiYWNrLlxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAod3JhcEZpcnN0KSB7XG4gICAgICAgICAgYXJndW1lbnRzWzBdID0gcGF0aC5qb2luKHRoaXMuX2ZvbGRlciwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod3JhcFNlY29uZCkge1xuICAgICAgICAgIGFyZ3VtZW50c1sxXSA9IHBhdGguam9pbih0aGlzLl9mb2xkZXIsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9IHdyYXBDYWxsYmFjayh0aGlzLl9mb2xkZXIsIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZWRbbmFtZV0uYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIFN5bmMgZnVuY3Rpb24uIFRyYW5zbGF0ZSBlcnJvciBpbiBjYXRjaC5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAod3JhcEZpcnN0KSB7XG4gICAgICAgICAgYXJndW1lbnRzWzBdID0gcGF0aC5qb2luKHRoaXMuX2ZvbGRlciwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod3JhcFNlY29uZCkge1xuICAgICAgICAgIGFyZ3VtZW50c1sxXSA9IHBhdGguam9pbih0aGlzLl9mb2xkZXIsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZWRbbmFtZV0uYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgdHJhbnNsYXRlRXJyb3IodGhpcy5fZm9sZGVyLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbi8vIEZpcnN0IGFyZ3VtZW50IGlzIGEgcGF0aC5cblsnZGlza1NwYWNlJywgJ3N0YXQnLCAnc3RhdFN5bmMnLCAnb3BlbicsICdvcGVuU3luYycsICd1bmxpbmsnLCAndW5saW5rU3luYycsXG4gJ3JtZGlyJywgJ3JtZGlyU3luYycgLCdta2RpcicsICdta2RpclN5bmMnLCAncmVhZGRpcicsICdyZWFkZGlyU3luYycsICdleGlzdHMnLFxuICdleGlzdHNTeW5jJywgJ3JlYWxwYXRoJywgJ3JlYWxwYXRoU3luYycsICd0cnVuY2F0ZScsICd0cnVuY2F0ZVN5bmMnLCAncmVhZEZpbGUnLFxuICdyZWFkRmlsZVN5bmMnLCAnd3JpdGVGaWxlJywgJ3dyaXRlRmlsZVN5bmMnLCAnYXBwZW5kRmlsZScsICdhcHBlbmRGaWxlU3luYycsXG4gJ2NobW9kJywgJ2NobW9kU3luYycsICdjaG93bicsICdjaG93blN5bmMnLCAndXRpbWVzJywgJ3V0aW1lU3luYycsICdyZWFkbGluaycsXG4gJ3JlYWRsaW5rU3luYyddLmZvckVhY2goKG5hbWU6IHN0cmluZykgPT4ge1xuICBGb2xkZXJBZGFwdGVyLnByb3RvdHlwZVtuYW1lXSA9IHdyYXBGdW5jdGlvbihuYW1lLCB0cnVlLCBmYWxzZSk7XG59KTtcblxuLy8gRmlyc3QgYW5kIHNlY29uZCBhcmd1bWVudHMgYXJlIHBhdGhzLlxuWydyZW5hbWUnLCAncmVuYW1lU3luYycsICdsaW5rJywgJ2xpbmtTeW5jJywgJ3N5bWxpbmsnLCAnc3ltbGlua1N5bmMnXS5mb3JFYWNoKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgRm9sZGVyQWRhcHRlci5wcm90b3R5cGVbbmFtZV0gPSB3cmFwRnVuY3Rpb24obmFtZSwgdHJ1ZSwgdHJ1ZSk7XG59KTtcbiJdfQ==