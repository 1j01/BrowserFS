var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var kvfs = require('../generic/key_value_filesystem');
var api_error_1 = require('../core/api_error');
var global = require('../core/global');
var supportsBinaryString = false, binaryEncoding;
try {
    global.localStorage.setItem("__test__", String.fromCharCode(0xD800));
    supportsBinaryString = global.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
}
catch (e) {
    supportsBinaryString = false;
}
binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';
if (!Buffer.isEncoding(binaryEncoding)) {
    binaryEncoding = "base64";
}
var LocalStorageStore = (function () {
    function LocalStorageStore() {
    }
    LocalStorageStore.prototype.name = function () {
        return 'LocalStorage';
    };
    LocalStorageStore.prototype.clear = function () {
        global.localStorage.clear();
    };
    LocalStorageStore.prototype.beginTransaction = function (type) {
        return new kvfs.SimpleSyncRWTransaction(this);
    };
    LocalStorageStore.prototype.get = function (key) {
        try {
            var data = global.localStorage.getItem(key);
            if (data !== null) {
                return new Buffer(data, binaryEncoding);
            }
        }
        catch (e) {
        }
        return undefined;
    };
    LocalStorageStore.prototype.put = function (key, data, overwrite) {
        try {
            if (!overwrite && global.localStorage.getItem(key) !== null) {
                return false;
            }
            global.localStorage.setItem(key, data.toString(binaryEncoding));
            return true;
        }
        catch (e) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOSPC, "LocalStorage is full.");
        }
    };
    LocalStorageStore.prototype.del = function (key) {
        try {
            global.localStorage.removeItem(key);
        }
        catch (e) {
            throw new api_error_1.ApiError(api_error_1.ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
        }
    };
    return LocalStorageStore;
})();
exports.LocalStorageStore = LocalStorageStore;
var LocalStorageFileSystem = (function (_super) {
    __extends(LocalStorageFileSystem, _super);
    function LocalStorageFileSystem() {
        _super.call(this, { store: new LocalStorageStore() });
    }
    LocalStorageFileSystem.isAvailable = function () {
        return typeof global.localStorage !== 'undefined';
    };
    return LocalStorageFileSystem;
})(kvfs.SyncKeyValueFileSystem);
exports.__esModule = true;
exports["default"] = LocalStorageFileSystem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYWxTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JhY2tlbmQvTG9jYWxTdG9yYWdlLnRzIl0sIm5hbWVzIjpbIkxvY2FsU3RvcmFnZVN0b3JlIiwiTG9jYWxTdG9yYWdlU3RvcmUuY29uc3RydWN0b3IiLCJMb2NhbFN0b3JhZ2VTdG9yZS5uYW1lIiwiTG9jYWxTdG9yYWdlU3RvcmUuY2xlYXIiLCJMb2NhbFN0b3JhZ2VTdG9yZS5iZWdpblRyYW5zYWN0aW9uIiwiTG9jYWxTdG9yYWdlU3RvcmUuZ2V0IiwiTG9jYWxTdG9yYWdlU3RvcmUucHV0IiwiTG9jYWxTdG9yYWdlU3RvcmUuZGVsIiwiTG9jYWxTdG9yYWdlRmlsZVN5c3RlbSIsIkxvY2FsU3RvcmFnZUZpbGVTeXN0ZW0uY29uc3RydWN0b3IiLCJMb2NhbFN0b3JhZ2VGaWxlU3lzdGVtLmlzQXZhaWxhYmxlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU8sSUFBSSxXQUFXLGlDQUFpQyxDQUFDLENBQUM7QUFDekQsMEJBQWtDLG1CQUFtQixDQUFDLENBQUE7QUFDdEQsSUFBTyxNQUFNLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztBQUsxQyxJQUFJLG9CQUFvQixHQUFZLEtBQUssRUFDdkMsY0FBc0IsQ0FBQztBQUN6QixJQUFJLENBQUM7SUFDSCxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakcsQ0FBRTtBQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFWCxvQkFBb0IsR0FBRyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUNELGNBQWMsR0FBRyxvQkFBb0IsR0FBRyxlQUFlLEdBQUcsa0JBQWtCLENBQUM7QUFDN0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUd2QyxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBQzVCLENBQUM7QUFLRDtJQUNFQTtJQUFnQkMsQ0FBQ0E7SUFFVkQsZ0NBQUlBLEdBQVhBO1FBQ0VFLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBO0lBQ3hCQSxDQUFDQTtJQUVNRixpQ0FBS0EsR0FBWkE7UUFDRUcsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7SUFDOUJBLENBQUNBO0lBRU1ILDRDQUFnQkEsR0FBdkJBLFVBQXdCQSxJQUFZQTtRQUVsQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNoREEsQ0FBQ0E7SUFFTUosK0JBQUdBLEdBQVZBLFVBQVdBLEdBQVdBO1FBQ3BCSyxJQUFJQSxDQUFDQTtZQUNIQSxJQUFJQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xCQSxNQUFNQSxDQUFDQSxJQUFJQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQTtZQUMxQ0EsQ0FBQ0E7UUFDSEEsQ0FBRUE7UUFBQUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFYkEsQ0FBQ0E7UUFFREEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7SUFDbkJBLENBQUNBO0lBRU1MLCtCQUFHQSxHQUFWQSxVQUFXQSxHQUFXQSxFQUFFQSxJQUFnQkEsRUFBRUEsU0FBa0JBO1FBQzFETSxJQUFJQSxDQUFDQTtZQUNIQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFNURBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2ZBLENBQUNBO1lBQ0RBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2hFQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNkQSxDQUFFQTtRQUFBQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxNQUFNQSxJQUFJQSxvQkFBUUEsQ0FBQ0EscUJBQVNBLENBQUNBLE1BQU1BLEVBQUVBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0E7UUFDaEVBLENBQUNBO0lBQ0hBLENBQUNBO0lBRU1OLCtCQUFHQSxHQUFWQSxVQUFXQSxHQUFXQTtRQUNwQk8sSUFBSUEsQ0FBQ0E7WUFDSEEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDdENBLENBQUVBO1FBQUFBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLE1BQU1BLElBQUlBLG9CQUFRQSxDQUFDQSxxQkFBU0EsQ0FBQ0EsR0FBR0EsRUFBRUEsdUJBQXVCQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5RUEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFDSFAsd0JBQUNBO0FBQURBLENBQUNBLEFBakRELElBaURDO0FBakRZLHlCQUFpQixvQkFpRDdCLENBQUE7QUFNRDtJQUFvRFEsMENBQTJCQTtJQUM3RUE7UUFBZ0JDLGtCQUFNQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxpQkFBaUJBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO0lBQUNBLENBQUNBO0lBQzlDRCxrQ0FBV0EsR0FBekJBO1FBQ0VFLE1BQU1BLENBQUNBLE9BQU9BLE1BQU1BLENBQUNBLFlBQVlBLEtBQUtBLFdBQVdBLENBQUNBO0lBQ3BEQSxDQUFDQTtJQUNIRiw2QkFBQ0E7QUFBREEsQ0FBQ0EsQUFMRCxFQUFvRCxJQUFJLENBQUMsc0JBQXNCLEVBSzlFO0FBTEQ7MkNBS0MsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBrdmZzID0gcmVxdWlyZSgnLi4vZ2VuZXJpYy9rZXlfdmFsdWVfZmlsZXN5c3RlbScpO1xuaW1wb3J0IHtBcGlFcnJvciwgRXJyb3JDb2RlfSBmcm9tICcuLi9jb3JlL2FwaV9lcnJvcic7XG5pbXBvcnQgZ2xvYmFsID0gcmVxdWlyZSgnLi4vY29yZS9nbG9iYWwnKTtcblxuLy8gU29tZSB2ZXJzaW9ucyBvZiBGRiBhbmQgYWxsIHZlcnNpb25zIG9mIElFIGRvIG5vdCBzdXBwb3J0IHRoZSBmdWxsIHJhbmdlIG9mXG4vLyAxNi1iaXQgbnVtYmVycyBlbmNvZGVkIGFzIGNoYXJhY3RlcnMsIGFzIHRoZXkgZW5mb3JjZSBVVEYtMTYgcmVzdHJpY3Rpb25zLlxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTE3MDcxNi9hcmUtdGhlcmUtYW55LWNoYXJhY3RlcnMtdGhhdC1hcmUtbm90LWFsbG93ZWQtaW4tbG9jYWxzdG9yYWdlLzExMTczNjczIzExMTczNjczXG52YXIgc3VwcG9ydHNCaW5hcnlTdHJpbmc6IGJvb2xlYW4gPSBmYWxzZSxcbiAgYmluYXJ5RW5jb2Rpbmc6IHN0cmluZztcbnRyeSB7XG4gIGdsb2JhbC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIl9fdGVzdF9fXCIsIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwKSk7XG4gIHN1cHBvcnRzQmluYXJ5U3RyaW5nID0gZ2xvYmFsLmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiX190ZXN0X19cIikgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwKTtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gSUUgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgc3VwcG9ydHNCaW5hcnlTdHJpbmcgPSBmYWxzZTtcbn1cbmJpbmFyeUVuY29kaW5nID0gc3VwcG9ydHNCaW5hcnlTdHJpbmcgPyAnYmluYXJ5X3N0cmluZycgOiAnYmluYXJ5X3N0cmluZ19pZSc7XG5pZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGJpbmFyeUVuY29kaW5nKSkge1xuICAvLyBGYWxsYmFjayBmb3Igbm9uIEJyb3dzZXJGUyBpbXBsZW1lbnRhdGlvbnMgb2YgYnVmZmVyIHRoYXQgbGFjayBhXG4gIC8vIGJpbmFyeV9zdHJpbmcgZm9ybWF0LlxuICBiaW5hcnlFbmNvZGluZyA9IFwiYmFzZTY0XCI7XG59XG5cbi8qKlxuICogQSBzeW5jaHJvbm91cyBrZXktdmFsdWUgc3RvcmUgYmFja2VkIGJ5IGxvY2FsU3RvcmFnZS5cbiAqL1xuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVN0b3JlIGltcGxlbWVudHMga3Zmcy5TeW5jS2V5VmFsdWVTdG9yZSwga3Zmcy5TaW1wbGVTeW5jU3RvcmUge1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIHB1YmxpYyBuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdMb2NhbFN0b3JhZ2UnO1xuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIGdsb2JhbC5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBiZWdpblRyYW5zYWN0aW9uKHR5cGU6IHN0cmluZyk6IGt2ZnMuU3luY0tleVZhbHVlUldUcmFuc2FjdGlvbiB7XG4gICAgLy8gTm8gbmVlZCB0byBkaWZmZXJlbnRpYXRlLlxuICAgIHJldHVybiBuZXcga3Zmcy5TaW1wbGVTeW5jUldUcmFuc2FjdGlvbih0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpOiBOb2RlQnVmZmVyIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGRhdGEgPSBnbG9iYWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyKGRhdGEsIGJpbmFyeUVuY29kaW5nKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG5cbiAgICB9XG4gICAgLy8gS2V5IGRvZXNuJ3QgZXhpc3QsIG9yIGEgZmFpbHVyZSBvY2N1cnJlZC5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHB1dChrZXk6IHN0cmluZywgZGF0YTogTm9kZUJ1ZmZlciwgb3ZlcndyaXRlOiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghb3ZlcndyaXRlICYmIGdsb2JhbC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpICE9PSBudWxsKSB7XG4gICAgICAgIC8vIERvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBrZXkhXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGdsb2JhbC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIGRhdGEudG9TdHJpbmcoYmluYXJ5RW5jb2RpbmcpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRU5PU1BDLCBcIkxvY2FsU3RvcmFnZSBpcyBmdWxsLlwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVsKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbC5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihFcnJvckNvZGUuRUlPLCBcIlVuYWJsZSB0byBkZWxldGUga2V5IFwiICsga2V5ICsgXCI6IFwiICsgZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQSBzeW5jaHJvbm91cyBmaWxlIHN5c3RlbSBiYWNrZWQgYnkgbG9jYWxTdG9yYWdlLiBDb25uZWN0cyBvdXJcbiAqIExvY2FsU3RvcmFnZVN0b3JlIHRvIG91ciBTeW5jS2V5VmFsdWVGaWxlU3lzdGVtLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbFN0b3JhZ2VGaWxlU3lzdGVtIGV4dGVuZHMga3Zmcy5TeW5jS2V5VmFsdWVGaWxlU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7IHN1cGVyKHsgc3RvcmU6IG5ldyBMb2NhbFN0b3JhZ2VTdG9yZSgpIH0pOyB9XG4gIHB1YmxpYyBzdGF0aWMgaXNBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHR5cGVvZiBnbG9iYWwubG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJztcbiAgfVxufVxuIl19