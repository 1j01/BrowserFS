export interface BufferCore {
    getLength(): number;
    writeInt8(i: number, data: number): void;
    writeInt16LE(i: number, data: number): void;
    writeInt16BE(i: number, data: number): void;
    writeInt32LE(i: number, data: number): void;
    writeInt32BE(i: number, data: number): void;
    writeUInt8(i: number, data: number): void;
    writeUInt16LE(i: number, data: number): void;
    writeUInt16BE(i: number, data: number): void;
    writeUInt32LE(i: number, data: number): void;
    writeUInt32BE(i: number, data: number): void;
    writeFloatLE(i: number, data: number): void;
    writeFloatBE(i: number, data: number): void;
    writeDoubleLE(i: number, data: number): void;
    writeDoubleBE(i: number, data: number): void;
    readInt8(i: number): number;
    readInt16LE(i: number): number;
    readInt16BE(i: number): number;
    readInt32LE(i: number): number;
    readInt32BE(i: number): number;
    readUInt8(i: number): number;
    readUInt16LE(i: number): number;
    readUInt16BE(i: number): number;
    readUInt32LE(i: number): number;
    readUInt32BE(i: number): number;
    readFloatLE(i: number): number;
    readFloatBE(i: number): number;
    readDoubleLE(i: number): number;
    readDoubleBE(i: number): number;
    copy(start: number, end: number): BufferCore;
    fill(value: number, start: number, end: number): void;
}
export interface BufferCoreImplementation {
    new (length: number): BufferCore;
    isAvailable(): boolean;
    name: string;
}
export declare class BufferCoreCommon {
    getLength(): number;
    writeInt8(i: number, data: number): void;
    writeInt16LE(i: number, data: number): void;
    writeInt16BE(i: number, data: number): void;
    writeInt32LE(i: number, data: number): void;
    writeInt32BE(i: number, data: number): void;
    writeUInt8(i: number, data: number): void;
    writeUInt16LE(i: number, data: number): void;
    writeUInt16BE(i: number, data: number): void;
    writeUInt32LE(i: number, data: number): void;
    writeUInt32BE(i: number, data: number): void;
    writeFloatLE(i: number, data: number): void;
    writeFloatBE(i: number, data: number): void;
    writeDoubleLE(i: number, data: number): void;
    writeDoubleBE(i: number, data: number): void;
    readInt8(i: number): number;
    readInt16LE(i: number): number;
    readInt16BE(i: number): number;
    readInt32LE(i: number): number;
    readInt32BE(i: number): number;
    readUInt8(i: number): number;
    readUInt16LE(i: number): number;
    readUInt16BE(i: number): number;
    readUInt32LE(i: number): number;
    readUInt32BE(i: number): number;
    readFloatLE(i: number): number;
    readFloatBE(i: number): number;
    readDoubleLE(i: number): number;
    readDoubleBE(i: number): number;
    copy(start: number, end: number): BufferCore;
    fill(value: number, start: number, end: number): void;
    private float2intbits(f_val);
    private double2longbits(d_val);
    private intbits2float(int32);
    private longbits2double(uint32_a, uint32_b);
}
