import buffer_core = require('./buffer_core');
export declare class BufferCoreArrayBuffer extends buffer_core.BufferCoreCommon implements buffer_core.BufferCore {
    static isAvailable(): boolean;
    static name: string;
    private buff;
    private length;
    constructor(length: number);
    constructor(buff: DataView);
    constructor(buff: ArrayBuffer);
    getLength(): number;
    writeInt8(i: number, data: number): void;
    writeInt16LE(i: number, data: number): void;
    writeInt16BE(i: number, data: number): void;
    writeInt32LE(i: number, data: number): void;
    writeInt32BE(i: number, data: number): void;
    writeUInt8(i: number, data: number): void;
    writeUInt16LE(i: number, data: number): void;
    writeUInt16BE(i: number, data: number): void;
    writeUInt32LE(i: number, data: number): void;
    writeUInt32BE(i: number, data: number): void;
    writeFloatLE(i: number, data: number): void;
    writeFloatBE(i: number, data: number): void;
    writeDoubleLE(i: number, data: number): void;
    writeDoubleBE(i: number, data: number): void;
    readInt8(i: number): number;
    readInt16LE(i: number): number;
    readInt16BE(i: number): number;
    readInt32LE(i: number): number;
    readInt32BE(i: number): number;
    readUInt8(i: number): number;
    readUInt16LE(i: number): number;
    readUInt16BE(i: number): number;
    readUInt32LE(i: number): number;
    readUInt32BE(i: number): number;
    readFloatLE(i: number): number;
    readFloatBE(i: number): number;
    readDoubleLE(i: number): number;
    readDoubleBE(i: number): number;
    copy(start: number, end: number): buffer_core.BufferCore;
    fill(value: number, start: number, end: number): void;
    getDataView(): DataView;
}
