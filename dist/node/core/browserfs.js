/**
 * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
 */
var buffer = require('buffer');
var fs = require('./node_fs');
var path = require('path');
var emscripten_fs_1 = require('../generic/emscripten_fs');
exports.EmscriptenFS = emscripten_fs_1["default"];
var FileSystem = require('./backends');
exports.FileSystem = FileSystem;
var BFSUtils = require('./util');
function install(obj) {
    obj.Buffer = Buffer;
    obj.process = process;
    var oldRequire = obj.require != null ? obj.require : null;
    obj.require = function (arg) {
        var rv = BFSRequire(arg);
        if (rv == null) {
            return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
        }
        else {
            return rv;
        }
    };
}
exports.install = install;
function registerFileSystem(name, fs) {
    FileSystem[name] = fs;
}
exports.registerFileSystem = registerFileSystem;
function BFSRequire(module) {
    switch (module) {
        case 'fs':
            return fs;
        case 'path':
            return path;
        case 'buffer':
            return buffer;
        case 'process':
            return process;
        case 'bfs_utils':
            return BFSUtils;
        default:
            return FileSystem[module];
    }
}
exports.BFSRequire = BFSRequire;
function initialize(rootfs) {
    return fs.initialize(rootfs);
}
exports.initialize = initialize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlcmZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvYnJvd3NlcmZzLnRzIl0sIm5hbWVzIjpbImluc3RhbGwiLCJyZWdpc3RlckZpbGVTeXN0ZW0iLCJCRlNSZXF1aXJlIiwiaW5pdGlhbGl6ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxJQUFPLE1BQU0sV0FBVyxRQUFRLENBQUMsQ0FBQztBQUNsQyxJQUFPLEVBQUUsV0FBVyxXQUFXLENBQUMsQ0FBQztBQUNqQyxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQztBQUU5Qiw4QkFBeUIsMEJBQTBCLENBQUMsQ0FBQTtBQXVFNUMsb0JBQVk7QUF0RXBCLElBQVksVUFBVSxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBc0VuQixrQkFBVTtBQXJFaEMsSUFBWSxRQUFRLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFnQm5DLGlCQUF3QixHQUFRO0lBQzlCQSxHQUFHQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtJQUNwQkEsR0FBR0EsQ0FBQ0EsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0E7SUFDdEJBLElBQUlBLFVBQVVBLEdBQUdBLEdBQUdBLENBQUNBLE9BQU9BLElBQUlBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO0lBRTFEQSxHQUFHQSxDQUFDQSxPQUFPQSxHQUFHQSxVQUFTQSxHQUFXQTtRQUNoQyxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDWixDQUFDO0lBQ0gsQ0FBQyxDQUFDQTtBQUNKQSxDQUFDQTtBQWJlLGVBQU8sVUFhdEIsQ0FBQTtBQUVELDRCQUFtQyxJQUFZLEVBQUUsRUFBcUM7SUFDN0VDLFVBQVdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO0FBQ2hDQSxDQUFDQTtBQUZlLDBCQUFrQixxQkFFakMsQ0FBQTtBQVFELG9CQUEyQixNQUFjO0lBQ3ZDQyxNQUFNQSxDQUFBQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNkQSxLQUFLQSxJQUFJQTtZQUNQQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUNaQSxLQUFLQSxNQUFNQTtZQUNUQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNkQSxLQUFLQSxRQUFRQTtZQUVYQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNoQkEsS0FBS0EsU0FBU0E7WUFDWkEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDakJBLEtBQUtBLFdBQVdBO1lBQ2RBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO1FBQ2xCQTtZQUNFQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7QUFDSEEsQ0FBQ0E7QUFoQmUsa0JBQVUsYUFnQnpCLENBQUE7QUFRRCxvQkFBMkIsTUFBOEI7SUFDdkRDLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0FBQy9CQSxDQUFDQTtBQUZlLGtCQUFVLGFBRXpCLENBQUE7QUFFaUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJyb3dzZXJGUydzIG1haW4gbW9kdWxlLiBUaGlzIGlzIGV4cG9zZWQgaW4gdGhlIGJyb3dzZXIgdmlhIHRoZSBCcm93c2VyRlMgZ2xvYmFsLlxuICovXG5cbmltcG9ydCBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJy4vbm9kZV9mcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgZmlsZV9zeXN0ZW0gPSByZXF1aXJlKCcuL2ZpbGVfc3lzdGVtJyk7XG5pbXBvcnQgRW1zY3JpcHRlbkZTIGZyb20gJy4uL2dlbmVyaWMvZW1zY3JpcHRlbl9mcyc7XG5pbXBvcnQgKiBhcyBGaWxlU3lzdGVtIGZyb20gJy4vYmFja2VuZHMnO1xuaW1wb3J0ICogYXMgQkZTVXRpbHMgZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBJbnN0YWxscyBCcm93c2VyRlMgb250byB0aGUgZ2l2ZW4gb2JqZWN0LlxuICogV2UgcmVjb21tZW5kIHRoYXQgeW91IHJ1biBpbnN0YWxsIHdpdGggdGhlICd3aW5kb3cnIG9iamVjdCB0byBtYWtlIHRoaW5nc1xuICogZ2xvYmFsLCBhcyBpbiBOb2RlLlxuICpcbiAqIFByb3BlcnRpZXMgaW5zdGFsbGVkOlxuICpcbiAqICogQnVmZmVyXG4gKiAqIHByb2Nlc3NcbiAqICogcmVxdWlyZSAod2UgbW9ua2V5LXBhdGNoIGl0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB3cml0ZSBjb2RlIGFzIGlmIHlvdSB3ZXJlIHJ1bm5pbmcgaW5zaWRlIE5vZGUuXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIG9iamVjdCB0byBpbnN0YWxsIHRoaW5ncyBvbnRvIChlLmcuIHdpbmRvdylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwob2JqOiBhbnkpIHtcbiAgb2JqLkJ1ZmZlciA9IEJ1ZmZlcjtcbiAgb2JqLnByb2Nlc3MgPSBwcm9jZXNzO1xuICB2YXIgb2xkUmVxdWlyZSA9IG9iai5yZXF1aXJlICE9IG51bGwgPyBvYmoucmVxdWlyZSA6IG51bGw7XG4gIC8vIE1vbmtleS1wYXRjaCByZXF1aXJlIGZvciBOb2RlLXN0eWxlIGNvZGUuXG4gIG9iai5yZXF1aXJlID0gZnVuY3Rpb24oYXJnOiBzdHJpbmcpIHtcbiAgICB2YXIgcnYgPSBCRlNSZXF1aXJlKGFyZyk7XG4gICAgaWYgKHJ2ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBvbGRSZXF1aXJlLmFwcGx5KG51bGwsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBydjtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckZpbGVTeXN0ZW0obmFtZTogc3RyaW5nLCBmczogZmlsZV9zeXN0ZW0uRmlsZVN5c3RlbUNvbnN0cnVjdG9yKSB7XG4gICg8YW55PiBGaWxlU3lzdGVtKVtuYW1lXSA9IGZzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQkZTUmVxdWlyZShtb2R1bGU6ICdmcycpOiB0eXBlb2YgZnM7XG5leHBvcnQgZnVuY3Rpb24gQkZTUmVxdWlyZShtb2R1bGU6ICdwYXRoJyk6IHR5cGVvZiBwYXRoO1xuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiAnYnVmZmVyJyk6IHR5cGVvZiBidWZmZXI7XG5leHBvcnQgZnVuY3Rpb24gQkZTUmVxdWlyZShtb2R1bGU6ICdwcm9jZXNzJyk6IHR5cGVvZiBwcm9jZXNzO1xuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiAnYmZzX3V0aWxzJyk6IHR5cGVvZiBCRlNVdGlscztcbmV4cG9ydCBmdW5jdGlvbiBCRlNSZXF1aXJlKG1vZHVsZTogc3RyaW5nKTogYW55O1xuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiBzdHJpbmcpOiBhbnkge1xuICBzd2l0Y2gobW9kdWxlKSB7XG4gICAgY2FzZSAnZnMnOlxuICAgICAgcmV0dXJuIGZzO1xuICAgIGNhc2UgJ3BhdGgnOlxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgY2FzZSAnYnVmZmVyJzpcbiAgICAgIC8vIFRoZSAnYnVmZmVyJyBtb2R1bGUgaGFzICdCdWZmZXInIGFzIGEgcHJvcGVydHkuXG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIGNhc2UgJ3Byb2Nlc3MnOlxuICAgICAgcmV0dXJuIHByb2Nlc3M7XG4gICAgY2FzZSAnYmZzX3V0aWxzJzpcbiAgICAgIHJldHVybiBCRlNVdGlscztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEZpbGVTeXN0ZW1bbW9kdWxlXTtcbiAgfVxufVxuXG4vKipcbiAqIFlvdSBtdXN0IGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIGEgcHJvcGVybHktaW5zdGFudGlhdGVkIHJvb3QgZmlsZSBzeXN0ZW1cbiAqIGJlZm9yZSB1c2luZyBhbnkgZmlsZSBzeXN0ZW0gQVBJIG1ldGhvZC5cbiAqIEBwYXJhbSB7QnJvd3NlckZTLkZpbGVTeXN0ZW19IHJvb3RGUyAtIFRoZSByb290IGZpbGVzeXN0ZW0gdG8gdXNlIGZvciB0aGVcbiAqICAgZW50aXJlIEJyb3dzZXJGUyBmaWxlIHN5c3RlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUocm9vdGZzOiBmaWxlX3N5c3RlbS5GaWxlU3lzdGVtKSB7XG4gIHJldHVybiBmcy5pbml0aWFsaXplKHJvb3Rmcyk7XG59XG5cbmV4cG9ydCB7RW1zY3JpcHRlbkZTLCBGaWxlU3lzdGVtfTtcbiJdfQ==