/**
 * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
 */
var buffer = require('buffer');
var fs = require('./node_fs');
var path = require('path');
var emscripten_fs_1 = require('../generic/emscripten_fs');
exports.EmscriptenFS = emscripten_fs_1["default"];
var FileSystem = require('./backends');
exports.FileSystem = FileSystem;
function install(obj) {
    obj.Buffer = Buffer;
    obj.process = process;
    var oldRequire = obj.require != null ? obj.require : null;
    obj.require = function (arg) {
        var rv = BFSRequire(arg);
        if (rv == null) {
            return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
        }
        else {
            return rv;
        }
    };
}
exports.install = install;
function registerFileSystem(name, fs) {
    FileSystem[name] = fs;
}
exports.registerFileSystem = registerFileSystem;
function BFSRequire(module) {
    switch (module) {
        case 'fs':
            return fs;
        case 'path':
            return path;
        case 'buffer':
            return buffer;
        case 'process':
            return process;
        default:
            return FileSystem[module];
    }
}
exports.BFSRequire = BFSRequire;
function initialize(rootfs) {
    return fs.initialize(rootfs);
}
exports.initialize = initialize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlcmZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvYnJvd3NlcmZzLnRzIl0sIm5hbWVzIjpbImluc3RhbGwiLCJyZWdpc3RlckZpbGVTeXN0ZW0iLCJCRlNSZXF1aXJlIiwiaW5pdGlhbGl6ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxJQUFPLE1BQU0sV0FBVyxRQUFRLENBQUMsQ0FBQztBQUNsQyxJQUFPLEVBQUUsV0FBVyxXQUFXLENBQUMsQ0FBQztBQUNqQyxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQztBQUU5Qiw4QkFBeUIsMEJBQTBCLENBQUMsQ0FBQTtBQW1FNUMsb0JBQVk7QUFsRXBCLElBQVksVUFBVSxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBa0VuQixrQkFBVTtBQWxEaEMsaUJBQXdCLEdBQVE7SUFDOUJBLEdBQUdBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO0lBQ3BCQSxHQUFHQSxDQUFDQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUN0QkEsSUFBSUEsVUFBVUEsR0FBR0EsR0FBR0EsQ0FBQ0EsT0FBT0EsSUFBSUEsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFFMURBLEdBQUdBLENBQUNBLE9BQU9BLEdBQUdBLFVBQVNBLEdBQVdBO1FBQ2hDLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekUsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNaLENBQUM7SUFDSCxDQUFDLENBQUNBO0FBQ0pBLENBQUNBO0FBYmUsZUFBTyxVQWF0QixDQUFBO0FBRUQsNEJBQW1DLElBQVksRUFBRSxFQUFxQztJQUM3RUMsVUFBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7QUFDaENBLENBQUNBO0FBRmUsMEJBQWtCLHFCQUVqQyxDQUFBO0FBT0Qsb0JBQTJCLE1BQWM7SUFDdkNDLE1BQU1BLENBQUFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQ2RBLEtBQUtBLElBQUlBO1lBQ1BBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO1FBQ1pBLEtBQUtBLE1BQU1BO1lBQ1RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2RBLEtBQUtBLFFBQVFBO1lBRVhBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1FBQ2hCQSxLQUFLQSxTQUFTQTtZQUNaQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNqQkE7WUFDRUEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDOUJBLENBQUNBO0FBQ0hBLENBQUNBO0FBZGUsa0JBQVUsYUFjekIsQ0FBQTtBQVFELG9CQUEyQixNQUE4QjtJQUN2REMsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7QUFDL0JBLENBQUNBO0FBRmUsa0JBQVUsYUFFekIsQ0FBQTtBQUVpQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQnJvd3NlckZTJ3MgbWFpbiBtb2R1bGUuIFRoaXMgaXMgZXhwb3NlZCBpbiB0aGUgYnJvd3NlciB2aWEgdGhlIEJyb3dzZXJGUyBnbG9iYWwuXG4gKi9cblxuaW1wb3J0IGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnLi9ub2RlX2ZzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBmaWxlX3N5c3RlbSA9IHJlcXVpcmUoJy4vZmlsZV9zeXN0ZW0nKTtcbmltcG9ydCBFbXNjcmlwdGVuRlMgZnJvbSAnLi4vZ2VuZXJpYy9lbXNjcmlwdGVuX2ZzJztcbmltcG9ydCAqIGFzIEZpbGVTeXN0ZW0gZnJvbSAnLi9iYWNrZW5kcyc7XG5cbi8qKlxuICogSW5zdGFsbHMgQnJvd3NlckZTIG9udG8gdGhlIGdpdmVuIG9iamVjdC5cbiAqIFdlIHJlY29tbWVuZCB0aGF0IHlvdSBydW4gaW5zdGFsbCB3aXRoIHRoZSAnd2luZG93JyBvYmplY3QgdG8gbWFrZSB0aGluZ3NcbiAqIGdsb2JhbCwgYXMgaW4gTm9kZS5cbiAqXG4gKiBQcm9wZXJ0aWVzIGluc3RhbGxlZDpcbiAqXG4gKiAqIEJ1ZmZlclxuICogKiBwcm9jZXNzXG4gKiAqIHJlcXVpcmUgKHdlIG1vbmtleS1wYXRjaCBpdClcbiAqXG4gKiBUaGlzIGFsbG93cyB5b3UgdG8gd3JpdGUgY29kZSBhcyBpZiB5b3Ugd2VyZSBydW5uaW5nIGluc2lkZSBOb2RlLlxuICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIFRoZSBvYmplY3QgdG8gaW5zdGFsbCB0aGluZ3Mgb250byAoZS5nLiB3aW5kb3cpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsKG9iajogYW55KSB7XG4gIG9iai5CdWZmZXIgPSBCdWZmZXI7XG4gIG9iai5wcm9jZXNzID0gcHJvY2VzcztcbiAgdmFyIG9sZFJlcXVpcmUgPSBvYmoucmVxdWlyZSAhPSBudWxsID8gb2JqLnJlcXVpcmUgOiBudWxsO1xuICAvLyBNb25rZXktcGF0Y2ggcmVxdWlyZSBmb3IgTm9kZS1zdHlsZSBjb2RlLlxuICBvYmoucmVxdWlyZSA9IGZ1bmN0aW9uKGFyZzogc3RyaW5nKSB7XG4gICAgdmFyIHJ2ID0gQkZTUmVxdWlyZShhcmcpO1xuICAgIGlmIChydiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gb2xkUmVxdWlyZS5hcHBseShudWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcnY7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJGaWxlU3lzdGVtKG5hbWU6IHN0cmluZywgZnM6IGZpbGVfc3lzdGVtLkZpbGVTeXN0ZW1Db25zdHJ1Y3Rvcikge1xuICAoPGFueT4gRmlsZVN5c3RlbSlbbmFtZV0gPSBmcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiAnZnMnKTogdHlwZW9mIGZzO1xuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiAncGF0aCcpOiB0eXBlb2YgcGF0aDtcbmV4cG9ydCBmdW5jdGlvbiBCRlNSZXF1aXJlKG1vZHVsZTogJ2J1ZmZlcicpOiB0eXBlb2YgYnVmZmVyO1xuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiAncHJvY2VzcycpOiB0eXBlb2YgcHJvY2VzcztcbmV4cG9ydCBmdW5jdGlvbiBCRlNSZXF1aXJlKG1vZHVsZTogc3RyaW5nKTogYW55O1xuZXhwb3J0IGZ1bmN0aW9uIEJGU1JlcXVpcmUobW9kdWxlOiBzdHJpbmcpOiBhbnkge1xuICBzd2l0Y2gobW9kdWxlKSB7XG4gICAgY2FzZSAnZnMnOlxuICAgICAgcmV0dXJuIGZzO1xuICAgIGNhc2UgJ3BhdGgnOlxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgY2FzZSAnYnVmZmVyJzpcbiAgICAgIC8vIFRoZSAnYnVmZmVyJyBtb2R1bGUgaGFzICdCdWZmZXInIGFzIGEgcHJvcGVydHkuXG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIGNhc2UgJ3Byb2Nlc3MnOlxuICAgICAgcmV0dXJuIHByb2Nlc3M7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBGaWxlU3lzdGVtW21vZHVsZV07XG4gIH1cbn1cblxuLyoqXG4gKiBZb3UgbXVzdCBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBhIHByb3Blcmx5LWluc3RhbnRpYXRlZCByb290IGZpbGUgc3lzdGVtXG4gKiBiZWZvcmUgdXNpbmcgYW55IGZpbGUgc3lzdGVtIEFQSSBtZXRob2QuXG4gKiBAcGFyYW0ge0Jyb3dzZXJGUy5GaWxlU3lzdGVtfSByb290RlMgLSBUaGUgcm9vdCBmaWxlc3lzdGVtIHRvIHVzZSBmb3IgdGhlXG4gKiAgIGVudGlyZSBCcm93c2VyRlMgZmlsZSBzeXN0ZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKHJvb3RmczogZmlsZV9zeXN0ZW0uRmlsZVN5c3RlbSkge1xuICByZXR1cm4gZnMuaW5pdGlhbGl6ZShyb290ZnMpO1xufVxuXG5leHBvcnQge0Vtc2NyaXB0ZW5GUywgRmlsZVN5c3RlbX07XG4iXX0=